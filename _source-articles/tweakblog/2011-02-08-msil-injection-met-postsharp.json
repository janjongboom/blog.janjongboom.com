{
    "title": "MSIL injection met PostSharp",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/6103/msil-injection-met-postsharp.html",
    "date": "2011-02-08T13:41:00.000Z",
    "category": "Backend",
    "views": 2946,
    "articleHtml": "Wanneer je manager een nieuwe techniek ten strengste verbied met als argument &apos;we snappen je code normaal al niet, dit maakt het alleen maar erger&apos; weet je dat je goud in handen hebt. Voor een <a href=\"http://code.google.com/p/scoutframeworkfm2009/\" rel=\"external\">eigen projectje</a> om vals te spelen met Football Manager (waar ik later absoluut nog eens terug kom) had ik globaal de volgende situatie:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">byte</span>&#xA0;<span class=\"code_ident\">CurrentAbility</span>\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">get</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">_mode</span>&#xA0;==&#xA0;<span class=\"code_ident\">DbMode</span>.<span class=\"code_ident\">Cached</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;in&#xA0;cached&#xA0;mode,&#xA0;hebben&#xA0;we&#xA0;een&#xA0;byte-array&#xA0;met&#xA0;alle&#xA0;waardes</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">_bytes</span>[<span class=\"code_ident\">Offsets</span>.<span class=\"code_ident\">CurrentAbility</span>];\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;<span class=\"code_keyword\">else</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;anders&#xA0;lezen&#xA0;we&#xA0;via&#xA0;een&#xA0;helper-method</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">ProcessManager</span>.<span class=\"code_method\">ReadByte</span>(<span class=\"code_ident\">_address</span>&#xA0;+&#xA0;<span class=\"code_ident\">Offsets</span>.<span class=\"code_ident\">CurrentAbility</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">set</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zelfde&#xA0;soort&#xA0;code&#xA0;voor&#xA0;de&#xA0;setter</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\nLeuk, neat, en vrij goed te lezen; probleem alleen dat ik een paar honderd properties heb, met een stuk of zeven verschillende types. Te veel werk. En aangezien je in eigen projecten toch helemaal los mocht gaan, leek een oplossing op basis van AOP me veel leuker. Nieuwe situatie:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br></code></td><td class=\"phphighlightcode\"><div><code>[<span class=\"code_method\">FMEntity</span>(<span class=\"code_ident\">Offsets</span>.<span class=\"code_ident\">CurrentAbility</span>)]\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">byte</span>&#xA0;<span class=\"code_ident\">CurrentAbility</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}</code></div></td></tr></table><br>\r\nBovenstaande is best eenvoudig werkend te krijgen met <a href=\"http://www.sharpcrafters.com/\" rel=\"external\">PostSharp</a>, een framework voor <a href=\"http://www.dotnetmag.nl/Artikel/805/Aspect-Oriented-Programming-onder-de-loep\" rel=\"external\">Aspect Oriented Programming</a> in .NET. Een eenvoudige implementatie van bovenstaande is iets als:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">FMEntityAttribute</span>&#xA0;:&#xA0;<span class=\"code_ident\">LocationInterceptionAspect</span>\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_method\">FMEntityAttribute</span>&#xA0;(<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">offset</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;doe&#xA0;wat</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">override</span>&#xA0;<span class=\"code_keyword\">void</span>&#xA0;<span class=\"code_method\">OnGetValue</span>(&#xA0;<span class=\"code_ident\">LocationInterceptionArgs</span>&#xA0;<span class=\"code_ident\">args</span>&#xA0;)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">args</span>.<span class=\"code_ident\">Instance</span>&#xA0;<span class=\"code_keyword\">is</span>&#xA0;<span class=\"code_keyword\">byte</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;doe&#xA0;byte&#xA0;lezen&#xA0;enzo</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">override</span>&#xA0;<span class=\"code_keyword\">void</span>&#xA0;<span class=\"code_method\">OnSetValue</span>(&#xA0;<span class=\"code_ident\">LocationInterceptionArgs</span>&#xA0;<span class=\"code_ident\">args</span>&#xA0;)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;ongeveer&#xA0;hetzelfde</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\nJe kunt nu alle logica die toch steeds hetzelfde is, eenvoudig webabstraheren in een aparte file. Maar... t&#xE9; traag. In mijn geval werd het bepalen van de rating voor spelers ruim tien keer zo traag; door alle overhead. Oplossing? Zelf MSIL injecten!<br><a name=\"more\"></a><br>\r\n<b>MSIL?</b><br>\r\nMSIL, de immediate language van Microsoft (vergelijkbaar met Java&apos;s bytecode) is een stack-based taal die uiteindelijk wordt uitgepoept als de compiler je C# code compileert. Shameless kopie van <a href=\"http://en.wikipedia.org/wiki/Common_Intermediate_Language\" rel=\"external\">Wikipedia</a>:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">r</span>&#xA0;=&#xA0;<span class=\"code_ident\">Foo</span>.<span class=\"code_method\">Add</span>(<span class=\"code_number\">2</span>,&#xA0;<span class=\"code_number\">3</span>);</code></div></td></tr></table><br>\r\nwordt:<br>\r\n<br>msil:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"phphighlightcode\"><div><pre>ldc.i4.2 // laadt een Int32 met waarde 2 op de stack\r\nldc.i4.3 // laadt een Int32 met waarde 3 op de stack\r\ncall int32 Foo::Add(int32, int32) // roep Int32.Add aan, met de waardes op de stack als params\r\n// de functie schrijft zelf de retval op de stack\r\nstloc.0 // lees return value van de stack, en sla op in local var op positie 0</pre></div></td></tr></table><br>\r\nVoor meer info hierover, zie <a href=\"http://www.codeguru.com/csharp/.net/net_general/il/article.php/c4635\" rel=\"external\">dit artikel op CodeGuru</a>.<br>\r\n<br>\r\n<b>MSIL injection?</b><br>\r\nE&#xE9;n van de leukste functies van PostSharp is, is dat het op basis van de attributes die je set, en de implementatie die je daarna schrijft direct n&#xE1; compilatie extra code aan je assembly toevoegd. De AOP code zit dus in je DLL geweven. Het mooie hieraan is, is dat je ook <b>zelf</b> extra code kan toevoegen via PostSharp. Hiermee ben je dus niet gebonden aan de (trage) versie die PostSharp je aanbiedt.<br>\r\n<br>\r\n<b>Uh dus?</b><br>\r\nAls basis heb ik de volgende helper-functie gemaakt: <a href=\"http://code.google.com/p/scoutframeworkfm2009/source/browse/trunk/FMSE.Core/Managers/PropertyInvoker.cs\" rel=\"external\">PropertyInvoker.cs</a>. Deze moet vanuit elke property worden aangeroepen:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></td><td class=\"phphighlightcode\"><div><code>[<span class=\"code_method\">FMEntity</span>(<span class=\"code_ident\">Offset</span>.<span class=\"code_ident\">CurrentAbility</span>)]\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">byte</span>&#xA0;<span class=\"code_ident\">CurrentAbility</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;<span class=\"code_ident\">set</span>;}\n<br>\n<br><span class=\"code_comment\">//&#xA0;wordt:</span>\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">byte</span>&#xA0;<span class=\"code_ident\">CurrentAbility</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;Get&lt;T&gt;(int&#xA0;offset,&#xA0;byte[]&#xA0;bytes,&#xA0;int&#xA0;baseAddress,&#xA0;DatabaseMode&#xA0;mode)</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">get</span>&#xA0;{&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">PropertyInvoker</span>.<span class=\"code_ident\">Get</span>&lt;<span class=\"code_keyword\">byte</span>&gt;(<span class=\"code_ident\">Offset</span>.<span class=\"code_ident\">CurrentAbility</span>,&#xA0;<span class=\"code_ident\">_bytes</span>,&#xA0;<span class=\"code_ident\">address</span>,&#xA0;<span class=\"code_ident\">_mode</span>);&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;Set&lt;T&gt;(int&#xA0;offset,&#xA0;int&#xA0;baseAddress,&#xA0;T&#xA0;newValue,&#xA0;DatabaseMode&#xA0;mode)</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">set</span>&#xA0;{&#xA0;<span class=\"code_ident\">PropertyInvoker</span>.<span class=\"code_ident\">Set</span>&lt;<span class=\"code_keyword\">byte</span>&gt;(<span class=\"code_ident\">Offset</span>.<span class=\"code_ident\">CurrentAbility</span>,&#xA0;<span class=\"code_ident\">address</span>,&#xA0;<span class=\"code_ident\">value</span>,&#xA0;<span class=\"code_ident\">_mode</span>;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\nErgo: we moeten de implementatie van onze property on the fly gaan veranderen. Yay!<br>\r\n<br>\r\n<b>Get it started</b><br>\r\nWe beginnen met het maken van een <a href=\"http://code.google.com/p/scoutframeworkfm2009/source/browse/trunk/FMSE.Core/AttributeWeaver/FMEntityTask.cs\" rel=\"external\">Task</a>, waarin we aangeven op welk &apos;attribute&apos; we werken: in dit geval &apos;FMEntityAttribute&apos;. Hierna kunnen we een <a href=\"http://code.google.com/p/scoutframeworkfm2009/source/browse/trunk/FMSE.Core/AttributeWeaver/FMEntityAdvice.cs\" rel=\"external\">Advice</a> schrijven, waarin we de daadwerkelijke implementatie doen.<br>\r\n<br>\r\n<b>Weave</b><br>\r\nDe &apos;weave&apos; method is het hart van het &apos;Advice&apos;. Deze wordt aangeroepen voor elke property waarop we ons attribute hebben gezet.<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">void</span>&#xA0;<span class=\"code_method\">Weave</span>(<span class=\"code_ident\">WeavingContext</span>&#xA0;<span class=\"code_ident\">context</span>,&#xA0;<span class=\"code_ident\">InstructionBlock</span>&#xA0;<span class=\"code_ident\">block</span>)\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;parent.Project.Module&#xA0;is&#xA0;de&#xA0;class-instance</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;we&#xA0;gaan&#xA0;eerst&#xA0;zoeken&#xA0;naar&#xA0;de&#xA0;velden&#xA0;die&#xA0;we&#xA0;nodig&#xA0;hebben</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;dat&#xA0;zijn&#xA0;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;&apos;OriginalBytes&apos;&#xA0;(byte[])</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;&apos;MemoryAddress&apos;&#xA0;(int32)</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;&apos;DatabaseMode&apos;&#xA0;(DatabaseMode)</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">bytesFieldDef</span>&#xA0;=&#xA0;<span class=\"code_ident\">parent</span>.<span class=\"code_ident\">Project</span>.<span class=\"code_ident\">Module</span>.<span class=\"code_method\">FindField</span>(<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">Player</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.<span class=\"code_method\">GetField</span>(<span class=\"code_string\">&quot;OriginalBytes&quot;</span>),&#xA0;<span class=\"code_ident\">BindingOptions</span>.<span class=\"code_ident\">Default</span>).<span class=\"code_method\">GetFieldDefinition</span>();\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">memAddressFieldDef</span>&#xA0;=&#xA0;<span class=\"code_ident\">parent</span>.<span class=\"code_ident\">Project</span>.<span class=\"code_ident\">Module</span>.<span class=\"code_method\">FindField</span>(<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">Player</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.<span class=\"code_method\">GetField</span>(<span class=\"code_string\">&quot;MemoryAddress&quot;</span>),&#xA0;<span class=\"code_ident\">BindingOptions</span>.<span class=\"code_ident\">Default</span>).<span class=\"code_method\">GetFieldDefinition</span>();\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">databaseModeFieldDef</span>&#xA0;=&#xA0;<span class=\"code_ident\">parent</span>.<span class=\"code_ident\">Project</span>.<span class=\"code_ident\">Module</span>.<span class=\"code_method\">FindField</span>(<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">Player</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.<span class=\"code_method\">GetField</span>(<span class=\"code_string\">&quot;DatabaseMode&quot;</span>),&#xA0;<span class=\"code_ident\">BindingOptions</span>.<span class=\"code_ident\">Default</span>).<span class=\"code_method\">GetFieldDefinition</span>();\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;nu&#xA0;gaan&#xA0;we&#xA0;op&#xA0;basis&#xA0;van&#xA0;de&#xA0;return-type,&#xA0;bepalen&#xA0;of&#xA0;we&#xA0;een&#xA0;getter&#xA0;of&#xA0;een&#xA0;setter&#xA0;hebben</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">context</span>.<span class=\"code_ident\">Method</span>.<span class=\"code_ident\">ReturnParameter</span>.<span class=\"code_ident\">ParameterType</span>.<span class=\"code_method\">GetSystemType</span>(<span class=\"code_keyword\">null</span>,&#xA0;<span class=\"code_keyword\">null</span>)&#xA0;!=&#xA0;<span class=\"code_keyword\">typeof</span>(<span class=\"code_keyword\">void</span>))\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">this</span>.<span class=\"code_method\">WeaveGetter</span>(<span class=\"code_ident\">context</span>,&#xA0;<span class=\"code_ident\">block</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">else</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">this</span>.<span class=\"code_method\">WeaveSetter</span>(<span class=\"code_ident\">context</span>,&#xA0;<span class=\"code_ident\">block</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>WeaveGetter</b><br>\r\nIn de &apos;WeaveGetter&apos; kunnen we nu de MSIL gaan schrijven om de implementatie van de &apos;Get&apos; te vervangen:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">private</span>&#xA0;<span class=\"code_keyword\">void</span>&#xA0;<span class=\"code_method\">WeaveGetter</span>(<span class=\"code_ident\">WeavingContext</span>&#xA0;<span class=\"code_ident\">context</span>,&#xA0;<span class=\"code_ident\">InstructionBlock</span>&#xA0;<span class=\"code_ident\">block</span>)\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;we&#xA0;gaan&#xA0;&apos;voor&apos;&#xA0;de&#xA0;huidige&#xA0;implementatie&#xA0;schrijven</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">InstructionSequence</span>&#xA0;<span class=\"code_ident\">innerBodySequence</span>&#xA0;=&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">Method</span>.<span class=\"code_ident\">MethodBody</span>.<span class=\"code_method\">CreateInstructionSequence</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">block</span>.<span class=\"code_method\">AddInstructionSequence</span>(<span class=\"code_ident\">innerBodySequence</span>,&#xA0;<span class=\"code_ident\">NodePosition</span>.<span class=\"code_ident\">Before</span>,&#xA0;<span class=\"code_keyword\">null</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;instructionWriter&#xA0;is&#xA0;waar&#xA0;je&#xA0;je&#xA0;MSIL&#xA0;op&#xA0;kan&#xA0;kloppen</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">AttachInstructionSequence</span>(<span class=\"code_ident\">innerBodySequence</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zoek&#xA0;PropertyInvoker.Get&#xA0;op,&#xA0;met&#xA0;als&#xA0;&lt;T&gt;&#xA0;het&#xA0;huidige&#xA0;type</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;in&#xA0;dit&#xA0;geval&#xA0;dus&#xA0;Get&lt;byte&gt;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">MethodBase</span>&#xA0;<span class=\"code_ident\">m</span>&#xA0;=&#xA0;<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">PropertyInvoker</span>).<span class=\"code_method\">GetMethod</span>(<span class=\"code_string\">&quot;Get&quot;</span>).<span class=\"code_method\">MakeGenericMethod</span>(<span class=\"code_ident\">context</span>.<span class=\"code_ident\">Method</span>.<span class=\"code_ident\">ReturnParameter</span>.<span class=\"code_ident\">ParameterType</span>.<span class=\"code_method\">GetSystemType</span>(<span class=\"code_keyword\">null</span>,&#xA0;<span class=\"code_keyword\">null</span>));\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">IMethod</span>&#xA0;<span class=\"code_ident\">propertyInvokerGet</span>&#xA0;=&#xA0;<span class=\"code_ident\">parent</span>.<span class=\"code_ident\">Project</span>.<span class=\"code_ident\">Module</span>.<span class=\"code_method\">FindMethod</span>(<span class=\"code_ident\">m</span>,&#xA0;<span class=\"code_ident\">BindingOptions</span>.<span class=\"code_ident\">RequireGenericInstance</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zet&#xA0;&apos;Offset&apos;,&#xA0;de&#xA0;waarde&#xA0;die&#xA0;je&#xA0;meegeeft&#xA0;in&#xA0;de&#xA0;attribute&#xA0;op&#xA0;de&#xA0;stack</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">EmitInstructionInt32</span>(<span class=\"code_ident\">OpCodeNumber</span>.<span class=\"code_ident\">Ldc_I4</span>,&#xA0;<span class=\"code_keyword\">this</span>.<span class=\"code_ident\">attribute</span>.<span class=\"code_ident\">Offset</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zet&#xA0;nu&#xA0;ldarg.0&#xA0;op&#xA0;de&#xA0;stack&#xA0;(je&#xA0;huidige&#xA0;instance)</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">EmitInstruction</span>(<span class=\"code_ident\">OpCodeNumber</span>.<span class=\"code_ident\">Ldarg_0</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;lees&#xA0;hier&#xA0;het&#xA0;veld&#xA0;&apos;bytes&apos;&#xA0;vanaf;&#xA0;zet&#xA0;deze&#xA0;ook&#xA0;op&#xA0;de&#xA0;stack</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">EmitInstructionField</span>(<span class=\"code_ident\">OpCodeNumber</span>.<span class=\"code_ident\">Ldfld</span>,&#xA0;<span class=\"code_ident\">bytesFieldDef</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zelfde&#xA0;als&#xA0;hierboven</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">EmitInstruction</span>(<span class=\"code_ident\">OpCodeNumber</span>.<span class=\"code_ident\">Ldarg_0</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;zet&#xA0;het&#xA0;veld&#xA0;&apos;memAddress&apos;&#xA0;op&#xA0;de&#xA0;stack</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">EmitInstructionField</span>(<span class=\"code_ident\">OpCodeNumber</span>.<span class=\"code_ident\">Ldfld</span>,&#xA0;<span class=\"code_ident\">memAddressFieldDef</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">EmitInstruction</span>(<span class=\"code_ident\">OpCodeNumber</span>.<span class=\"code_ident\">Ldarg_0</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zet&#xA0;&apos;databaseMode&apos;&#xA0;op&#xA0;de&#xA0;stack</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">EmitInstructionField</span>(<span class=\"code_ident\">OpCodeNumber</span>.<span class=\"code_ident\">Ldfld</span>,&#xA0;<span class=\"code_ident\">databaseModeFieldDef</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;stack&#xA0;bevat&#xA0;nu:</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;1.&#xA0;de&#xA0;waarde&#xA0;die&#xA0;je&#xA0;meegeeft&#xA0;aan&#xA0;attribute</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;2.&#xA0;field&#xA0;&apos;OriginalBytes&apos;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;3.&#xA0;field&#xA0;&apos;MemoryAddress&apos;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;4.&#xA0;field&#xA0;&apos;DatabaseMode&apos;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;we&#xA0;roepen&#xA0;nu&#xA0;de&#xA0;.Get&lt;T&gt;&#xA0;aan,&#xA0;met&#xA0;de&#xA0;bovenstaande&#xA0;waardes&#xA0;als&#xA0;argumenten</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">EmitInstructionMethod</span>(<span class=\"code_ident\">OpCodeNumber</span>.<span class=\"code_ident\">Call</span>,&#xA0;<span class=\"code_ident\">propertyInvokerGet</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;in&#xA0;MSIL&#xA0;wordt&#xA0;de&#xA0;geretouneerde&#xA0;waarde&#xA0;nu&#xA0;op&#xA0;de&#xA0;stack&#xA0;gezet</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;als&#xA0;we&#xA0;nu&#xA0;dus&#xA0;&apos;return&apos;&#xA0;doen,&#xA0;wordt&#xA0;deze&#xA0;waarde&#xA0;ge-&apos;popt&apos;&#xA0;van&#xA0;de&#xA0;stack</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;teruggegeven</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">EmitInstruction</span>(<span class=\"code_ident\">OpCodeNumber</span>.<span class=\"code_ident\">Ret</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">InstructionWriter</span>.<span class=\"code_method\">DetachInstructionSequence</span>();\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Registreren in PostSharp</b><br>\r\nOm ervoor te zorgen dat PostSharp deze code uitvoert, moet je een &apos;psplugin&apos; schrijven. Deze hoeft niet ingewikkeld te zijn. Zie als voorbeeld <a href=\"http://code.google.com/p/scoutframeworkfm2009/source/browse/trunk/FMSE.Core/FMSE.FMEntityWeaver.psplugin\" rel=\"external\">hier</a>.<br>\r\n<br>\r\n<b>Et voila</b><br>\r\nNa het builden van je DLL kan je deze openen met <a href=\"http://www.red-gate.com/products/dotnet-development/reflector/\" rel=\"external\">Reflector</a>, en zien dat de inner-method is veranderd:<br>\r\n<img src=\"http://www.100procentjan.nl/tweakers/postsharp.png\" title=\"http://www.100procentjan.nl/tweakers/postsharp.png\" alt=\"http://www.100procentjan.nl/tweakers/postsharp.png\">",
    "nextLink": "http://glamour.tweakblogs.net/blog/6094/beeldmateriaal-funda-10-jaar%21.html",
    "comments": [
        {
            "author": "PrisonerOfPain",
            "date": "dinsdag 08 februari 2011 17:20",
            "contentHtml": "Staat de return in je gegenereerde setter niet fout?",
            "ownReply": false
        },
        {
            "author": "Ventieldopje",
            "date": "dinsdag 08 februari 2011 18:59",
            "contentHtml": "Stukje unreachable code zie ik ja <img src=\"http://tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":P\"> Opzich maakt dit niet uit omdat je PropertyInvoker de waarde zet maar toch, staat slordig en kan voor verwarring zorgen.<br>\r\n<br>\r\nVerder leuk gevonden, hoop het nooit nodig te hebben maar ik zie ook zo snel geen andere manier om met zo veel properties te werken <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\"><p class=\"edit\">[Reactie gewijzigd op dinsdag 08 februari 2011 19:05]</p>",
            "ownReply": false
        },
        {
            "author": "akakiwi",
            "date": "woensdag 09 februari 2011 07:44",
            "contentHtml": "Mijn god.... <br>\r\nBen jij even lekker los gegaan.<br>\r\nDe meerwaarde voor mijn dagelijkse programmeer werkzaamheden zie ik nog even niet, maar misschien komt het nog ooit van pas.",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "woensdag 09 februari 2011 10:05",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/6103/msil-injection-met-postsharp.html#r_82056\">akakiwi schreef op woensdag 09 februari 2011 @ 07:44:</a><br>\r\nMijn god.... <br>\r\nBen jij even lekker los gegaan.<br>\r\nDe meerwaarde voor mijn dagelijkse programmeer werkzaamheden zie ik nog even niet, maar misschien komt het nog ooit van pas.</div></blockquote>Omdat ik dit soort dingen in mijn dagelijkse werk ook nooit nodig ga hebben, heb ik dus zo&apos;n projectje: kan je j&#xFA;ist even helemaal risicoloos los gaan  <img src=\"http://tweakimg.net/g/s/yummie.gif\" width=\"15\" height=\"15\" alt=\":9\"><blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/6103/msil-injection-met-postsharp.html#r_82018\">Phas0r schreef op dinsdag 08 februari 2011 @ 18:59:</a><br>\r\nStukje unreachable code zie ik ja <img src=\"http://tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":P\"> Opzich maakt dit niet uit omdat je PropertyInvoker de waarde zet maar toch, staat slordig en kan voor verwarring zorgen.</div></blockquote>Ja, klopt. Dit is zo&apos;n &apos;pf, het werkt eindelijk, en niemand heeft er last van, dus ik ga niet verder met uitzoeken&apos; stukje code.<p class=\"edit\">[Reactie gewijzigd op woensdag 09 februari 2011 10:06]</p>",
            "ownReply": true
        }
    ]
}