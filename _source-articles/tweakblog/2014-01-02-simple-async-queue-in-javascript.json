{
    "title": "Simple async queue in javascript",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/9745/simple-async-queue-in-javascript.html",
    "date": "2014-01-02T12:51:00.000Z",
    "category": "Frontend",
    "views": 3115,
    "articleHtml": "Normally I fall back to caolan&apos;s async module, but I&apos;m not in a node.js environment and I needed a simple async queue with concurrency 1; which can be done in a one liner.<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">q</span>&#xA0;=&#xA0;[&#xA0;\n<br>&#xA0;&#xA0;<span class=\"code_keyword\">function</span>&#xA0;<span class=\"code_method\">a</span>(<span class=\"code_ident\">n</span>)&#xA0;{&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_string\">&apos;a&apos;</span>),&#xA0;<span class=\"code_method\">setTimeout</span>(<span class=\"code_ident\">n</span>,&#xA0;<span class=\"code_number\">30</span>);&#xA0;},\n<br>&#xA0;&#xA0;<span class=\"code_keyword\">function</span>&#xA0;<span class=\"code_method\">b</span>(<span class=\"code_ident\">n</span>)&#xA0;{&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_string\">&apos;b&apos;</span>),&#xA0;<span class=\"code_method\">setTimeout</span>(<span class=\"code_ident\">n</span>,&#xA0;<span class=\"code_number\">10</span>);&#xA0;}\n<br>];\n<br>\n<br><span class=\"code_keyword\">function</span>&#xA0;<span class=\"code_method\">queue</span>(<span class=\"code_ident\">q</span>,&#xA0;<span class=\"code_ident\">n</span>)&#xA0;{\n<br>&#xA0;&#xA0;<span class=\"code_ident\">q</span>.<span class=\"code_ident\">length</span>&#xA0;?&#xA0;<span class=\"code_ident\">q</span>.<span class=\"code_method\">shift</span>()(<span class=\"code_ident\">queue</span>.<span class=\"code_method\">bind</span>(<span class=\"code_keyword\">this</span>,&#xA0;<span class=\"code_ident\">q</span>,&#xA0;<span class=\"code_ident\">n</span>))&#xA0;:&#xA0;<span class=\"code_method\">n</span>();\n<br>}\n<br>\n<br><span class=\"code_method\">queue</span>(<span class=\"code_ident\">q</span>,&#xA0;<span class=\"code_keyword\">function</span>()&#xA0;{&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_string\">&apos;done&apos;</span>)&#xA0;});</code></div></td></tr></table><br>\r\nYou could use arguments.callee rather than queue to bind to the current function, but it has been deprecated since ES5.<br>\r\n<br>\r\nIt&apos;s also easy to use it with promises, let&apos;s say I have a function |sendKey| that returns a promise and I want to send a string char by char:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">input</span>&#xA0;=&#xA0;<span class=\"code_string\">&apos;sometext&apos;</span>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">q</span>&#xA0;=&#xA0;<span class=\"code_ident\">input</span>.<span class=\"code_method\">split</span>(<span class=\"code_string\">&apos;&apos;</span>).<span class=\"code_method\">map</span>(<span class=\"code_keyword\">function</span>(<span class=\"code_ident\">c</span>)&#xA0;{\n<br>&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_keyword\">function</span>(<span class=\"code_ident\">n</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">sendKey</span>(<span class=\"code_ident\">c</span>).<span class=\"code_method\">then</span>(<span class=\"code_ident\">n</span>);\n<br>&#xA0;&#xA0;};\n<br>});\n<br>\n<br><span class=\"code_method\">queue</span>(<span class=\"code_ident\">q</span>,&#xA0;<span class=\"code_keyword\">function</span>()&#xA0;{&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_string\">&apos;done&apos;</span>)&#xA0;});</code></div></td></tr></table>",
    "nextLink": "http://glamour.tweakblogs.net/blog/8717/getting-started-on-firefox-os-apps-with-angularjs.html",
    "comments": [
        {
            "author": "WeeJeWel",
            "date": "donderdag 02 januari 2014 15:59",
            "contentHtml": "Interessant! Tip voor het vervolg: noem je variabelen wat logischer dan n, q etc. Kostte me nu iets meer puzzelwerk <img src=\"//tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":p\">",
            "ownReply": false
        },
        {
            "author": "TheKirk",
            "date": "dinsdag 07 januari 2014 07:56",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/9745/simple-async-queue-in-javascript.html#r_135601\" rel=\"nofollow\">WeeJeWel schreef op donderdag 02 januari 2014 @ 15:59:</a><br>\r\nInteressant! Tip voor het vervolg: noem je variabelen wat logischer dan n, q etc. Kostte me nu iets meer puzzelwerk <img src=\"//tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":p\"></div></blockquote>Agreed.",
            "ownReply": false
        }
    ]
}