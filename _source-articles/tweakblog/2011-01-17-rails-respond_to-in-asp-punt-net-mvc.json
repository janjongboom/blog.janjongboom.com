{
    "title": "Rails' respond_to in ASP.NET MVC",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/5966/rails-respond_to-in-asp-punt-net-mvc.html",
    "date": "2011-01-17T13:15:00.000Z",
    "category": "Frontend",
    "views": 3840,
    "articleHtml": "In Ruby on Rails is het mogelijk om met <a href=\"http://www.tokumine.com/2009/09/13/how-does-respond_to-work-in-the-rails-controllers/\" rel=\"external\">respond_to</a> een actie beschikbaar te maken in andere formaten dan HTML met &#xE9;&#xE9;n regel. Pretty neat, omdat je je code zo zonder moeite via verschillende interfaces kan gebruiken.<br>\r\n<br>ruby:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"phphighlightcode\"><div><pre>respond_to do |format|\r\n  format.html\r\n  format.xml  { render :xml =&gt; @huis }\r\n  format.json { render :json =&gt; @huis }\r\nend</pre></div></td></tr></table><br>\r\nIn ASP.NET MVC 2 is er niet standaard zo&apos;n oplossing, maar doordat MVC zo pluggable is is deze wel eenvoudig toe te voegen.<br><a name=\"more\"></a><br>\r\n<b>Models en Views</b><br>\r\nHierbij introduceer ik jullie tot de nieuwe site &apos;fudna&apos;. Ze tonen huizen en hebben hiervoor de volgende MVC structuur.<br>\r\n<img src=\"http://www.100procentjan.nl/tweakers/fudnamvc.png\" title=\"http://www.100procentjan.nl/tweakers/fudnamvc.png\" alt=\"http://www.100procentjan.nl/tweakers/fudnamvc.png\"><br>\r\nDe actie &apos;Index&apos; op de &apos;HuisController&apos; ziet er zo uit:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">ActionResult</span>&#xA0;<span class=\"code_method\">Index</span>(<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">id</span>)\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">model</span>&#xA0;=&#xA0;<span class=\"code_ident\">FudnaDao</span>.<span class=\"code_method\">GetHuis</span>(<span class=\"code_ident\">id</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_method\">View</span>(<span class=\"code_ident\">model</span>);\n<br>}</code></div></td></tr></table><br>\r\nWat resulteert in de weergave van dit vernieuwende concept:<br>\r\n<img src=\"http://www.100procentjan.nl/tweakers/fudnaview.png\" title=\"http://www.100procentjan.nl/tweakers/fudnaview.png\" alt=\"http://www.100procentjan.nl/tweakers/fudnaview.png\"><br>\r\n<br>\r\n<b>En nu andere formaten</b><br>\r\nAllereerst breiden we de standaard routing uit in Global.asax. Naast de &apos;standaard&apos; regel voegen we een rule toe die extensies accepteert.<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_keyword\">void</span>&#xA0;<span class=\"code_method\">RegisterRoutes</span>(<span class=\"code_ident\">RouteCollection</span>&#xA0;<span class=\"code_ident\">routes</span>)\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">routes</span>.<span class=\"code_method\">IgnoreRoute</span>(<span class=\"code_string\">&quot;{resource}.axd/{*pathInfo}&quot;</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;dit&#xA0;is&#xA0;nieuw</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">routes</span>.<span class=\"code_method\">MapRoute</span>(\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_string\">&quot;DefaultWithExtension&quot;</span>,\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_string\">&quot;{controller}/{action}/{id}.{format}&quot;</span>,\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">new</span>&#xA0;{&#xA0;<span class=\"code_ident\">controller</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;Home&quot;</span>,&#xA0;<span class=\"code_ident\">action</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;Index&quot;</span>&#xA0;}&#xA0;<span class=\"code_comment\">//&#xA0;Parameter&#xA0;defaults</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;dit&#xA0;niet&#xA0;meer</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">routes</span>.<span class=\"code_method\">MapRoute</span>(\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_string\">&quot;Default&quot;</span>,\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_string\">&quot;{controller}/{action}/{id}&quot;</span>,\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">new</span>&#xA0;{&#xA0;<span class=\"code_ident\">controller</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;Home&quot;</span>,&#xA0;<span class=\"code_ident\">action</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;Index&quot;</span>,&#xA0;<span class=\"code_ident\">id</span>&#xA0;=&#xA0;<span class=\"code_ident\">UrlParameter</span>.<span class=\"code_ident\">Optional</span>&#xA0;}&#xA0;<span class=\"code_comment\">//&#xA0;Parameter&#xA0;defaults</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;);\n<br>}</code></div></td></tr></table><br>\r\nOm aan te geven welke formaten we ondersteunen maken we gebruik van <a href=\"http://glamour.tweakblogs.net/blog/5892/non-javascript-fallbacks-in-asp-punt-net-mvc.html\" rel=\"external\">ActionFilterAttributes</a>. Mooi hieraan is dat we het resultaat van elke actie kunnen overschrijven in deze filters. Het RespondTo filter zou er ongeveer zo uit zien:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">RespondTo</span>&#xA0;:&#xA0;<span class=\"code_ident\">ActionFilterAttribute</span>&#xA0;\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">private</span>&#xA0;<span class=\"code_ident\">Format</span>[]&#xA0;<span class=\"code_ident\">_formats</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_method\">RespondTo</span>(<span class=\"code_keyword\">params</span>&#xA0;<span class=\"code_ident\">Format</span>[]&#xA0;<span class=\"code_ident\">formats</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">_formats</span>&#xA0;=&#xA0;<span class=\"code_ident\">formats</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">override</span>&#xA0;<span class=\"code_keyword\">void</span>&#xA0;<span class=\"code_method\">OnActionExecuted</span>(<span class=\"code_ident\">ActionExecutedContext</span>&#xA0;<span class=\"code_ident\">filterContext</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zoek&#xA0;het&#xA0;model&#xA0;op</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">model</span>&#xA0;=&#xA0;((<span class=\"code_ident\">ViewResult</span>)&#xA0;<span class=\"code_ident\">filterContext</span>.<span class=\"code_ident\">Result</span>).<span class=\"code_ident\">ViewData</span>.<span class=\"code_ident\">Model</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;hebben&#xA0;we&#xA0;een&#xA0;format&#xA0;parameter?</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">object</span>&#xA0;<span class=\"code_ident\">format</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">filterContext</span>.<span class=\"code_ident\">RouteData</span>.<span class=\"code_ident\">Values</span>.<span class=\"code_method\">TryGetValue</span>(<span class=\"code_string\">&quot;format&quot;</span>,&#xA0;&#xA0;<span class=\"code_keyword\">out</span>&#xA0;<span class=\"code_ident\">format</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zoja,&#xA0;dan&#xA0;kijk&#xA0;naar&#xA0;de&#xA0;waarde</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">switch</span>(<span class=\"code_ident\">format</span>&#xA0;<span class=\"code_keyword\">as</span>&#xA0;<span class=\"code_keyword\">string</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;als&#xA0;json&#xA0;niet&#xA0;ondersteunt;&#xA0;dan&#xA0;return</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">case</span>&#xA0;<span class=\"code_string\">&quot;json&quot;</span>:\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(!<span class=\"code_ident\">_formats</span>.<span class=\"code_method\">Any</span>(<span class=\"code_ident\">f</span>&#xA0;=&gt;&#xA0;<span class=\"code_ident\">f</span>&#xA0;==&#xA0;<span class=\"code_ident\">Format</span>.<span class=\"code_ident\">Json</span>))&#xA0;<span class=\"code_keyword\">return</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;transformeer&#xA0;het&#xA0;model&#xA0;naar&#xA0;Json</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;overschrijf&#xA0;het&#xA0;oude&#xA0;Result</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">filterContext</span>.<span class=\"code_ident\">Result</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">JsonResult</span>&#xA0;{&#xA0;<span class=\"code_ident\">Data</span>&#xA0;=&#xA0;<span class=\"code_ident\">model</span>,&#xA0;<span class=\"code_ident\">JsonRequestBehavior</span>&#xA0;=&#xA0;<span class=\"code_ident\">JsonRequestBehavior</span>.<span class=\"code_ident\">AllowGet</span>&#xA0;};\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">break</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">case</span>&#xA0;<span class=\"code_string\">&quot;xml&quot;</span>:\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(!<span class=\"code_ident\">_formats</span>.<span class=\"code_method\">Any</span>(<span class=\"code_ident\">f</span>&#xA0;=&gt;&#xA0;<span class=\"code_ident\">f</span>&#xA0;==&#xA0;<span class=\"code_ident\">Format</span>.<span class=\"code_ident\">Xml</span>))&#xA0;<span class=\"code_keyword\">return</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;same&#xA0;same&#xA0;voor&#xA0;XML.&#xA0;Maar&#xA0;dat&#xA0;is&#xA0;lastiger&#xA0;in&#xA0;een&#xA0;one-liner</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">using</span>(<span class=\"code_ident\">MemoryStream</span>&#xA0;<span class=\"code_ident\">ms</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">MemoryStream</span>())&#xA0;<span class=\"code_comment\">//&#xA0;simpele&#xA0;serialization</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">using</span>(<span class=\"code_ident\">TextWriter</span>&#xA0;<span class=\"code_ident\">tw</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">StreamWriter</span>(<span class=\"code_ident\">ms</span>))\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">XmlSerializer</span>(<span class=\"code_ident\">model</span>.<span class=\"code_method\">GetType</span>()).<span class=\"code_method\">Serialize</span>(<span class=\"code_ident\">tw</span>,&#xA0;<span class=\"code_ident\">model</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ms</span>.<span class=\"code_method\">Seek</span>(<span class=\"code_number\">0</span>,&#xA0;<span class=\"code_ident\">SeekOrigin</span>.<span class=\"code_ident\">Begin</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;hier&#xA0;zetten&#xA0;we&#xA0;de&#xA0;nieuwe&#xA0;content&#xA0;naar&#xA0;de&#xA0;XML</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">filterContext</span>.<span class=\"code_ident\">Result</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">ContentResult</span>&#xA0;{&#xA0;<span class=\"code_ident\">ContentType</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;text/xml&quot;</span>,&#xA0;<span class=\"code_ident\">Content</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">StreamReader</span>(<span class=\"code_ident\">ms</span>).<span class=\"code_method\">ReadToEnd</span>()&#xA0;};\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">break</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}\n<br>\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">enum</span>&#xA0;<span class=\"code_ident\">Format</span>\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Xml</span>,\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Json</span>\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Actie aanpassen</b><br>\r\nAan de bestaande actie hoeven we nu niets meer aan te passen. We zetten er enkel een nieuw attribuut op:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></td><td class=\"phphighlightcode\"><div><code>[<span class=\"code_method\">RespondTo</span>(<span class=\"code_ident\">Format</span>.<span class=\"code_ident\">Xml</span>,&#xA0;<span class=\"code_ident\">Format</span>.<span class=\"code_ident\">Json</span>)]\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">ActionResult</span>&#xA0;<span class=\"code_method\">Index</span>(<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">id</span>)\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">model</span>&#xA0;=&#xA0;<span class=\"code_ident\">FudnaDao</span>.<span class=\"code_method\">GetHuis</span>(<span class=\"code_ident\">id</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_method\">View</span>(<span class=\"code_ident\">model</span>);\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Resultaat</b><br>\r\nEn dat was het al. Wanneer we nu &apos;.xml&apos; of &apos;.json&apos; toevoegen aan de URL krijgen we de data in dat formaat binnen!<br>\r\n<img src=\"http://www.100procentjan.nl/tweakers/fudnaxml.png\" title=\"http://www.100procentjan.nl/tweakers/fudnaxml.png\" alt=\"http://www.100procentjan.nl/tweakers/fudnaxml.png\"><br>\r\n<br>\r\n<img src=\"http://www.100procentjan.nl/tweakers/fudnajson.png\" title=\"http://www.100procentjan.nl/tweakers/fudnajson.png\" alt=\"http://www.100procentjan.nl/tweakers/fudnajson.png\">",
    "nextLink": "http://glamour.tweakblogs.net/blog/5948/solr-deel-1-introductie-tot-faceted-search.html",
    "comments": [
        {
            "author": "CodeCaster",
            "date": "maandag 17 januari 2011 14:33",
            "contentHtml": "Waarom switch je op string terwijl je daar juist zo&apos;n mooie enum voor hebt waarmee je kan <a href=\"http://msdn.microsoft.com/en-us/library/essfb559.aspx\" rel=\"external\">parsen</a>? Het lijkt voor mijn niet-Linq-getrainde oog alsof je iets vergelijkbaars doet in je case, maar dit lijkt mij leesbaarder:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">try</span>\n<br>{\n<br>&#xA0;&#xA0;<span class=\"code_ident\">filterContext</span>.<span class=\"code_ident\">RouteData</span>.<span class=\"code_ident\">Values</span>.<span class=\"code_method\">TryGetValue</span>(<span class=\"code_string\">&quot;format&quot;</span>,&#xA0;&#xA0;<span class=\"code_keyword\">out</span>&#xA0;<span class=\"code_ident\">formatString</span>);&#xA0;\n<br>&#xA0;&#xA0;<span class=\"code_ident\">Format</span>&#xA0;<span class=\"code_ident\">format</span>&#xA0;=&#xA0;<span class=\"code_ident\">Enum</span>.<span class=\"code_method\">Parse</span>(<span class=\"code_method\">typeOf</span>(<span class=\"code_ident\">Format</span>),&#xA0;<span class=\"code_ident\">formatString</span>);\n<br>\n<br>&#xA0;&#xA0;<span class=\"code_keyword\">switch</span>&#xA0;(<span class=\"code_ident\">format</span>)\n<br>&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">case</span>&#xA0;<span class=\"code_ident\">Xml</span>:\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;Do&#xA0;something</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">break</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">case</span>&#xA0;<span class=\"code_ident\">Json</span>:\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;Do&#xA0;something</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">break</span>;\n<br>&#xA0;&#xA0;}\n<br>}\n<br><span class=\"code_keyword\">catch</span>&#xA0;(<span class=\"code_ident\">ArgumentException</span>)\n<br>{\n<br>&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;Geen&#xA0;herkend&#xA0;format</span>\n<br>}</code></div></td></tr></table><br>\r\n<img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\">",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "maandag 17 januari 2011 14:40",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5966/rails-respond_to-in-asp-punt-net-mvc.html#r_80109\">CodeCaster schreef op maandag 17 januari 2011 @ 14:33:</a><br>\r\nWaarom switch je op string terwijl je daar juist zo&apos;n mooie enum voor hebt waarmee je kan <a href=\"http://msdn.microsoft.com/en-us/library/essfb559.aspx\" rel=\"external\">parsen</a>? Het lijkt voor mijn niet-Linq-getrainde oog alsof je iets vergelijkbaars doet in je case, maar dit lijkt mij leesbaarder:</div></blockquote>Nou, de strings zijn voor de extensie, en de extensie is nu toevallig gelijk aan de waarde van de enum. Met het los parsen van de strings kan je de extensie &quot;.pietje&quot; JSON laten uitspugen.<br>\r\n<br>\r\nOverigens zou ik voor productiecode eerder iets doen als:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">enum</span>&#xA0;<span class=\"code_ident\">Format</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">Extension</span>(<span class=\"code_string\">&quot;xml&quot;</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Xml</span>\n<br>}</code></div></td></tr></table><br>\r\nen dan op basis van die attributes kijken of er een match is <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"><p class=\"edit\">[Reactie gewijzigd op maandag 17 januari 2011 14:40]</p>",
            "ownReply": true
        },
        {
            "author": "YopY",
            "date": "maandag 17 januari 2011 15:02",
            "contentHtml": "Nu moet je voordat je dit toe gaat passen op je sites wel eerst bedenken of je alternatieve uitvoersmethodes wilt aanbieden. Effectief maak je met deze techniek van je website een web<i>service</i>, waar allerlei software mee kan werken. Is natuurlijk goed als je bijvoorbeeld een Fudna &apos;app&apos; wilt maken voor telefoons waarmee je dezelfde data wilt benaderen, maar weer niet als je je content wat wilt bewaken. Natuurlijk, HTML is ook eenvoudig te crawlen, maar XML en/of JSON zijn eenvoudiger binnen te slepen.",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "maandag 17 januari 2011 15:21",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5966/rails-respond_to-in-asp-punt-net-mvc.html#r_80113\">YopY schreef op maandag 17 januari 2011 @ 15:02:</a><br>\r\nNu moet je voordat je dit toe gaat passen op je sites wel eerst bedenken of je alternatieve uitvoersmethodes wilt aanbieden. Effectief maak je met deze techniek van je website een web<i>service</i>, waar allerlei software mee kan werken. Is natuurlijk goed als je bijvoorbeeld een Fudna &apos;app&apos; wilt maken voor telefoons waarmee je dezelfde data wilt benaderen, maar weer niet als je je content wat wilt bewaken. Natuurlijk, HTML is ook eenvoudig te crawlen, maar XML en/of JSON zijn eenvoudiger binnen te slepen.</div></blockquote>Klopt, maar je hebt hier nu wel handvatten om ook authenticatie toe te voegen. Bijvoorbeeld alleen de normale weergave als je anoniem bent, en ook JSON / XML als je een API Key meegeeft.",
            "ownReply": true
        },
        {
            "author": "Hobbles",
            "date": "dinsdag 18 januari 2011 00:29",
            "contentHtml": "Van ASP .NET MVC 3 is intussen ook een final release uitgekomen met een andere View engine (Razor). Misschien dat daar ook een soortgelijke feature inzit maar dat weet ik niet met zekerheid.<br>\r\n<br>\r\nIn ieder geval een mooi stukje over de uitbreidbaarheid van ASP .NET MVC. Een framework dat naar mijn idee jammer genoeg veel te weinig aandacht geniet van de gemiddelde .NET ontwikkelaars.",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "dinsdag 18 januari 2011 10:39",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5966/rails-respond_to-in-asp-punt-net-mvc.html#r_80156\">Hobbles schreef op dinsdag 18 januari 2011 @ 00:29:</a><br>\r\nVan ASP .NET MVC 3 is intussen ook een final release uitgekomen met een andere View engine (Razor). Misschien dat daar ook een soortgelijke feature inzit maar dat weet ik niet met zekerheid.<br>\r\n<br>\r\nIn ieder geval een mooi stukje over de uitbreidbaarheid van ASP .NET MVC. Een framework dat naar mijn idee jammer genoeg veel te weinig aandacht geniet van de gemiddelde .NET ontwikkelaars.</div></blockquote>Thx, had nog niet eens door dat MVC 3 al final was <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"> . Ik moet eerlijk zeggen dat ik pas nu ik in RoR aan het duiken ben, ik de echte kracht van het MVC pattern begin te zien. Daar ligt voor Microsoft nog wel een taak an sich.",
            "ownReply": true
        },
        {
            "author": "woensdag 16 februari 2011 15:24",
            "date": "",
            "contentHtml": "Als .NET / MVC ontwikkelaar (freelance) denk ik dat ik dit zou oplossen door te kijken naar de accept property in de request header. Als er een mediatype */* wordt gevraagd zou ik de normale view teruggeven (vaak HTML). Is er een specifiek mediatype in de accept header meegegeven dan zou ik dit type retouneren b.v: &apos;application/json&apos;. Het is simpel te bouwen zoals jouw voorbeeld met een actionfilter.<br>\r\n<br>\r\nSucces!",
            "ownReply": false
        }
    ]
}