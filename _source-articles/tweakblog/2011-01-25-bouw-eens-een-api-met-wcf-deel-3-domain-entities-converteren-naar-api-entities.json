{
    "title": "Bouw eens een API met WCF, deel 3: Domain entities converteren naar API entities",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/6005/bouw-eens-een-api-met-wcf-deel-3-domain-entities-converteren-naar-api-entities.html",
    "date": "2011-01-25T12:58:00.000Z",
    "category": "Backend",
    "views": 3135,
    "articleHtml": "De domain entities die je zelf gebruikt op je site zijn niet noodzakelijk ook de entities die je via je API wil communiceren. Dit kan alleen naamgeving zijn, maar ook het uitsluiten van bepaalde velden of het toevoegen van afgeleide velden. Al snel krijg je code als:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">ApiObject</span>&#xA0;<span class=\"code_method\">Convert</span>(<span class=\"code_ident\">DomainObject</span>&#xA0;<span class=\"code_ident\">domain</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ApiObject</span>&#xA0;<span class=\"code_ident\">api</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">ApiObject</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">api</span>.<span class=\"code_ident\">Adres</span>&#xA0;=&#xA0;<span class=\"code_ident\">domain</span>.<span class=\"code_ident\">Adres</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">api</span>.<span class=\"code_ident\">Huisnummer</span>&#xA0;=&#xA0;<span class=\"code_ident\">domain</span>.<span class=\"code_ident\">Huisnummer</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>(<span class=\"code_ident\">domain</span>.<span class=\"code_ident\">Makelaar</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">api</span>.<span class=\"code_ident\">MakelaarNummer</span>&#xA0;=&#xA0;<span class=\"code_ident\">domain</span>.<span class=\"code_ident\">Makelaar</span>.<span class=\"code_ident\">Id</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\nNiet alleen veel werk (geloof me, ik heb op mijn 19e duizenden regels van dit soort code zitten kloppen), maar door alle boilerplate ook nog eens onoverzichtelijk (imagine bovenstaand fragment maar dan met 200 properties!). Goed moment voor <a href=\"http://glamour.tweakblogs.net/blog/5747/expression-trees-espresso-voor-je-code!.html\" rel=\"external\">expression trees</a> om dit soort code on-the-fly te genereren.<br><a name=\"more\"></a><br>\r\n<b>API Entity</b><br>\r\nAllereerst zaak om een API entity te bakken, waar de namen van de properties hetzelfde zijn als die van je domain entity:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></td><td class=\"phphighlightcode\"><div><code>[<span class=\"code_method\">DataContract</span>(<span class=\"code_ident\">Name</span>=<span class=\"code_string\">&quot;KoopObject&quot;</span>)]\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">KoopApiEntity</span>\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">DataMember</span>(<span class=\"code_ident\">Name</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;Address&quot;</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">Adres</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">DataMember</span>(<span class=\"code_ident\">Name</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;ListingPrice&quot;</span>]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">int</span>?&#xA0;<span class=\"code_ident\">KoopPrijs</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\nDoordat je met &apos;DataMember&apos; de uiteindelijke output nog kan vari&#xEB;ren maakt het niet uit wanneer je properties anders heten dan je aan je eindgebruiker wil laten zien. Bovenstaande code komt er namelijk uit als:<br>\r\n<br>XML:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br></code></td><td class=\"phphighlightcode\"><div><code>&lt;<span class=\"code_ident\">KoopObject</span>&gt;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&lt;<span class=\"code_ident\">Address</span>&gt;Drostendiep&#xA0;24&lt;/<span class=\"code_ident\">Address</span>&gt;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&lt;<span class=\"code_ident\">ListingPrice</span>&gt;279000&lt;/<span class=\"code_ident\">ListingPrice</span>&gt;\n<br>&lt;/<span class=\"code_ident\">KoopObject</span>&gt;</code></div></td></tr></table><br>\r\n<br>\r\n<b>Converteren van domain entity naar API entity</b><br>\r\nExpression tree time!<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_comment\">//&#xA0;aanroep&#xA0;is:</span>\n<br><span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">apiEntity</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">PropertyCopier</span>&lt;<span class=\"code_ident\">KoopDomainEntity</span>,&#xA0;<span class=\"code_ident\">KoopApiEntity</span>&gt;(<span class=\"code_ident\">domainEntity</span>);</code></div></td></tr></table><br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br></code></td><td class=\"phphighlightcode\"><div><code>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">PropertyCopier</span>&lt;<span class=\"code_ident\">TSource</span>,&#xA0;<span class=\"code_ident\">TTarget</span>&gt;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//store&#xA0;the&#xA0;compiled&#xA0;delegate&#xA0;in&#xA0;here</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">private</span>&#xA0;<span class=\"code_keyword\">readonly</span>&#xA0;<span class=\"code_ident\">Func</span>&lt;<span class=\"code_ident\">TSource</span>,&#xA0;<span class=\"code_ident\">TTarget</span>&gt;&#xA0;<span class=\"code_ident\">copyDelegate</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_method\">PropertyCopier</span>()\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//if&#xA0;theres&#xA0;something&#xA0;wrong&#xA0;with&#xA0;the&#xA0;target&#xA0;type&#xA0;or&#xA0;something,&#xA0;then&#xA0;we&#xA0;will&#xA0;throw&#xA0;error</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//in&#xA0;BuildCopier()</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">copyDelegate</span>&#xA0;=&#xA0;<span class=\"code_method\">BuildCopier</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//puur&#xA0;het&#xA0;uitvoeren&#xA0;van&#xA0;de&#xA0;delegate</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">TTarget</span>&#xA0;<span class=\"code_method\">Copy</span>(<span class=\"code_ident\">TSource</span>&#xA0;<span class=\"code_ident\">source</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">source</span>&#xA0;==&#xA0;<span class=\"code_keyword\">null</span>)&#xA0;<span class=\"code_keyword\">throw</span>&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">ArgumentNullException</span>(<span class=\"code_string\">&quot;source&quot;</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_method\">copyDelegate</span>(<span class=\"code_ident\">source</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//builds&#xA0;the&#xA0;expression,&#xA0;and&#xA0;compiles&#xA0;into&#xA0;copyDelegate</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">private</span>&#xA0;<span class=\"code_ident\">Func</span>&lt;<span class=\"code_ident\">TSource</span>,&#xA0;<span class=\"code_ident\">TTarget</span>&gt;&#xA0;<span class=\"code_method\">BuildCopier</span>()\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//we&#xA0;maken&#xA0;gebruik&#xA0;van&#xA0;Dynamic&#xA0;LINQ,&#xA0;en&#xA0;dat&#xA0;betekent&#xA0;dat&#xA0;we&#xA0;expression&#xA0;trees&#xA0;kunnen&#xA0;bouwen</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//iets&#xA0;in&#xA0;de&#xA0;trant&#xA0;van</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;target&#xA0;=&#xA0;from&#xA0;s&#xA0;in&#xA0;source&#xA0;select&#xA0;new&#xA0;TTarget&#xA0;{&#xA0;GlobalId&#xA0;=&#xA0;s.GlobalId,&#xA0;etc.&#xA0;};</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//nou&#xA0;dat&#xA0;gaan&#xA0;we&#xA0;dus&#xA0;nu&#xA0;ook&#xA0;doen&#xA0;maar&#xA0;dan&#xA0;in&#xA0;code</span>\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//we&#xA0;beginnen&#xA0;met&#xA0;[from&#xA0;s&#xA0;in]&#xA0;SOURCE&#xA0;[select],&#xA0;dus&#xA0;we&#xA0;moeten&#xA0;Source&#xA0;even&#xA0;toevoegen</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//source&#xA0;is&#xA0;van&#xA0;type&#xA0;TSource,&#xA0;en&#xA0;het&#xA0;is&#xA0;een&#xA0;parameter</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ParameterExpression</span>&#xA0;<span class=\"code_ident\">sourceParameter</span>&#xA0;=&#xA0;<span class=\"code_ident\">Expression</span>.<span class=\"code_method\">Parameter</span>(<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">TSource</span>),&#xA0;<span class=\"code_string\">&quot;source&quot;</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//dan&#xA0;gaan&#xA0;we&#xA0;nu&#xA0;verder&#xA0;met&#xA0;de&#xA0;lijst&#xA0;met&#xA0;SELECT&#xA0;s</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;dusssss,&#xA0;bijvoorbeeld&#xA0;select&#xA0;new&#xA0;TTarget&#xA0;{&#xA0;GlobalId&#xA0;=&#xA0;s.GlobalId&#xA0;}</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;dat&#xA0;soort&#xA0;dingen&#xA0;heten&#xA0;memberBindings</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">bindings</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">List</span>&lt;<span class=\"code_ident\">MemberBinding</span>&gt;();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//we&#xA0;willen&#xA0;alle&#xA0;properties&#xA0;die&#xA0;in&#xA0;TSource&#xA0;zit&#xA0;langs&#xA0;lopen</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">foreach</span>&#xA0;(<span class=\"code_ident\">PropertyInfo</span>&#xA0;<span class=\"code_ident\">sourceProperty</span>&#xA0;<span class=\"code_keyword\">in</span>&#xA0;<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">TSource</span>).<span class=\"code_method\">GetProperties</span>())\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//als&#xA0;we&#xA0;de&#xA0;prop&#xA0;niet&#xA0;mogen&#xA0;lezen&#xA0;vanwege&#xA0;private,&#xA0;internal,&#xA0;whatever,&#xA0;dan&#xA0;negeren</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(!<span class=\"code_ident\">sourceProperty</span>.<span class=\"code_ident\">CanRead</span>)&#xA0;{&#xA0;<span class=\"code_keyword\">continue</span>;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//de&#xA0;property&#xA0;opzoeken</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">PropertyInfo</span>&#xA0;<span class=\"code_ident\">targetProperty</span>&#xA0;=&#xA0;<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">TTarget</span>).<span class=\"code_method\">GetProperty</span>(<span class=\"code_ident\">sourceProperty</span>.<span class=\"code_ident\">Name</span>,&#xA0;<span class=\"code_ident\">sourceProperty</span>.<span class=\"code_ident\">PropertyType</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//als&#xA0;we&#xA0;hem&#xA0;niet&#xA0;kunnen&#xA0;vinden&#xA0;maakt&#xA0;niet&#xA0;uit,&#xA0;dan&#xA0;negeren</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">targetProperty</span>&#xA0;==&#xA0;<span class=\"code_keyword\">null</span>)&#xA0;<span class=\"code_keyword\">continue</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//als&#xA0;de&#xA0;prop&#xA0;een&#xA0;IgnoreCopier&#xA0;attribute&#xA0;heeft,&#xA0;dan&#xA0;ook&#xA0;negeren</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">targetProperty</span>.<span class=\"code_method\">GetCustomAttributes</span>(<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">IgnoreCopierAttribute</span>),&#xA0;<span class=\"code_keyword\">false</span>).<span class=\"code_ident\">Length</span>&#xA0;&gt;&#xA0;<span class=\"code_number\">0</span>)&#xA0;<span class=\"code_keyword\">continue</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//als&#xA0;hij&#xA0;niet&#xA0;accessible&#xA0;is,&#xA0;dan&#xA0;negeren</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(!<span class=\"code_ident\">targetProperty</span>.<span class=\"code_ident\">CanWrite</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">continue</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;je&#xA0;mag&#xA0;eventueel&#xA0;ook&#xA0;deze&#xA0;fout&#xA0;gooien</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">/*throw&#xA0;new&#xA0;ArgumentException(&quot;Property&#xA0;&quot;&#xA0;+&#xA0;sourceProperty.Name\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+&#xA0;&quot;&#xA0;is&#xA0;not&#xA0;writable&#xA0;in&#xA0;&quot;&#xA0;+&#xA0;typeof(TTarget).FullName&#xA0;+&#xA0;&quot;.&#xA0;Add&#xA0;an&#xA0;IgnoreCopier&#xA0;attribute.&quot;);*/</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//dito&#xA0;als&#xA0;het&#xA0;type&#xA0;verkeerd&#xA0;is.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(!<span class=\"code_ident\">targetProperty</span>.<span class=\"code_ident\">PropertyType</span>.<span class=\"code_method\">IsAssignableFrom</span>(<span class=\"code_ident\">sourceProperty</span>.<span class=\"code_ident\">PropertyType</span>))\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">throw</span>&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">ArgumentException</span>(<span class=\"code_string\">&quot;Property&#xA0;&quot;</span>&#xA0;+&#xA0;<span class=\"code_ident\">sourceProperty</span>.<span class=\"code_ident\">Name</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+&#xA0;<span class=\"code_string\">&quot;&#xA0;has&#xA0;an&#xA0;incompatible&#xA0;type&#xA0;in&#xA0;&quot;</span>&#xA0;+&#xA0;<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">TTarget</span>).<span class=\"code_ident\">FullName</span>&#xA0;+&#xA0;<span class=\"code_string\">&quot;.&#xA0;Add&#xA0;an&#xA0;IgnoreCopier&#xA0;attribute.&quot;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+&#xA0;<span class=\"code_string\">&quot;&#xA0;SourceProperty&#xA0;=&#xA0;&quot;</span>&#xA0;+&#xA0;<span class=\"code_ident\">sourceProperty</span>.<span class=\"code_ident\">Name</span>&#xA0;+&#xA0;<span class=\"code_string\">&quot;.&#xA0;Targetproperty&#xA0;=&#xA0;&quot;</span>&#xA0;+&#xA0;<span class=\"code_ident\">targetProperty</span>.<span class=\"code_ident\">Name</span>&#xA0;+&#xA0;<span class=\"code_string\">&quot;.&quot;</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//nu&#xA0;gaan&#xA0;we&#xA0;een&#xA0;nieuwe&#xA0;binding&#xA0;maken</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//een&#xA0;binding&#xA0;is&#xA0;zoiets&#xA0;als&#xA0;GlobalId&#xA0;=&#xA0;source.GlobalId,&#xA0;zoals&#xA0;je&#xA0;boven&#xA0;hebt&#xA0;kunnen&#xA0;zien</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//we&#xA0;doen&#xA0;het&#xA0;op&#xA0;member&#xA0;&apos;targetproperty&apos;&#xA0;want&#xA0;dat&#xA0;is&#xA0;onze&#xA0;target.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;onze&#xA0;source&#xA0;is&#xA0;een&#xA0;property.&#xA0;En&#xA0;wel&#xA0;source.GlobalId,</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;dus&#xA0;moeten&#xA0;we&#xA0;een&#xA0;nieuwe&#xA0;Expression.Property&#xA0;aanmaken&#xA0;met&#xA0;als&#xA0;parameter&#xA0;=&gt;&#xA0;source</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;als&#xA0;property&#xA0;de&#xA0;sourceProperty</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">MemberExpression</span>&#xA0;<span class=\"code_ident\">sourcePropertyExpression</span>&#xA0;=&#xA0;<span class=\"code_ident\">Expression</span>.<span class=\"code_method\">Property</span>(<span class=\"code_ident\">sourceParameter</span>,&#xA0;<span class=\"code_ident\">sourceProperty</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">MemberAssignment</span>&#xA0;<span class=\"code_ident\">binding</span>&#xA0;=&#xA0;<span class=\"code_ident\">Expression</span>.<span class=\"code_method\">Bind</span>(<span class=\"code_ident\">targetProperty</span>,&#xA0;<span class=\"code_ident\">sourcePropertyExpression</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//toevoegen&#xA0;aan&#xA0;de&#xA0;lijst&#xA0;met&#xA0;bindings</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">bindings</span>.<span class=\"code_method\">Add</span>(<span class=\"code_ident\">binding</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//we&#xA0;hebben&#xA0;nu&#xA0;alle&#xA0;bindings&#xA0;aangemaakt.&#xA0;Nu&#xA0;maken&#xA0;we&#xA0;de&#xA0;LINQ&#xA0;expressie.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//dus&#xA0;het&#xA0;maken&#xA0;van&#xA0;select&#xA0;new&#xA0;TTarget&#xA0;{&#xA0;//bindings&#xA0;};</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//die&#xA0;nomene&#xA0;we&#xA0;de&#xA0;initializer</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Expression</span>&#xA0;<span class=\"code_ident\">initializer</span>&#xA0;=&#xA0;<span class=\"code_ident\">Expression</span>.<span class=\"code_method\">MemberInit</span>(<span class=\"code_ident\">Expression</span>.<span class=\"code_method\">New</span>(<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">TTarget</span>)),&#xA0;<span class=\"code_ident\">bindings</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//dan&#xA0;moeten&#xA0;we&#xA0;nog&#xA0;een&#xA0;Expression.Lambda&#xA0;er&#xA0;van&#xA0;maken</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//we&#xA0;hebben&#xA0;dus&#xA0;[select&#xA0;new&#xA0;TTarget&#xA0;{&#xA0;GlobalId&#xA0;=&#xA0;s.GlobalId,&#xA0;InternalId&#xA0;=&#xA0;s.InternalId&#xA0;}</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;maar&#xA0;de&#xA0;compiler&#xA0;moet&#xA0;wel&#xA0;weten&#xA0;dat&#xA0;s&#xA0;=&gt;&#xA0;sourceParameter</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;dus&#xA0;dat&#xA0;doen&#xA0;we&#xA0;hier</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">lambda</span>&#xA0;=&#xA0;<span class=\"code_ident\">Expression</span>.<span class=\"code_ident\">Lambda</span>&lt;<span class=\"code_ident\">Func</span>&lt;<span class=\"code_ident\">TSource</span>,&#xA0;<span class=\"code_ident\">TTarget</span>&gt;&gt;(<span class=\"code_ident\">initializer</span>,&#xA0;<span class=\"code_ident\">sourceParameter</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//compileren&#xA0;doen&#xA0;we&#xA0;dan&#xA0;vervolgens&#xA0;hier,&#xA0;en&#xA0;dan&#xA0;hebben&#xA0;we&#xA0;een&#xA0;echte&#xA0;delegate&#xA0;terug</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//die&#xA0;delegate&#xA0;wordt&#xA0;vertaald&#xA0;naar&#xA0;MSIL,&#xA0;en&#xA0;daarin&#xA0;zijn&#xA0;de&#xA0;bindings&#xA0;dus&#xA0;hard.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//een&#xA0;call&#xA0;naar&#xA0;deze&#xA0;delegate&#xA0;is&#xA0;dus&#xA0;net&#xA0;zo&#xA0;snel&#xA0;als&#xA0;een&#xA0;normale&#xA0;call&#xA0;(hierna&#xA0;dan).</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">compiled</span>&#xA0;=&#xA0;<span class=\"code_ident\">lambda</span>.<span class=\"code_method\">Compile</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//return&#xA0;the&#xA0;compiled&#xA0;delegate.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//deze&#xA0;wordt&#xA0;toegewezen&#xA0;aan&#xA0;een&#xA0;readonly&#xA0;property&#xA0;on&#xA0;init,&#xA0;en&#xA0;kan&#xA0;nu&#xA0;worden&#xA0;gebruikt.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">compiled</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">AttributeUsage</span>(<span class=\"code_ident\">AttributeTargets</span>.<span class=\"code_ident\">Property</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">IgnoreCopierAttribute</span>&#xA0;:&#xA0;<span class=\"code_ident\">Attribute</span>&#xA0;{&#xA0;}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Afgeleide velden</b><br>\r\nWanneer je afgeleide velden wil maken kan je nu handig gebruik maken van deze mapper:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></td><td class=\"phphighlightcode\"><div><code>[<span class=\"code_ident\">DataContract</span>]\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">SomeEntity</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;deze&#xA0;property&#xA0;wordt&#xA0;geset&#xA0;door&#xA0;de&#xA0;copier</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;we&#xA0;geven&#xA0;hem&#xA0;geen&#xA0;[DataMember]&#xA0;attribute&#xA0;mee;&#xA0;hij&#xA0;wordt&#xA0;dus&#xA0;niet&#xA0;zichtbaar&#xA0;voor&#xA0;de&#xA0;buitenwereld</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">Makelaar</span>&#xA0;<span class=\"code_ident\">Makelaar</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;deze&#xA0;property&#xA0;exposen&#xA0;we&#xA0;naar&#xA0;buiten,&#xA0;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;als&#xA0;er&#xA0;op&#xA0;ons&#xA0;source&#xA0;object&#xA0;toevallig&#xA0;al&#xA0;een&#xA0;&apos;MakelaarId&apos;&#xA0;bestaat&#xA0;negeren&#xA0;we&#xA0;deze</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_ident\">IgnoreCopier</span>,&#xA0;<span class=\"code_method\">DataMember</span>(<span class=\"code_string\">&quot;RealtorId&quot;</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">MakelaarId</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">get</span>&#xA0;{&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">Makelaar</span>.<span class=\"code_ident\">Id</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">set</span>&#xA0;{&#xA0;}&#xA0;<span class=\"code_comment\">//&#xA0;lege&#xA0;setter,&#xA0;anders&#xA0;breekt&#xA0;je&#xA0;DataContract</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Caching van je expression trees</b><br>\r\nOm geen overhead te hebben bij het vertalen van je entities (normaal met reflection een groot probleem), kunnen we de delegates die worden uitgespuugd goed cachen. Bijvoorbeeld in de &apos;global.asax&apos;:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">Global</span>&#xA0;:&#xA0;<span class=\"code_ident\">HttpApplication</span>\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;deze&#xA0;regel&#xA0;toevoegen&#xA0;aan&#xA0;je&#xA0;Global.asax</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_keyword\">readonly</span>&#xA0;<span class=\"code_ident\">Copier</span>&#xA0;<span class=\"code_ident\">Copier</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">Copier</span>();\n<br>}\n<br>\n<br><span class=\"code_comment\">//&#xA0;Copier.cs</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">Copier</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">internal</span>&#xA0;<span class=\"code_ident\">Dictionary</span>&lt;<span class=\"code_keyword\">string</span>,&#xA0;<span class=\"code_keyword\">object</span>&gt;&#xA0;<span class=\"code_ident\">Copiers</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">Dictionary</span>&lt;<span class=\"code_keyword\">string</span>,&#xA0;<span class=\"code_keyword\">object</span>&gt;();\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//some&#xA0;trace&#xA0;info&#xA0;is&#xA0;put&#xA0;in&#xA0;here,&#xA0;therefore&#xA0;we&#xA0;do&#xA0;a&#xA0;lil&#xA0;more&#xA0;work&#xA0;than&#xA0;we&#xA0;should&#xA0;have&#xA0;to</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//but&#xA0;want&#xA0;to&#xA0;monitor&#xA0;the&#xA0;performance.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">TTarget</span>&#xA0;<span class=\"code_ident\">Copy</span>&lt;<span class=\"code_ident\">TSource</span>,&#xA0;<span class=\"code_ident\">TTarget</span>&gt;(<span class=\"code_ident\">TSource</span>&#xA0;<span class=\"code_ident\">source</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br><span class=\"code_preproc\">#if&#xA0;DEBUG</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Stopwatch</span>&#xA0;<span class=\"code_ident\">sw</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">Stopwatch</span>();&#xA0;<span class=\"code_ident\">sw</span>.<span class=\"code_method\">Start</span>();\n<br><span class=\"code_preproc\">#endif</span>\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">identifier</span>&#xA0;=&#xA0;<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">TSource</span>).<span class=\"code_ident\">Name</span>&#xA0;+&#xA0;<span class=\"code_string\">&quot;|&quot;</span>&#xA0;+&#xA0;<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">TTarget</span>).<span class=\"code_ident\">Name</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">PropertyCopier</span>&lt;<span class=\"code_ident\">TSource</span>,&#xA0;<span class=\"code_ident\">TTarget</span>&gt;&#xA0;<span class=\"code_ident\">copier</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">Copiers</span>.<span class=\"code_method\">ContainsKey</span>(<span class=\"code_ident\">identifier</span>))\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//er&#xA0;is&#xA0;al&#xA0;een&#xA0;copier</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">copier</span>&#xA0;=&#xA0;(<span class=\"code_ident\">PropertyCopier</span>&lt;<span class=\"code_ident\">TSource</span>,&#xA0;<span class=\"code_ident\">TTarget</span>&gt;)<span class=\"code_ident\">Copiers</span>[<span class=\"code_ident\">identifier</span>];\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">else</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">copier</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">PropertyCopier</span>&lt;<span class=\"code_ident\">TSource</span>,&#xA0;<span class=\"code_ident\">TTarget</span>&gt;();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Copiers</span>.<span class=\"code_method\">Add</span>(<span class=\"code_ident\">identifier</span>,&#xA0;<span class=\"code_ident\">copier</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">TTarget</span>&#xA0;<span class=\"code_ident\">returnValue</span>&#xA0;=&#xA0;<span class=\"code_ident\">copier</span>.<span class=\"code_method\">Copy</span>(<span class=\"code_ident\">source</span>);\n<br><span class=\"code_preproc\">#if&#xA0;DEBUG</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">sw</span>.<span class=\"code_method\">Stop</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//Debug.WriteLine(&quot;Copy&#xA0;action&#xA0;took&#xA0;&quot;&#xA0;+&#xA0;sw.ElapsedMilliseconds&#xA0;+&#xA0;&quot;ms.&quot;);</span>\n<br><span class=\"code_preproc\">#endif</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">returnValue</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}</code></div></td></tr></table><br>\r\nJe copiers zijn nu net zo snel als het volledig uitschrijven van code wanneer je je Copier aanroept als:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_comment\">//&#xA0;alleen&#xA0;de&#xA0;eerste&#xA0;keer&#xA0;is&#xA0;hier&#xA0;overhead</span>\n<br><span class=\"code_ident\">Global</span>.<span class=\"code_ident\">Copier</span>.<span class=\"code_ident\">Copy</span>&lt;<span class=\"code_ident\">DomainEntity</span>,&#xA0;<span class=\"code_ident\">ApiEntity</span>&gt;(<span class=\"code_ident\">domainEntityInstance</span>);</code></div></td></tr></table><br>\r\n<br>\r\n<b>Next up?</b><br>\r\nOutput van je methodes als XML, JSON en via SOAP zonder wijzigingen in je code!",
    "nextLink": "http://glamour.tweakblogs.net/blog/5986/bouw-eens-een-api-met-wcf-deel-2-autorisatie.html",
    "comments": [
        {
            "author": "Deathraven",
            "date": "dinsdag 25 januari 2011 14:29",
            "contentHtml": "Gefeliciteerd, je hebt zojuist een lichte versie van <a href=\"http://automapper.codeplex.com/\" rel=\"external\">AutoMapper</a> geimplementeerd <img src=\"http://tweakimg.net/g/s/clown.gif\" width=\"15\" height=\"15\" alt=\":+\">.<br>\r\n<br>\r\nIk gebruik het in onderhand bijna al mijn projecten om model objecten naar iets anders te mappen (view models, dto&apos;s, etc)<p class=\"edit\">[Reactie gewijzigd op dinsdag 25 januari 2011 14:31]</p>",
            "ownReply": false
        },
        {
            "author": "dinsdag 25 januari 2011 14:31",
            "date": "",
            "contentHtml": "Heb je hier al eens naar gekeken? <a href=\"http://automapper.codeplex.com/\" rel=\"external\" title=\"http://automapper.codeplex.com/\">http://automapper.codeplex.com/</a><br>\r\n<br>\r\nDeze library is hier zowat voor gemaakt. Bevat volgens mij alle features die je nodig hebt.",
            "ownReply": false
        },
        {
            "author": "masterpoi",
            "date": "dinsdag 25 januari 2011 14:36",
            "contentHtml": "Intressante implementatie met Dynamic Linq.<br>\r\nOok goed SOC wat betreft the domain objecten.<br>\r\n<br>\r\n<br>\r\nMaar ik zie nog wel wat problemen: o.a.:<br>\r\n<br>\r\nWat met multithreading? Vooral bij het opstarten van je service moet je je &quot;Copier&quot;-cache dictionary beveiligen.<br>\r\n<br>\r\nWat met complexere objecten waar je met relaties zit? (bvb. Order met OrderLineItems). Je hebt dus een property waarvoor je weer de mapper moet aanroepen.<br>\r\n<br>\r\nDe purist in mij zou ook eerder een fluent api gebruiken ipv attributes op de datacontracts. Je maakt immers een dependency op CopierAttribute in je contract definities. Dat is niet altijd wat je wil. (bvb. omdat je een assembly wil doorgeven aan een derde partij)<br>\r\n<br>\r\nVerder is er ook Automapper: <a href=\"http://automapper.codeplex.com/\" rel=\"external\" title=\"http://automapper.codeplex.com/\">http://automapper.codeplex.com/</a>.",
            "ownReply": false
        },
        {
            "author": "akakiwi",
            "date": "dinsdag 25 januari 2011 14:41",
            "contentHtml": "Zo te zien heb je een nette scheiding gemaakt tussen je externe en je interne contract.<br>\r\nDe convertor die je er tussen hebt liggen, is een generiek stuk code.<br>\r\nZo hebben wij ook een hele tijd gewerkt, maar helaas bleek de performance, juist vanwege de generieke convertor, niet acceptabel.<br>\r\nWat ik toen heb gedaan is het volgende:<br>\r\n[vloeken in de kerk]<br>\r\nElke conversie met de hand uitgeschreven.<br>\r\n[/vloeken in de kerk]<br>\r\nDit scheelde dusdanig veel in performance dat ik het maar zo gelagen heb.<br>\r\n<br>\r\n<div class=\"edit\">edit:<br><br>\r\nIk zal ook eens naar die automapper kijken.<br>\r\nDie kende ik nog niet.<br>\r\n</div><p class=\"edit\">[Reactie gewijzigd op dinsdag 25 januari 2011 14:44]</p>",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "dinsdag 25 januari 2011 14:48",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/6005/bouw-eens-een-api-met-wcf-deel-3-domain-entities-converteren-naar-api-entities.html#r_80677\">akakiwi schreef op dinsdag 25 januari 2011 @ 14:41:</a><br>\r\nZo hebben wij ook een hele tijd gewerkt, maar helaas bleek de performance, juist vanwege de generieke convertor, niet acceptabel.</div></blockquote>Performance is hier is gelijk aan het met de hand uitschrijven. Je hebt alleen bij de eerste call die performance hit.<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/6005/bouw-eens-een-api-met-wcf-deel-3-domain-entities-converteren-naar-api-entities.html#r_80673\">Deathraven schreef op dinsdag 25 januari 2011 @ 14:29:</a><br>\r\nGefeliciteerd, je hebt zojuist een lichte versie van <a href=\"http://automapper.codeplex.com/\" rel=\"external\">AutoMapper</a> geimplementeerd <img src=\"http://tweakimg.net/g/s/clown.gif\" width=\"15\" height=\"15\" alt=\":+\">.</div></blockquote>Helpt het als ik zeg dat deze code ouder is?  <img src=\"http://tweakimg.net/g/s/yummie.gif\" width=\"15\" height=\"15\" alt=\":9\"><blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/6005/bouw-eens-een-api-met-wcf-deel-3-domain-entities-converteren-naar-api-entities.html#r_80676\">masterpoi schreef op dinsdag 25 januari 2011 @ 14:36:</a><br>\r\nWat met multithreading? Vooral bij het opstarten van je service moet je je &quot;Copier&quot;-cache dictionary beveiligen.</div></blockquote>Ik probeer hier een zo clean mogelijke weergave van zaken te geven; locks etc. vallen een beetje buiten het conceptuele.<blockquote><div class=\"quote\">Wat met complexere objecten waar je met relaties zit? (bvb. Order met OrderLineItems). Je hebt dus een property waarvoor je weer de mapper moet aanroepen.</div></blockquote>In principe doe ik het als:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_ident\">Order</span>&#xA0;<span class=\"code_ident\">o</span>&#xA0;=&#xA0;<span class=\"code_ident\">Global</span>.<span class=\"code_ident\">Copier</span>.<span class=\"code_ident\">Copy</span>&lt;<span class=\"code_ident\">TSource</span>,&#xA0;<span class=\"code_ident\">TTarget</span>&gt;(<span class=\"code_ident\">order</span>);\n<br><span class=\"code_ident\">o</span>.<span class=\"code_ident\">Lines</span>&#xA0;=&#xA0;<span class=\"code_ident\">order</span>.<span class=\"code_ident\">Lines</span>.<span class=\"code_method\">Select</span>(<span class=\"code_ident\">s</span>=&gt;<span class=\"code_ident\">Global</span>.<span class=\"code_ident\">Copier</span>.<span class=\"code_ident\">Copy</span>&lt;<span class=\"code_ident\">TSource</span>,<span class=\"code_ident\">TTarget</span>&gt;(<span class=\"code_ident\">s</span>));</code></div></td></tr></table><blockquote><div class=\"quote\">De purist in mij zou ook eerder een fluent api gebruiken ipv attributes op de datacontracts. Je maakt immers een dependency op CopierAttribute in je contract definities. Dat is niet altijd wat je wil. (bvb. omdat je een assembly wil doorgeven aan een derde partij).</div></blockquote>Je geeft de contract definities aan een externe partij, die kan daar zelf een assembly van bakken (of laten genereren)?<p class=\"edit\">[Reactie gewijzigd op dinsdag 25 januari 2011 14:48]</p>",
            "ownReply": true
        },
        {
            "author": "Deathraven",
            "date": "dinsdag 25 januari 2011 14:51",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/6005/bouw-eens-een-api-met-wcf-deel-3-domain-entities-converteren-naar-api-entities.html#r_80678\">creator1988 schreef op dinsdag 25 januari 2011 @ 14:48:</a><br>\r\n<br>\r\n[...]<br>\r\n<br>\r\nHelpt het als ik zeg dat deze code ouder is?  <img src=\"http://tweakimg.net/g/s/yummie.gif\" width=\"15\" height=\"15\" alt=\":9\"></div></blockquote>Hahaha, ja hoor. Ik moet eerlijk bekennen, ik heb vroeger ook een custom object mapper geschreven.<br>\r\nWel blij dat er nu zoiets als AutoMapper is, scheelt me weer code wat ik zelf moet onderhouden.",
            "ownReply": false
        },
        {
            "author": "masterpoi",
            "date": "dinsdag 25 januari 2011 14:58",
            "contentHtml": "<blockquote><div class=\"quote\">Je geeft de contract definities aan een externe partij, die kan daar zelf een assembly van bakken (of laten genereren)?</div></blockquote>Ja op basis van wsdl/xsd/odata. <br>\r\nAls de andere partij (en dan bedoel ik voornamelijk interne SOA projecten) ook .net gebruikt kan je gewoon de assembly geven. Heb je meteen de nodige documentatie bij de hand en ziet je api er volledig uit zoals je ze bedoeld hebt. <br>\r\n<br>\r\nMaar zoals ik zei is het eerder een puristisch doortrekken van SOC. In praktijk is dit prima.<br>\r\n<br>\r\nIvm. releaties, kan je je dynamic linq niet aanpassen om te kijken of er een copier voor het type property bestaat en zo ja die copier gebruiken? Ik ben zelf niet echt vertrouwd met Dynamic Linq maar dat intresseert me wel.",
            "ownReply": false
        },
        {
            "author": "Apache",
            "date": "dinsdag 25 januari 2011 15:20",
            "contentHtml": "In java hebben we hiervoor: <a href=\"http://dozer.sourceforge.net/\" rel=\"external\" title=\"http://dozer.sourceforge.net/\">http://dozer.sourceforge.net/</a>",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "dinsdag 25 januari 2011 18:52",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/6005/bouw-eens-een-api-met-wcf-deel-3-domain-entities-converteren-naar-api-entities.html#r_80680\">masterpoi schreef op dinsdag 25 januari 2011 @ 14:58:</a><br>\r\n[...]<br>\r\n<br>\r\n<br>\r\nJa op basis van wsdl/xsd/odata. <br>\r\nAls de andere partij (en dan bedoel ik voornamelijk interne SOA projecten) ook .net gebruikt kan je gewoon de assembly geven. Heb je meteen de nodige documentatie bij de hand en ziet je api er volledig uit zoals je ze bedoeld hebt.</div></blockquote>Nee, doen we bewust niet; onze interne architectuur is ook afhankelijk van een API; zo hebben we maar 1 verantwoordelijk punt in onze applicatie die zaken met contracten doet. Wanneer je 2 applicaties met 2 verschillende versies van de Business Rules DLL hebt dan kan dat hard misgaan.<blockquote><div class=\"quote\">Ivm. releaties, kan je je dynamic linq niet aanpassen om te kijken of er een copier voor het type property bestaat en zo ja die copier gebruiken? Ik ben zelf niet echt vertrouwd met Dynamic Linq maar dat intresseert me wel.</div></blockquote>De copiers bestaan pas tot het moment dat je ze gaat gebruiken; we defini&#xEB;ren daar geen vaste set in; als je dat vooraf vastlegt kan het prima.<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/6005/bouw-eens-een-api-met-wcf-deel-3-domain-entities-converteren-naar-api-entities.html#r_80681\">Apache schreef op dinsdag 25 januari 2011 @ 15:20:</a><br>\r\nIn java hebben we hiervoor: <a href=\"http://dozer.sourceforge.net/\" rel=\"external\" title=\"http://dozer.sourceforge.net/\">http://dozer.sourceforge.net/</a></div></blockquote>Heb je hier performance measures van? Hoe groot is de overhead etc. Kan die niet zo snel vinden op de SF pagina.",
            "ownReply": true
        },
        {
            "author": "L-VIS",
            "date": "woensdag 26 januari 2011 09:49",
            "contentHtml": "Misschien lees ik er over heen, maar wat (en vooral hoe) gebruik je de buildCopy functie? <br>\r\n<br>\r\nIk vind dit verder wel een nette oplossing voor een probleem waar ik vaak tegen aanloop maar nooit de tijd neemt om iets structureels te bedenk.",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "woensdag 26 januari 2011 10:16",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/6005/bouw-eens-een-api-met-wcf-deel-3-domain-entities-converteren-naar-api-entities.html#r_80714\">L-VIS schreef op woensdag 26 januari 2011 @ 09:49:</a><br>\r\nMisschien lees ik er over heen, maar wat (en vooral hoe) gebruik je de buildCopy functie? <br>\r\n<br>\r\nIk vind dit verder wel een nette oplossing voor een probleem waar ik vaak tegen aanloop maar nooit de tijd neemt om iets structureels te bedenk.</div></blockquote>Constructor was weggevallen bij mijn opschoonacties. Nu teruggeplaatst.<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br></code></td><td class=\"phphighlightcode\"><div><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_method\">PropertyCopier</span>()&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">copyDelegate</span>&#xA0;=&#xA0;<span class=\"code_method\">BuildCopier</span>();&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</code></div></td></tr></table><p class=\"edit\">[Reactie gewijzigd op woensdag 26 januari 2011 10:16]</p>",
            "ownReply": true
        }
    ]
}