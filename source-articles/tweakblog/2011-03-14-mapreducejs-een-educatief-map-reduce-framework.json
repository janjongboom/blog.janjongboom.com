{
    "title": "MapReduceJS: Een educatief map/reduce framework",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/6271/mapreducejs-een-educatief-map-reduce-framework.html",
    "date": "2011-03-14T13:58:00.000Z",
    "category": "Frontend",
    "views": 2572,
    "articleHtml": "Downloadlink: <a href=\"http://code.google.com/p/mapreduce-js/\" rel=\"external\">MapReduceJS, an educational MapReduce framework implemented in Javascript</a>.<br>\r\n<br>\r\nMapReduce is een door Google ontwikkeld framework waarmee bewerkingen in twee stappen op grote sets data kunnen worden uitgevoerd. Elke bewerking is compleet onafhankelijk van andere bewerkingen en ze kunnen daarom eenvoudig worden verspreid over meerdere machines. Standaard voorbeeld hierin is bijvoorbeeld het tellen van woorden in documenten:<ul><li>1. Input: een lijst met documenten</li><li>2. Map-stap: je krijgt een document binnen, en split deze op spaties. Je retouneert een array met alle losse woorden</li><li>3. Reduce-stap: je krijgt binnen: het woord, en een array met alle keren dat deze voorkwam in &#xE1;lle documenten. Deze kan je tellen en teruggeven als output.</li></ul>Dit is goed distribueerbaar omdat stap 2 op een oneinding aantal machines kan draaien. Het splitten van een document is immers een volledig losse stap. Hetzelfde geld voor 3. aangezien je hier alleen hoeft op te tellen en geen andere info nodig hebt.<br>\r\n<br>\r\n<b>Maar...</b><br>\r\nHet testen van MapReduce kan je bijvoorbeeld in <a href=\"http://hadoop.apache.org/mapreduce/\" rel=\"external\">Hadoop</a> of <a href=\"http://www.mongodb.org/\" rel=\"external\">MongoDB</a> heeft een aantal nadelen: je moet de software aan de praat krijgen en je data importeren. Vanwege het distributed idee achter MapReduce is het bovendien lastig om te debuggen. Daarom...<br><a name=\"more\"></a><br>\r\n<b>MapReduceJS!</b><br>\r\nEen framework om je MapReduce algoritme te kunnen testen en te debuggen. Het draait gewoon in de browser en is debugbaar met bv. Firebug. Het kent geen afhankelijkheden en draait gewoon lokaal. De invoer kan elke source zijn die je kan downloaden met javascript. Dus bijvoorbeeld Twitter of RSS feeds.<br>\r\n<br>\r\n<b>Syntax</b><br>\r\nDe syntax bestaat uit 1 functie:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">data</span>&#xA0;=&#xA0;[&#xA0;<span class=\"code_number\">1</span>,&#xA0;<span class=\"code_number\">2</span>,&#xA0;<span class=\"code_number\">3</span>&#xA0;];\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">result</span>&#xA0;=&#xA0;<span class=\"code_method\">mapreduce</span>&#xA0;(<span class=\"code_ident\">data</span>,&#xA0;<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">item</span>,&#xA0;<span class=\"code_ident\">emit</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;hier&#xA0;je&#xA0;map&#xA0;functie</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;},&#xA0;<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">key</span>,&#xA0;<span class=\"code_ident\">values</span>,&#xA0;<span class=\"code_ident\">emit</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;hier&#xA0;je&#xA0;reduce&#xA0;functie</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>);</code></div></td></tr></table><br>\r\n<br>\r\n<b>Simpele functie</b><br>\r\nDemo om woorden te tellen:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_comment\">//&#xA0;this&#xA0;demo&#xA0;counts&#xA0;the&#xA0;number&#xA0;of&#xA0;words&#xA0;in&#xA0;the&#xA0;following&#xA0;array</span>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">data</span>&#xA0;=&#xA0;[&#xA0;<span class=\"code_string\">&apos;jan&#xA0;piet&#xA0;klaas&apos;</span>,&#xA0;<span class=\"code_string\">&apos;piet&#xA0;klaas&apos;</span>,&#xA0;<span class=\"code_string\">&apos;japie&apos;</span>&#xA0;];\n<br>\n<br><span class=\"code_comment\">//&#xA0;the&#xA0;syntax&#xA0;for&#xA0;this&#xA0;function&#xA0;is:</span>\n<br><span class=\"code_comment\">//&#xA0;mapreduce&#xA0;(inputSet,&#xA0;mapFunction,&#xA0;reduceFunction)</span>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">result</span>&#xA0;=&#xA0;<span class=\"code_method\">mapreduce</span>&#xA0;(<span class=\"code_ident\">data</span>,&#xA0;<span class=\"code_keyword\">function</span>(<span class=\"code_ident\">item</span>,&#xA0;<span class=\"code_ident\">emit</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;the&#xA0;map&#xA0;function&#xA0;takes&#xA0;an&#xA0;item&#xA0;from&#xA0;the&#xA0;data-set</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;and&#xA0;can&#xA0;map&#xA0;this&#xA0;to&#xA0;a&#xA0;set&#xA0;of&#xA0;new&#xA0;items</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">splitted</span>&#xA0;=&#xA0;<span class=\"code_ident\">item</span>.<span class=\"code_method\">split</span>(<span class=\"code_string\">/\\s/g</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">for</span>(<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">word</span>&#xA0;<span class=\"code_keyword\">in</span>&#xA0;<span class=\"code_ident\">splitted</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;the&#xA0;&apos;emit&apos;&#xA0;function&#xA0;is&#xA0;used&#xA0;to&#xA0;yield&#xA0;the&#xA0;new&#xA0;items</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;syntax:&#xA0;emit&#xA0;(key,&#xA0;value);</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">emit</span>(<span class=\"code_ident\">splitted</span>[<span class=\"code_ident\">word</span>],&#xA0;<span class=\"code_number\">1</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>},&#xA0;<span class=\"code_keyword\">function</span>(<span class=\"code_ident\">key</span>,&#xA0;<span class=\"code_ident\">values</span>,&#xA0;<span class=\"code_ident\">emit</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;the&#xA0;reduce&#xA0;function&#xA0;retrieves&#xA0;the&#xA0;emitted&#xA0;items</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;by&#xA0;key.&#xA0;The&#xA0;values&#xA0;that&#xA0;were&#xA0;emitted&#xA0;are&#xA0;grouped&#xA0;by&#xA0;key,&#xA0;and&#xA0;are&#xA0;in&#xA0;the&#xA0;&apos;values&apos;&#xA0;array.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;the&#xA0;emit&#xA0;function&#xA0;is&#xA0;used&#xA0;to&#xA0;return&#xA0;the&#xA0;results</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;syntax:&#xA0;emit&#xA0;(value)</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">emit</span>({&#xA0;<span class=\"code_ident\">key</span>:&#xA0;<span class=\"code_ident\">key</span>,&#xA0;<span class=\"code_ident\">count</span>:&#xA0;<span class=\"code_ident\">values</span>.<span class=\"code_ident\">length</span>&#xA0;});\n<br>});&#xA0;&#xA0;&#xA0;&#xA0;\n<br>\n<br><span class=\"code_comment\">//&#xA0;all&#xA0;items&#xA0;that&#xA0;were&#xA0;emitted&#xA0;in&#xA0;the&#xA0;reduce&#xA0;step&#xA0;are&#xA0;now&#xA0;put&#xA0;into&#xA0;the&#xA0;&apos;result&apos;&#xA0;variable</span>\n<br><span class=\"code_comment\">//&#xA0;and&#xA0;we&#xA0;can&#xA0;iterate&#xA0;over&#xA0;this&#xA0;collection</span>\n<br><span class=\"code_keyword\">for</span>(<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">ix</span>&#xA0;=&#xA0;<span class=\"code_number\">0</span>;&#xA0;<span class=\"code_ident\">ix</span>&#xA0;&lt;&#xA0;<span class=\"code_ident\">result</span>.<span class=\"code_ident\">length</span>;&#xA0;<span class=\"code_ident\">ix</span>++)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;we&#xA0;have&#xA0;created&#xA0;objects&#xA0;in&#xA0;the&#xA0;form&#xA0;{&#xA0;key,&#xA0;count&#xA0;}</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;and&#xA0;we&#xA0;can&#xA0;write&#xA0;this&#xA0;to&#xA0;the&#xA0;screen</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_special\">document</span>.<span class=\"code_method\">write</span>(<span class=\"code_ident\">result</span>[<span class=\"code_ident\">ix</span>].<span class=\"code_ident\">key</span>&#xA0;+&#xA0;<span class=\"code_string\">&apos;:&#xA0;&apos;</span>&#xA0;+&#xA0;<span class=\"code_ident\">result</span>[<span class=\"code_ident\">ix</span>].<span class=\"code_ident\">count</span>&#xA0;+&#xA0;<span class=\"code_string\">&apos;&lt;br/&gt;&apos;</span>);\n<br>}</code></div></td></tr></table><br>\r\nOutput:<br>\r\n<br>code:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n4\n</pre></td><td class=\"phphighlightcode\"><div><pre>jan: 1\r\npiet: 2\r\nklaas: 2\r\njapie: 1</pre></div></td></tr></table><br>\r\n<br>\r\n<b>Go play!</b><br>\r\nDe word-count demo, en de benodigde javascript is te vinden op <a href=\"http://code.google.com/p/mapreduce-js/\" rel=\"external\">Google Code</a>. Het is een framework om het principe achter mapreduce snel te kunnen demo&apos;en, maar biedt geen van de voordelen die een echt MapReduce framework biedt. Daarvoor zal je toch echt Hadoop moeten pakken <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"> . Online testen kan uiteraard ook, en wel op <a href=\"http://jsbin.com/upona6/edit\" rel=\"external\">JSBin</a>.",
    "nextLink": "http://glamour.tweakblogs.net/blog/6252/developer-summit-los-met-pipes-en-map-reduce.html",
    "comments": [
        {
            "author": "Floort",
            "date": "maandag 14 maart 2011 15:37",
            "contentHtml": "Python heeft een map() en reduce() standaard ingebouwd. Deze is niet parallel, maar er zijn een aantal makkelijke libraries die een map/reduce parallel implementeren. Equivalent voorbeeld in Python:<br>\r\n<br>\r\n<br>Python:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"phphighlightcode\"><div><pre>data = &quot;jan piet klaas piet klaas japie&quot;\r\ndef mapfn(word): return (word, 1)\r\ndef reducefn(a,b):\r\n    if a.has_key(b[0]): a[b[0]] += b[1]\r\n    else: a[b[0]] = b[1]\r\n    return a\r\nprint reduce(reducefn, map(mapfn, data.split()), {})\r\n# output:\r\n{&apos;jan&apos;: 1, &apos;piet&apos;: 2, &apos;japie&apos;: 1, &apos;klaas&apos;: 2}</pre></div></td></tr></table><p class=\"edit\">[Reactie gewijzigd op maandag 14 maart 2011 15:40]</p>",
            "ownReply": false
        },
        {
            "author": "mindcrash",
            "date": "maandag 14 maart 2011 21:14",
            "contentHtml": "Ik vind Underscore van DocumentCloud wel heel erg fijn voor dit soort zaken in Javascript:<br>\r\n<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_ident\">_</span>.<span class=\"code_method\">map</span>({<span class=\"code_ident\">one</span>&#xA0;:&#xA0;<span class=\"code_number\">1</span>,&#xA0;<span class=\"code_ident\">two</span>&#xA0;:&#xA0;<span class=\"code_number\">2</span>,<span class=\"code_ident\">three</span>&#xA0;:&#xA0;<span class=\"code_number\">3</span>},&#xA0;<span class=\"code_keyword\">function</span>(<span class=\"code_ident\">num</span>,&#xA0;<span class=\"code_ident\">key</span>){&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">num</span>&#xA0;*&#xA0;<span class=\"code_ident\">num</span>}).<span class=\"code_method\">reduce</span>(<span class=\"code_keyword\">function</span>(<span class=\"code_ident\">memo</span>,&#xA0;<span class=\"code_ident\">num</span>){&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">memo</span>&#xA0;+&#xA0;<span class=\"code_ident\">num</span>&#xA0;},&#xA0;<span class=\"code_number\">0</span>)</code></div></td></tr></table><br>\r\n<br>\r\nOf het erg gave voorbeeld op de website:<br>\r\n<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">lyrics</span>&#xA0;=&#xA0;[\n<br>&#xA0;&#xA0;{<span class=\"code_ident\">line</span>&#xA0;:&#xA0;<span class=\"code_number\">1</span>,&#xA0;<span class=\"code_ident\">words</span>&#xA0;:&#xA0;<span class=\"code_string\">&quot;I&apos;m&#xA0;a&#xA0;lumberjack&#xA0;and&#xA0;I&apos;m&#xA0;okay&quot;</span>},\n<br>&#xA0;&#xA0;{<span class=\"code_ident\">line</span>&#xA0;:&#xA0;<span class=\"code_number\">2</span>,&#xA0;<span class=\"code_ident\">words</span>&#xA0;:&#xA0;<span class=\"code_string\">&quot;I&#xA0;sleep&#xA0;all&#xA0;night&#xA0;and&#xA0;I&#xA0;work&#xA0;all&#xA0;day&quot;</span>},\n<br>&#xA0;&#xA0;{<span class=\"code_ident\">line</span>&#xA0;:&#xA0;<span class=\"code_number\">3</span>,&#xA0;<span class=\"code_ident\">words</span>&#xA0;:&#xA0;<span class=\"code_string\">&quot;He&apos;s&#xA0;a&#xA0;lumberjack&#xA0;and&#xA0;he&apos;s&#xA0;okay&quot;</span>},\n<br>&#xA0;&#xA0;{<span class=\"code_ident\">line</span>&#xA0;:&#xA0;<span class=\"code_number\">4</span>,&#xA0;<span class=\"code_ident\">words</span>&#xA0;:&#xA0;<span class=\"code_string\">&quot;He&#xA0;sleeps&#xA0;all&#xA0;night&#xA0;and&#xA0;he&#xA0;works&#xA0;all&#xA0;day&quot;</span>}\n<br>];\n<br>\n<br><span class=\"code_method\">_</span>(<span class=\"code_ident\">lyrics</span>).<span class=\"code_method\">chain</span>()\n<br>&#xA0;&#xA0;.<span class=\"code_method\">map</span>(<span class=\"code_keyword\">function</span>(<span class=\"code_ident\">line</span>)&#xA0;{&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">line</span>.<span class=\"code_ident\">words</span>.<span class=\"code_method\">split</span>(<span class=\"code_string\">&apos;&#xA0;&apos;</span>);&#xA0;})\n<br>&#xA0;&#xA0;.<span class=\"code_method\">flatten</span>()\n<br>&#xA0;&#xA0;.<span class=\"code_method\">reduce</span>(<span class=\"code_keyword\">function</span>(<span class=\"code_ident\">counts</span>,&#xA0;<span class=\"code_ident\">word</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">counts</span>[<span class=\"code_ident\">word</span>]&#xA0;=&#xA0;(<span class=\"code_ident\">counts</span>[<span class=\"code_ident\">word</span>]&#xA0;||&#xA0;<span class=\"code_number\">0</span>)&#xA0;+&#xA0;<span class=\"code_number\">1</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">counts</span>;\n<br>},&#xA0;{}).<span class=\"code_method\">value</span>();</code></div></td></tr></table><br>\r\n<br>\r\nwat uiteindelijk het volgende oplevert:<br>\r\n<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br></code></td><td class=\"phphighlightcode\"><div><code>{<span class=\"code_ident\">lumberjack</span>&#xA0;:&#xA0;<span class=\"code_number\">2</span>,&#xA0;<span class=\"code_ident\">all</span>&#xA0;:&#xA0;<span class=\"code_number\">4</span>,&#xA0;<span class=\"code_ident\">night</span>&#xA0;:&#xA0;<span class=\"code_number\">2</span>&#xA0;...&#xA0;}</code></div></td></tr></table><br>\r\n<br>\r\n<img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"><p class=\"edit\">[Reactie gewijzigd op maandag 14 maart 2011 21:18]</p>",
            "ownReply": false
        }
    ]
}