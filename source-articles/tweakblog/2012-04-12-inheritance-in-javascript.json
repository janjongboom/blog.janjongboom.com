{
    "title": "Inheritance in javascript",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/7779/inheritance-in-javascript.html",
    "date": "2012-04-12T16:54:00.000Z",
    "category": "Frontend",
    "views": 3106,
    "articleHtml": "Inheritance in javascript blijf verdomd moeilijk, zoals ik deze week weer tegenkwam toen ik een vriend hielp in het porten van wat AS3 code naar javascript. Vandaar wat ready to use code snippets en een kleine uitleg om inheritance toe te passen.<br>\r\n<br>\r\nJavascript kent een aantal manieren om code te mixen, maar ze zijn globaal onder te verdelen in inheritance en <a href=\"http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/\" rel=\"external\">mixins</a>. Inheritance is prettig voor een object structuur die je in een taal als Java of C# zou schrijven. Single inheritance van classes, als in Object-&gt;GameObject-&gt;Person-&gt;Enemy. Elk van de parent classes zou ook los kunnen bestaan, en de classes mogen zelf <b>state</b> bijhouden. Mixins hebben meer weg van abstracte classes, en zijn bedoeld om <b>behavior</b> te laten erven, sla er dus geen state in op want dan loop je tegen scoping issues aan. Je kunt meerdere mixin&apos;s in 1 object mixen voor multiple-inheritance-like behavior.<br>\r\n<br>\r\n<b>Inheritance</b><br>\r\nAllereerst lenen we wat code uit <a href=\"http://blog.nodejitsu.com/using-sys-inherits-in-node-js\" rel=\"external\">node.js</a>. Omdat deze functie afhankelijk is van Object.create voegen we deze toe aan browsers die deze nog niet hebben middels een workaround van <a href=\"http://ejohn.org/blog/ecmascript-5-objects-and-properties/\" rel=\"external\">Ben Newman</a>.<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></td><td class=\"phphighlightcode\"><div><code>&#xA0;<span class=\"code_ident\">Object</span>.<span class=\"code_ident\">create</span>&#xA0;=&#xA0;<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">o</span>)&#xA0;{&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_keyword\">arguments</span>.<span class=\"code_ident\">length</span>&#xA0;&gt;&#xA0;<span class=\"code_number\">1</span>)&#xA0;{&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">throw</span>&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">Error</span>(<span class=\"code_string\">&apos;Object.create&#xA0;implementation&#xA0;only&#xA0;accepts&#xA0;the&#xA0;first&#xA0;parameter.&apos;</span>);&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">function</span>&#xA0;<span class=\"code_method\">F</span>()&#xA0;{}&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">F</span>.<span class=\"code_special\">prototype</span>&#xA0;=&#xA0;<span class=\"code_ident\">o</span>;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">F</span>();&#xA0;&#xA0;\n<br>};\n<br>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">inherits</span>&#xA0;=&#xA0;<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">ctor</span>,&#xA0;<span class=\"code_ident\">superCtor</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ctor</span>.<span class=\"code_ident\">super_</span>&#xA0;=&#xA0;<span class=\"code_ident\">superCtor</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ctor</span>.<span class=\"code_special\">prototype</span>&#xA0;=&#xA0;<span class=\"code_ident\">Object</span>.<span class=\"code_method\">create</span>(<span class=\"code_ident\">superCtor</span>.<span class=\"code_special\">prototype</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ctor</span>.<span class=\"code_special\">prototype</span>.<span class=\"code_special\">constructor</span>&#xA0;=&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">value</span>:&#xA0;<span class=\"code_ident\">ctor</span>,\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">enumerable</span>:&#xA0;<span class=\"code_keyword\">false</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;};\n<br>};</code></div></td></tr></table><br><a name=\"more\"></a><br>\r\nNu kunnen we een object hierarchie bouwen, waarin we een Parent en een Client hebben:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">function</span>&#xA0;<span class=\"code_method\">Parent</span>&#xA0;(<span class=\"code_ident\">initialValue</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">this</span>.<span class=\"code_ident\">list</span>&#xA0;=&#xA0;[&#xA0;<span class=\"code_ident\">initialValue</span>&#xA0;];\n<br>}\n<br>\n<br><span class=\"code_keyword\">function</span>&#xA0;<span class=\"code_method\">Client</span>&#xA0;(<span class=\"code_ident\">initialValue</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;apply&#xA0;with&#xA0;the&#xA0;second&#xA0;parameter&#xA0;the&#xA0;arguments&#xA0;for&#xA0;the&#xA0;parent&#xA0;ctor</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Parent</span>.<span class=\"code_method\">apply</span>(<span class=\"code_keyword\">this</span>,&#xA0;[&#xA0;<span class=\"code_ident\">initialValue</span>&#xA0;]);\n<br>}\n<br>\n<br><span class=\"code_method\">inherits</span>(<span class=\"code_ident\">Client</span>,&#xA0;<span class=\"code_ident\">Parent</span>);</code></div></td></tr></table><br>\r\nGeen scoping problemen hier en instanceof werkt als verwacht:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">c</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">Client</span>(<span class=\"code_number\">5</span>);\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">d</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">Client</span>(<span class=\"code_number\">9</span>);\n<br><span class=\"code_ident\">c</span>.<span class=\"code_ident\">list</span>.<span class=\"code_method\">push</span>(<span class=\"code_number\">3</span>);\n<br><span class=\"code_ident\">d</span>.<span class=\"code_ident\">list</span>.<span class=\"code_method\">push</span>(<span class=\"code_number\">4</span>);\n<br><span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_ident\">c</span>.<span class=\"code_ident\">list</span>,&#xA0;<span class=\"code_ident\">d</span>.<span class=\"code_ident\">list</span>);\n<br><span class=\"code_comment\">//&#xA0;geeft&#xA0;&apos;[5,&#xA0;3],&#xA0;[9,&#xA0;4]&apos;</span>\n<br><span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_ident\">d</span>&#xA0;<span class=\"code_keyword\">instanceof</span>&#xA0;<span class=\"code_ident\">Parent</span>);\n<br><span class=\"code_comment\">//&#xA0;geeft&#xA0;true</span>\n<br><span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_ident\">d</span>&#xA0;<span class=\"code_keyword\">instanceof</span>&#xA0;<span class=\"code_ident\">Client</span>);\n<br><span class=\"code_comment\">//&#xA0;geeft&#xA0;true</span></code></div></td></tr></table><br>\r\n<br>\r\n<b>Mixins</b><br>\r\nVoor een mixin hoeven we geen code te lenen, maar kunnen we gewoon gaan typen. Neem twee simpele constructors:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">function</span>&#xA0;<span class=\"code_method\">Person</span>&#xA0;(<span class=\"code_ident\">name</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">this</span>.<span class=\"code_ident\">name</span>&#xA0;=&#xA0;<span class=\"code_ident\">name</span>;\n<br>}\n<br>\n<br><span class=\"code_keyword\">function</span>&#xA0;<span class=\"code_method\">Product</span>&#xA0;(<span class=\"code_ident\">name</span>,&#xA0;<span class=\"code_ident\">price</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">this</span>.<span class=\"code_ident\">name</span>&#xA0;=&#xA0;<span class=\"code_ident\">name</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">this</span>.<span class=\"code_ident\">price</span>&#xA0;=&#xA0;<span class=\"code_ident\">price</span>;\n<br>}</code></div></td></tr></table><br>\r\nDe mixin hoeft niets te weten van de objecten die hem gaan importeren, het enige wat hij verwacht is dat er ergens een &apos;name&apos; property op het object zit:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">greeter</span>&#xA0;=&#xA0;<span class=\"code_keyword\">function</span>&#xA0;()&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">this</span>.<span class=\"code_ident\">greet</span>&#xA0;=&#xA0;<span class=\"code_keyword\">function</span>&#xA0;()&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_string\">&quot;Hello&quot;</span>,&#xA0;<span class=\"code_keyword\">this</span>.<span class=\"code_ident\">name</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\nNu kunnen we de &apos;greeter&apos; in de twee types mixen en daarna aanroepen:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_ident\">greeter</span>.<span class=\"code_method\">call</span>(<span class=\"code_ident\">Person</span>.<span class=\"code_special\">prototype</span>);\n<br><span class=\"code_ident\">greeter</span>.<span class=\"code_method\">call</span>(<span class=\"code_ident\">Product</span>.<span class=\"code_special\">prototype</span>);\n<br>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">person</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">Person</span>(<span class=\"code_string\">&quot;jan&quot;</span>);\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">product</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">Product</span>(<span class=\"code_string\">&quot;cloud9&quot;</span>,&#xA0;<span class=\"code_number\">15.00</span>);\n<br>\n<br><span class=\"code_ident\">person</span>.<span class=\"code_method\">greet</span>();\n<br><span class=\"code_comment\">//&#xA0;Hello&#xA0;jan</span>\n<br><span class=\"code_ident\">product</span>.<span class=\"code_method\">greet</span>();\n<br><span class=\"code_comment\">//&#xA0;Hello&#xA0;cloud9</span>\n<br>\n<br><span class=\"code_comment\">//&#xA0;instanceof&#xA0;werkt&#xA0;niet&#xA0;op&#xA0;de&#xA0;mixin</span>\n<br><span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_ident\">person</span>&#xA0;<span class=\"code_keyword\">instanceof</span>&#xA0;<span class=\"code_ident\">Person</span>,&#xA0;<span class=\"code_ident\">person</span>&#xA0;<span class=\"code_keyword\">instanceof</span>&#xA0;<span class=\"code_ident\">greeter</span>);\n<br><span class=\"code_comment\">//&#xA0;true,&#xA0;false</span></code></div></td></tr></table><br>\r\nCode die je bijvoorbeeld in je types kan mixen zijn: logging functies en EventEmitter-achtige constructies.<br>\r\n<br>\r\n<b>Conclusie</b><br>\r\nWil je <i>state</i> inheriten: inheritance. Wil je <i>behavior</i> inheriten: mixins.",
    "nextLink": "http://glamour.tweakblogs.net/blog/7238/live-file-sharing-met-socket-punt-io-en-node-punt-js.html",
    "comments": [
        {
            "author": "Apache",
            "date": "donderdag 12 april 2012 20:42",
            "contentHtml": "Goeie post, weten we weeral waarom google met <a href=\"http://www.dartlang.org\" rel=\"external\" title=\"http://www.dartlang.org\">www.dartlang.org</a> op de proppen is gekomen, hopelijk breekt dit snel door!<br>\r\n<br>\r\nZelf probeer ik de laatste jaren js zoveel mogelijk te vermijden door een GWT/Vaadin of flex te gebruiken als er een iets of wat serieuze UI aan te pas komt (business apps, vaak  niet publiekelijk toegankelijk of tablet compatbility vereisend).<br>\r\n<br>\r\n@Crisp: kracht &amp; flexibiliteit misschien wel, in het dagelijkse leven kom ik veel developers tegen die hier &#xE9;&#xE9;n gigantische soep van maken, en dat is wat je in de praktijk ook vaak ziet in veel js, maar ook php code.<br>\r\n<br>\r\nVerder zie ik hier enkel een goede poging om wat van de oo paradigma&apos;s te &quot;faken&quot; <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\"><p class=\"edit\">[Reactie gewijzigd op donderdag 12 april 2012 22:50]</p>",
            "ownReply": false
        },
        {
            "author": "crisp",
            "date": "donderdag 12 april 2012 21:42",
            "contentHtml": "Ik denk dat deze blogpost juist de kracht en flexibiliteit van javascript onderschrijft. Dat sommige mensen vastgeroest zitten in bepaalde OO-paradigma&apos;s en dit niet inzien is eigenlijk vooral jammer voor henzelf <img src=\"http://tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":P\">",
            "ownReply": false
        },
        {
            "author": "pinna_be",
            "date": "vrijdag 13 april 2012 00:12",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/7779/inheritance-in-javascript.html#r_106953\">Apache schreef op donderdag 12 april 2012 @ 20:42:</a><br>\r\nGoeie post, weten we weeral waarom google met <a href=\"http://www.dartlang.org\" rel=\"external\" title=\"http://www.dartlang.org\">www.dartlang.org</a> op de proppen is gekomen, hopelijk breekt dit snel door!<br>\r\n<br>\r\nZelf probeer ik de laatste jaren js zoveel mogelijk te vermijden door een GWT/Vaadin of flex te gebruiken als er een iets of wat serieuze UI aan te pas komt (business apps, vaak  niet publiekelijk toegankelijk of tablet compatbility vereisend).<br>\r\n<br>\r\n@Crisp: kracht &amp; flexibiliteit misschien wel, in het dagelijkse leven kom ik veel developers tegen die hier &#xE9;&#xE9;n gigantische soep van maken, en dat is wat je in de praktijk ook vaak ziet in veel js, maar ook php code.<br>\r\n<br>\r\nVerder zie ik hier enkel een goede poging om wat van de oo paradigma&apos;s te &quot;faken&quot; <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\"></div></blockquote>die dartlang.com ziet er echt spectaculair uit.<br>\r\nIk zocht al een tijdje naar een eenvoudige manier om webapps te maken (ik hou niet zo van het schrijven van javascript in combinatie met html en css-elementen).<br>\r\nTerwijl je hier kan programmeren zoals je een normale c++ applicatie programmeert (uiteraard met een andere syntax) .<br>\r\n<br>\r\nWel verwarrend dat in javascript functies en klasses op dezelfde manier gedefinieerd worden, maar zo wordt inderdaad wel duidelijk hoe klasses wel werken.<br>\r\n<br>\r\nMooie &quot;inherit-functie&quot; trouwens, zeer interessant geschreven.",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "vrijdag 13 april 2012 10:36",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/7779/inheritance-in-javascript.html#r_106955\">crisp schreef op donderdag 12 april 2012 @ 21:42:</a><br>\r\nIk denk dat deze blogpost juist de kracht en flexibiliteit van javascript onderschrijft. Dat sommige mensen vastgeroest zitten in bepaalde OO-paradigma&apos;s en dit niet inzien is eigenlijk vooral jammer voor henzelf <img src=\"http://tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":P\"></div></blockquote>+1<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/7779/inheritance-in-javascript.html#r_106959\">pinna_be schreef op vrijdag 13 april 2012 @ 00:12:</a><br>\r\ndie dartlang.com ziet er echt spectaculair uit.<br>\r\nIk zocht al een tijdje naar een eenvoudige manier om webapps te maken (ik hou niet zo van het schrijven van javascript in combinatie met html en css-elementen).<br>\r\nTerwijl je hier kan programmeren zoals je een normale c++ applicatie programmeert (uiteraard met een andere syntax) .<br>\r\n<br>\r\nWel verwarrend dat in javascript functies en klasses op dezelfde manier gedefinieerd worden, maar zo wordt inderdaad wel duidelijk hoe klasses wel werken.<br>\r\n<br>\r\nMooie &quot;inherit-functie&quot; trouwens, zeer interessant geschreven.</div></blockquote>HTML/CSS zal je nog steeds moeten doen, en of je nou Dart of Javascript schrijft, dealen met de <a href=\"http://www.dartlang.org/articles/improving-the-dom/\" rel=\"external\">DOM</a> moet nog steeds. Alleen in Dart schrijf je `queryAll` en in JS `querySelectorAll`. Then again: ik zie Dart nog helemaal nergens terugkomen, niet in browser support, niet in blog posts, en niet in conference talks. Javascript daarentegen maakt juist de move naar de server (node.js), naar mobile (PhoneGap en aanverwanten), etc. En terecht, want javascript is extreem flexibel en dwingt je niet 1 richting op, vrijheid om je programmeerstijl te kiezen ftw!",
            "ownReply": true
        },
        {
            "author": "ZpAz",
            "date": "vrijdag 13 april 2012 11:51",
            "contentHtml": "Dart compiled naar JS en werkt dus in elke browser.",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "vrijdag 13 april 2012 12:42",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/7779/inheritance-in-javascript.html#r_106970\">ZpAz schreef op vrijdag 13 april 2012 @ 11:51:</a><br>\r\nDart compiled naar JS en werkt dus in elke browser.</div></blockquote><a href=\"https://gist.github.com/1277224\" rel=\"external\">En hoe!</a> Als je dan toch al gaat cross compilen naar javascript, dan zijn er al talloze varianten zoals haXe, CoffeeScript, etc.<p class=\"edit\">[Reactie gewijzigd op vrijdag 13 april 2012 12:44]</p>",
            "ownReply": true
        },
        {
            "author": "intotherude",
            "date": "maandag 16 april 2012 08:09",
            "contentHtml": "mijn manier om een beetje OO-achtige structuur te krijgen:<br>\r\n<br>\r\nvar superobject = function(options) {<br>\r\n    this.options = options;<br>\r\n<br>\r\n    this.getName() {<br>\r\n        alert(this.options.name);<br>\r\n    }<br>\r\n}<br>\r\n<br>\r\nvar childobject = function(options) {<br>\r\n    jQuery.extend(this,new superobject(options));<br>\r\n}<br>\r\n<br>\r\nnatuurlijk niet helemaal mijn code, maar het werkt wel in mijn situatie <img src=\"http://tweakimg.net/g/s/biggrin.gif\" width=\"15\" height=\"15\" alt=\":D\">",
            "ownReply": false
        },
        {
            "author": "Ruudjah",
            "date": "woensdag 18 april 2012 08:57",
            "contentHtml": "<blockquote><div class=\"quote\">Ik denk dat deze blogpost juist de kracht en flexibiliteit van javascript onderschrijft. Dat sommige mensen vastgeroest zitten in bepaalde OO-paradigma&apos;s en dit niet inzien is eigenlijk vooral jammer voor henzelf</div></blockquote>Voor mij toont het vooral dat de expressiviteit van Javascript schromelijk tekort komt. Concepten die al jarenlang in zo&apos;n beetje ieder ander general purpose zitten moet je in Javascript uitdrukken via omslachtige manieren. Bovenstaande post is gewwon een ugly hack, en strikt genomen een anti-pattern: Javascript zou het gewoon native moeten ondersteunen. Code die nu gebruik maakt van bovenstaande constructie is simpelweg mindere kwaliteit code; de intentie is onduidelijk.<br>\r\n<br>\r\nDaarnaast kennen mensen classbased OOP veel meer dan prototypal OOP. &apos;t is natuurlijk het klassieke kip-ei argument, maar daarom niet minder geldig. De kracht van Javascript waar je over schrijft kunnen coders meestal niet correct inzetten, en is meestal veel duidelijk te vatten in classbased OOP concepten. <br>\r\n<br>\r\nPersoonlijk kan ik me zwaar irriteren aan Javascript, omdat alles zo&apos;n beetje als functie wordt gedeclareert. Hallo: soms wil ik een klasse definieren, maar dat moet dan met een functie. Dus krijg ik code die niet mijn intentie weergeeft: ik wilde een klasse, maar in plaats daarvan heb ik een functie. Semantiek is belangrijk om te snappen wat de schrijver precies bedoelde. Omdat dan eerst te moeten ontcijferen vereist onnodig veel braincycles.<blockquote><div class=\"quote\">En hoe! Als je dan toch al gaat cross compilen naar javascript, dan zijn er al talloze varianten zoals haXe, CoffeeScript, etc.</div></blockquote>Als de helloworld van dart direct zou compileren naar een stuk Javascript wat minder loc dan die van de dart variant, zou er iets raars aan de hand zijn. De code die je linkt is van oktober vorig jaar, een week nadat dart 0.0.1 uit kwam. Je ontwikkelproces is danig in de war als je in de 0.0.1 versie van je software je al begint met optimalisatie. Premature optimization... Je kent &apos;em vast wel.<br>\r\n<br>\r\nVergeet niet dat Google momenteel met Chrome het grootste marktaandeel heeft (zojuist IE voorbij), helemaal met mobile (stock android, android chrome) erbij. Hiermee kunnen ze zo&apos;n derde van de markt bedienen met een native dart VM. <br>\r\n<br>\r\nIk ben nu een paar weken aan het prutsen in dart, en ik moet zeggen dat het zeer goeie code oplevert. Java maar dan zonder 10 regelige javadoc comments, tab indents van 8, nodeloze verbositeit; C# zonder de complexiteit van het typesysteem waar je altijd aan moet voldoen, maar met reified generics, dynamiek van Javascript, compactheid van python...En dan dart2js voor fossielen die menen het internet te moeten betreden <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\">. <br>\r\n<br>\r\nInterresant is ook dat ze alles zo saai mogelijk hebben gehouden, maar patronen die veel voorkomen in bijvoorbeeld Java of C# ze gewoon in de taal bakken: neem named constructors, en default implementations van interfaces. Kan allemaal prima in Java of C#, maar de code die dat mogelijk maakt is gewoon ranzig. Kijk eens naar al die IOC en injection libraries/frameworks, die zaken oplossen die eigenlijk in de taal zelf moeten zitten.  Om te weten wat er nu precies gebeurt moet je ellenlange config/code files doorspitten, om erachter te komen dat je precies niets wijzer bent geworden over de code die er <i>werkelijk toe doet</i>.",
            "ownReply": false
        }
    ]
}