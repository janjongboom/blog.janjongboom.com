{
    "title": "Node.js's null terminator of death",
    "language": "en",
    "link": "http://glamour.tweakblogs.net/blog/8476/node-punt-jss-null-terminator-of-death.html",
    "date": "2012-11-19T17:29:00.000Z",
    "category": "Backend",
    "views": 9776,
    "articleHtml": "Recently we embraced our new &apos;review for security&apos; strategy, that included a security 101 given by yours truly and a very big messages like &apos;Don&apos;t reinvent the fucking wheel&apos;. Just saying.<br>\r\n<br>\r\n<img src=\"http://100procentjan.nl/tweakers/dontwheel.png\" title=\"http://100procentjan.nl/tweakers/dontwheel.png\" alt=\"http://100procentjan.nl/tweakers/dontwheel.png\"><br>\r\n<br>\r\nWorking on this subject intensively also learned me to really really test for security. Developers, and I&apos;m not an exception here, are focussed on code quality, feature stability and security is not always on their radar. And that&apos;s a shame because reviewing for security really gives you this &apos;Dade Murphy&apos; hackers feeling. Meet me at the &apos;null terminator of death&apos;.<br><a name=\"more\"></a><br>\r\n<b>Start off by doing some black box testing</b><br>\r\nA feature came under review that retrieves data from an external source and then offers this info through an HTTP interface. Pretty straight forward. When inspecting the HTTP requests I then see a request per article coming in. That kinda surprise me because I knew the source data is one big blob. There must be some server side processing.<br>\r\n<br>\r\n<img src=\"http://100procentjan.nl/tweakers/httprequest.png\" title=\"http://100procentjan.nl/tweakers/httprequest.png\" alt=\"http://100procentjan.nl/tweakers/httprequest.png\"><br>\r\n<br>\r\nTime to try some stuff out. First thing is to randomly change some data and see if it alread<br>\r\n<br>code:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n</pre></td><td class=\"phphighlightcode\"><div><pre>$ curl http://web.janjongboom.c9.io/api/some/feature/tralalal\r\n\r\nError: ENOENT, open &apos;/var/some/dir/cache/tralalal.json&apos;</pre></div></td></tr></table><br>\r\nBingo! We now know that there is a cache held on the filesystem and that the file being loaded depends on the URL parameter. Without a white list.<br>\r\n<br>\r\n<b>Escaping from cache</b><br>\r\nThe next thing is to escape from the cache folder. Just adding &apos;../&apos; in the path won&apos;t magically work, but we can url encode this and see if there is any protection.<br>\r\n<br>code:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n</pre></td><td class=\"phphighlightcode\"><div><pre>$ curl http://web.janjongboom.c9.io/api/some/feature/..%2server\r\n\r\nError: ENOENT, open &apos;/var/some/dir/server.json&apos;</pre></div></td></tr></table><br>\r\nHow great! We don&apos;t have to do more weird tricks, and the ../ is even auto resolved for us. Now it&apos;s time to start digging around until we are in a more interesting place. If you&apos;re reviewing you know the server structure so it should not be hard to move yourself in the source folder of your project. Great thing is that almost all node.js projects have a package.json in their root. That makes the search easier.<br>\r\n<br>\r\nThis way I could read the package.json of my project. Not so nice. However, I&apos;d rather read some nice information like the private key of the server.<br>\r\n<br>\r\n<b>Get around the .json postfix</b><br>\r\nLet&apos;s grab the code. It was something something like:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_ident\">app</span>.<span class=\"code_method\">get</span>(<span class=\"code_string\">&apos;/api/some/feature/:file&apos;</span>,&#xA0;<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">req</span>,&#xA0;<span class=\"code_ident\">res</span>,&#xA0;<span class=\"code_ident\">next</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">fs</span>.<span class=\"code_method\">readFile</span>(<span class=\"code_ident\">__dirname</span>&#xA0;+&#xA0;<span class=\"code_string\">&quot;/cache/&quot;</span>&#xA0;+&#xA0;<span class=\"code_ident\">req</span>.<span class=\"code_ident\">params</span>.<span class=\"code_ident\">file</span>&#xA0;+&#xA0;<span class=\"code_string\">&quot;.json&quot;</span>,&#xA0;<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">err</span>,&#xA0;<span class=\"code_ident\">data</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;this&#xA0;causes&#xA0;us&#xA0;to&#xA0;see&#xA0;the&#xA0;full&#xA0;file&#xA0;name</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">err</span>)&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_method\">next</span>(<span class=\"code_ident\">err</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">res</span>.<span class=\"code_method\">end</span>(<span class=\"code_ident\">data</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;})\n<br>})</code></div></td></tr></table><br>\r\nSo in the construction of the file name, we have already bypassed the &apos;/cache/&apos; and &apos;__dirname&apos; part. But a real hacker should also have the ability to get passed the extension. Together with Bert from the node.js core team we brainstormed a little about ways to do this, and he figured that putting a null terminator (\\0) in the file name would probably omit everything thereafter. Makes sense if you realize that all core parts in node are written in C. A simple &apos;encodeURIComponent(&quot;\\0&quot;)&apos; gives &apos;%00&apos;. Let&apos;s just try that...<br>\r\n<br>code:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n</pre></td><td class=\"phphighlightcode\"><div><pre>$ curl -k /api/some/feature/..%2F..%2F..%2Fhome%2Fubuntu%2F.ssh%2Fid_rsa.pub%00\r\n\r\n&quot;Invalid JSON&quot;</pre></div></td></tr></table><br>\r\nPhew, at least there is a JSON.parse that fails. But can you imagine if that check wouldn&apos;t be there? The private key of a production server could be stolen. Good thing we do this security reviews.<br>\r\n<br>\r\n<b>Lessons learned</b><ul><li>Reviewing for security always pays off</li><li>User input is always evil. Escape it. Do a realpath and verify the user should be able to access the file. Use whitelists, etc.</li><li>The null terminator trick made me really feel hackerish</li></ul><img src=\"http://tweakimg.net/g/s/yummie.gif\" width=\"15\" height=\"15\" alt=\":9\">",
    "nextLink": "http://glamour.tweakblogs.net/blog/8051/building-wordpress-sites-in-the-cloud.html",
    "comments": [
        {
            "author": "ابد&#15",
            "date": "Monday 19 November 2012 22:17",
            "contentHtml": "thank you maaw",
            "ownReply": false
        },
        {
            "author": "Freedom",
            "date": "Wednesday 21 November 2012 11:51",
            "contentHtml": "The way you wrote the article made me smile. <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\">",
            "ownReply": false
        },
        {
            "author": "armageddon_2k1",
            "date": "Wednesday 21 November 2012 13:54",
            "contentHtml": "This is a sarcastic post right? <img src=\"http://tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":P\">",
            "ownReply": false
        }
    ]
}