{
    "title": "Developer Summit: los met pipes en map/reduce",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/6252/developer-summit-los-met-pipes-en-map-reduce.html",
    "date": "2011-03-11T11:47:00.000Z",
    "category": "Frontend",
    "views": 2736,
    "articleHtml": "Het <a href=\"http://summit.tweakers.net/\" rel=\"external\">Tweakers Developer Summit</a> was weer een mooie gelegenheid als web-nerd om he-le-maal los te gaan. Als eerst, mijn implementatie:<ul><li>Klop ID&apos;s van de pricewatch in, komma seperated</li><li>Hit de button</li><li>Je krijgt een lijst met shops waar <b>alle</b> producten te koop zijn, met de totaalprijs</li></ul><a href=\"http://100procentjan.nl/files/1zyyw5bcdxl21yvg8fl7ksfzn.html\" rel=\"external\"><img src=\"http://100procentjan.nl/files/rerhm4ywk1cqad519zx38yi5x.PNG\" title=\"http://100procentjan.nl/files/rerhm4ywk1cqad519zx38yi5x.PNG\" alt=\"http://100procentjan.nl/files/rerhm4ywk1cqad519zx38yi5x.PNG\"></a><br>\r\n<i>Plaatje klikken is spelen. Let op! Er is geen visuele feedback, gebruik de Firebug / Chrome Console om in de gaten te houden wat er gebeurt.</i><br><a name=\"more\"></a><br>\r\n<b>Implementatie</b><br>\r\nOmdat een groot deel van het werk scrapen is, en ik daar zelf geen zin in heb; heb ik daarvoor <a href=\"http://pipes.yahoo.com/pipes\" rel=\"external\">Yahoo Pipes</a> voor gepakt. <i>&quot;Pipes is a powerful composition tool to aggregate, manipulate, and mashup content from around the web&quot;</i>. In Pipes is het de bedoeling om blokjes aan elkaar te verbinden om data te manipuleren. De <a href=\"http://pipes.yahoo.com/pipes/pipe.info?_id=a74913b36aa04797a2ac37b4ee019192\" rel=\"external\">volgende pipe</a> doet het zware werk:<br>\r\n<img src=\"http://100procentjan.nl/files/4y6y9nxlzqbo2tcyh1hfki5jb.PNG\" title=\"http://100procentjan.nl/files/4y6y9nxlzqbo2tcyh1hfki5jb.PNG\" alt=\"http://100procentjan.nl/files/4y6y9nxlzqbo2tcyh1hfki5jb.PNG\"><ul><li>1. We beginnen met het vragen naar een getal. Deze is ook beschikbaar als parameter in je URL straks.</li><li>2. Bouw een URL in de vorm: <a href=\"http://tweakers.net/pricewatch/GETAL\" rel=\"external\" title=\"http://tweakers.net/pricewatch/GETAL\">http://tweakers.net/pricewatch/GETAL</a></li><li>3. Fetch page, en zoek de pricewatch tabel; split dit in &lt;tr/&gt;&apos;s</li><li>4. Filter om te zorgen dat we alleen pricewatch rijen uitfilteren; en niet bv. de lijst met verzendprijzen.</li><li>5. Manipuleer de set. Omdat ik het niet goed voor elkaar kreeg om een fatsoenlijke feed te bakken, heb ik alleen replaces uitgevoerd. Beetje vreemd, maar dat fix ik later wel in de javascript.</li><li>6. Output. Per shop een regel in de vorm van &apos;&lt;veel&gt;&lt;html&gt;&lt;meuk&gt;_Shop:Azerty_&lt;meer&gt;&lt;meuk&gt;_Prijs:123,20_&lt;blah&gt;&apos;</li></ul><b>Javascript</b><br>\r\nAan elkaar knopen van de pipe en javascript is heel makkelijk, want er is een JSON interface beschikbaar.<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">pipe</span>&#xA0;=&#xA0;<span class=\"code_string\">&apos;http://pipes.yahoo.com/pipes/pipe.run?_id=a74913b36aa04797a2ac37b4ee019192&amp;_render=json&amp;_callback=?&apos;</span>;\n<br><span class=\"code_ident\">$</span>.<span class=\"code_method\">getJSON</span>(<span class=\"code_ident\">pipe</span>,&#xA0;{&#xA0;<span class=\"code_ident\">TweakersId</span>:&#xA0;<span class=\"code_number\">12345</span>&#xA0;},&#xA0;<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">data</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;data.value.items&#xA0;heeft&#xA0;nu&#xA0;je&#xA0;content!</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">for</span>(<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">ix</span>&#xA0;=&#xA0;<span class=\"code_number\">0</span>,&#xA0;<span class=\"code_ident\">item</span>&#xA0;=&#xA0;<span class=\"code_ident\">data</span>.<span class=\"code_ident\">value</span>.<span class=\"code_ident\">items</span>[<span class=\"code_ident\">ix</span>];&#xA0;<span class=\"code_ident\">ix</span>&#xA0;&lt;&#xA0;<span class=\"code_ident\">data</span>.<span class=\"code_ident\">value</span>.<span class=\"code_ident\">items</span>.<span class=\"code_ident\">length</span>;&#xA0;<span class=\"code_ident\">item</span>&#xA0;=&#xA0;<span class=\"code_ident\">data</span>.<span class=\"code_ident\">value</span>.<span class=\"code_ident\">items</span>[++<span class=\"code_ident\">ix</span>])&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;maak&#xA0;objectje&#xA0;met&#xA0;&apos;shop&apos;,&#xA0;&apos;prijs&apos;,&#xA0;&apos;prijs&#xA0;incl&#xA0;verzend&apos;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">pw</span>&#xA0;=&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">shop</span>:&#xA0;<span class=\"code_string\">/_Shop:(.*?)_/</span>.<span class=\"code_method\">exec</span>(<span class=\"code_ident\">item</span>.<span class=\"code_ident\">content</span>)[<span class=\"code_number\">1</span>],\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">prijs</span>:&#xA0;<span class=\"code_method\">Number</span>((<span class=\"code_string\">/_Prijs:([\\w\\s,\\.]+)_/</span>.<span class=\"code_method\">exec</span>(<span class=\"code_ident\">item</span>.<span class=\"code_ident\">content</span>)[<span class=\"code_number\">1</span>]).<span class=\"code_method\">replace</span>(<span class=\"code_string\">/,/</span>,&#xA0;<span class=\"code_string\">&apos;.&apos;</span>)),\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">totaalprijs</span>:&#xA0;<span class=\"code_method\">Number</span>((<span class=\"code_string\">/_Totaal:([\\w\\s,\\.]+)_/</span>.<span class=\"code_method\">exec</span>(<span class=\"code_ident\">item</span>.<span class=\"code_ident\">content</span>)[<span class=\"code_number\">1</span>]).<span class=\"code_method\">replace</span>(<span class=\"code_string\">/,/</span>,&#xA0;<span class=\"code_string\">&apos;.&apos;</span>))\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>});</code></div></td></tr></table><br>\r\nWe hebben nu dus de data van de pricewatch vertaalt naar een lijstje objecten die netjes geformatteerd in javascript zitten.<br>\r\n<br>\r\n<b>Map/Reduce</b><br>\r\nMap/reduce is een manier van werken om grote sets data op te delen in kleine deelsetjes. Handig voor bijvoorbeeld aggregatie, want je moet goed nadenken hoe je je units zo klein en overzichtelijk mogelijk kan houden. We krijgen dus de data terug uit de pipe, en moeten nu gaan aggregeren.<ul><li>Stop alle items in een array. Welk product het om gaat maakt ons niet uit. Alle data zit dus door elkaar heen.</li><li>Map functie: hier moet een key/value pair uitkomen. We willen groeperen op shopnaam, dus ik yield { key: shopnaam, value: item }.</li><li>Reduce functie: gegroepeerd op key komen de objecten nu in mijn reduce functie: {key: shopnaam, value: item-array}.</li><li>Elke value-array die niet net zoveel items heeft als er ID&apos;s waren, waren niet te koop in alle shops; dus skip die maar</li><li>Tel de prijzen van alle items bij elkaar op</li></ul>Syntax hiervoor is supersimpel:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_method\">mapreduce</span>(<span class=\"code_ident\">items</span>,&#xA0;<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">item</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;map&#xA0;functie,&#xA0;retouneer&#xA0;key/value</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">emit</span>(<span class=\"code_ident\">item</span>.<span class=\"code_ident\">shop</span>,&#xA0;<span class=\"code_ident\">item</span>);\n<br>},&#xA0;<span class=\"code_keyword\">function</span>(<span class=\"code_ident\">key</span>,&#xA0;<span class=\"code_ident\">data</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;reduce&#xA0;functie</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;het&#xA0;boeit&#xA0;alleen&#xA0;als&#xA0;de&#xA0;items&#xA0;allebei&#xA0;te&#xA0;koop&#xA0;zijn</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>(<span class=\"code_ident\">data</span>.<span class=\"code_ident\">length</span>&#xA0;===&#xA0;<span class=\"code_ident\">ids</span>.<span class=\"code_ident\">length</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">prijs</span>&#xA0;=&#xA0;<span class=\"code_number\">0</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">for</span>(<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">entry</span>&#xA0;<span class=\"code_keyword\">in</span>&#xA0;<span class=\"code_ident\">data</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">prijs</span>&#xA0;+=&#xA0;<span class=\"code_ident\">data</span>[<span class=\"code_ident\">entry</span>].<span class=\"code_ident\">prijs</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;alle&#xA0;items&#xA0;zijn&#xA0;te&#xA0;koop,&#xA0;voor&#xA0;deze&#xA0;totaalprijs</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">output</span>.<span class=\"code_method\">push</span>({&#xA0;<span class=\"code_ident\">shop</span>:&#xA0;<span class=\"code_ident\">key</span>,&#xA0;<span class=\"code_ident\">prijs</span>:&#xA0;<span class=\"code_ident\">prijs</span>&#xA0;});\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>});</code></div></td></tr></table><br>\r\nEn in &apos;output&apos; zitten nu alle shops. Hoef alleen nog te sorteren en naar HTML te spugen. <br>\r\n<br>\r\n<b>Map/reduce implementatie</b><br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">set</span>&#xA0;=&#xA0;[];\n<br><span class=\"code_keyword\">function</span>&#xA0;<span class=\"code_method\">emit</span>(<span class=\"code_ident\">key</span>,&#xA0;<span class=\"code_ident\">value</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>(!<span class=\"code_ident\">set</span>[<span class=\"code_ident\">key</span>])&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">set</span>[<span class=\"code_ident\">key</span>]&#xA0;=&#xA0;[];\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">set</span>[<span class=\"code_ident\">key</span>].<span class=\"code_method\">push</span>(<span class=\"code_ident\">value</span>);\n<br>}\n<br>\n<br><span class=\"code_keyword\">function</span>&#xA0;<span class=\"code_method\">mapreduce</span>(<span class=\"code_ident\">data</span>,&#xA0;<span class=\"code_ident\">map</span>,&#xA0;<span class=\"code_ident\">reduce</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">for</span>(<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">ix</span>&#xA0;=&#xA0;<span class=\"code_number\">0</span>;&#xA0;<span class=\"code_ident\">ix</span>&#xA0;&lt;&#xA0;<span class=\"code_ident\">items</span>.<span class=\"code_ident\">length</span>;&#xA0;<span class=\"code_ident\">ix</span>++)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">map</span>(<span class=\"code_ident\">items</span>[<span class=\"code_ident\">ix</span>]);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">for</span>(<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">shop</span>&#xA0;<span class=\"code_keyword\">in</span>&#xA0;<span class=\"code_ident\">set</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">reduce</span>(<span class=\"code_ident\">shop</span>,&#xA0;<span class=\"code_ident\">set</span>[<span class=\"code_ident\">shop</span>]);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Lekker weinig code!</b><br>\r\nBij elkaar is de javascript zo&apos;n 100 regels, maar dat is voornamelijk boilerplate om aan de regels van de contest te voldoen. De echte implementatie is een regel of 20 ofzo + 10 voor de mapreduce functie. Check de source van de HTML pagina voor de werking. De Yahoo Pipe kan je ook gewoon inzien.",
    "nextLink": "http://glamour.tweakblogs.net/blog/6245/javascript-on-the-fly-samenvoegen-minifyen-en-versionen.html",
    "comments": [
        {
            "author": "siddler",
            "date": "vrijdag 11 maart 2011 13:00",
            "contentHtml": "Als ik kijk naar de lijst met vereiste ben je nog een paar dingen vergeten:<ul><li>De input bestaat uit een lijst met productid&apos;s, en dus niet komma seperated</li><li>Bij de output hoort ook de prijs van de losse producten erbij te staan</li><li>Ik ben zelf geen echte developer, maar ik geloof niet dat je de vereiste halve seconde sleep ingebouwd hebt.</li></ul>Ik hoop dat je hier nog iets mee kunt <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\">",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "vrijdag 11 maart 2011 13:05",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/6252/developer-summit-los-met-pipes-en-map-reduce.html#r_84136\">siddler schreef op vrijdag 11 maart 2011 @ 13:00:</a><br>\r\nAls ik kijk naar de lijst met vereiste ben je nog een paar dingen vergeten:<ul><li>De input bestaat uit een lijst met productid&apos;s, en dus niet komma seperated</li><li>Bij de output hoort ook de prijs van de losse producten erbij te staan</li><li>Ik ben zelf geen echte developer, maar ik geloof niet dat je de vereiste halve seconde sleep ingebouwd hebt.</li></ul>Ik hoop dat je hier nog iets mee kunt <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\"></div></blockquote>1. Een lijst met komma&apos;s is ook een lijst  <img src=\"http://tweakimg.net/g/s/clown.gif\" width=\"15\" height=\"15\" alt=\":+\"> <br>\r\n2. Mweh, weet ik niet zeker. De uitleg is voor nogal wat interpretaties vatbaar.<br>\r\n3. Zie de var downloader = setInterval methode, die zorgt voor de sleep. Javascript kent vanwege haar implementatie geen sleep methodes.",
            "ownReply": true
        },
        {
            "author": "siddler",
            "date": "vrijdag 11 maart 2011 13:24",
            "contentHtml": "<span style=\"text-decoration:line-through\">[quote]een tekstbestand met op elke regel een id[/quote]<br>\r\nLijkt me dus geen lijst met komma&apos;s  <img src=\"http://tweakimg.net/g/s/hypocrite.gif\" width=\"15\" height=\"20\" alt=\"O-)\"> <br>\r\n<br>\r\n[quote]Je programma geeft als output een lijstje met daarin de namen van de winkels waar je de producten aanschaft <b>en de prijs die je voor elk product betaalt</b>.[/quote]<br>\r\nVooral t woordje EN lijkt me hier belangrijk  <img src=\"http://tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":P\"></span><br>\r\nEdit: blijkbaar niet al te belangrijk <img src=\"http://tweakimg.net/g/s/clown.gif\" width=\"15\" height=\"15\" alt=\":+\"><p class=\"edit\">[Reactie gewijzigd op vrijdag 11 maart 2011 14:24]</p>",
            "ownReply": false
        },
        {
            "author": "ACM",
            "date": "vrijdag 11 maart 2011 14:13",
            "contentHtml": "De uitleg is expres wat vaag gehouden om zo ruimte te scheppen voor eigen interpretatie en daarmee voor creativiteit. Er is daardoor niet echt een juist antwoord, maar de oplossingen zijn vaak juist leuk om te zien door de gekozen aanpak <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"><br>\r\n<br>\r\nDus het maakt ons weinig uit of je nou een comma-separated list of gewoon new-line separated verwacht als input <img src=\"http://tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":P\"> Idem dito voor de output.",
            "ownReply": false
        },
        {
            "author": "CodeCaster",
            "date": "vrijdag 11 maart 2011 14:33",
            "contentHtml": "Het zal wel aan mij liggen, maar ik zie op de Firebug-console niets voorbij komen, en er komt ook geen output in beeld bij bijvoorbeeld ID 261662.<br>\r\n<br>\r\nMaar dat pipes ziet er wel bijzonder interessant uit.<p class=\"edit\">[Reactie gewijzigd op zaterdag 12 maart 2011 11:40]</p>",
            "ownReply": false
        }
    ]
}