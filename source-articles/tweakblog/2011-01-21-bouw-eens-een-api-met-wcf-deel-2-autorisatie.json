{
    "title": "Bouw eens een API met WCF, deel 2: Autorisatie",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/5986/bouw-eens-een-api-met-wcf-deel-2-autorisatie.html",
    "date": "2011-01-21T13:40:00.000Z",
    "category": "Backend",
    "views": 3638,
    "articleHtml": "Bij een API is toegangsbeperking een fijn idee, zo voorkom je dat bezoekers je hele platform platleggen of kan je contractueel vastgestelde beperkingen afdwingen. Standaardautorisatie zou je kunnen doen via sessies, op IP basis of via een Key. Sessies vallen per definitie af, omdat de gemiddelde API client helemaal geen sessie-informatie kan of wil doorsturen. Op IP basis zou prima kunnen om het maximaal aantal requests te kunnen monitoren, maar je kunt hiermee geen restricties op de API plaatsen. Vandaar dat we hebben gekozen voor een systeem op basis van een key.<br>\r\n<br>\r\n<b>Database</b><br>\r\nIn onze database hebben we een heel simpele structuur met een n-n relatie tussen de Users en de Rights.<br>\r\n<br>SQL:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_ident\">Users</span>\n<br><span class=\"code_comment\">--------------------------------------</span>\n<br><span class=\"code_ident\">Id</span>&#xA0;&#xA0;|&#xA0;<span class=\"code_keyword\">Key</span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;|&#xA0;<span class=\"code_keyword\">Name</span>\n<br><span class=\"code_number\">1</span>&#xA0;&#xA0;&#xA0;|&#xA0;<span class=\"code_ident\">abcde1234af32</span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;|&#xA0;<span class=\"code_ident\">Jan</span><span class=\"code_error_line\"><span class=\"code_error\">&apos;s&#xA0;Mobile&#xA0;Client</span></span>\n<br>\n<br><span class=\"code_ident\">Rights</span>\n<br><span class=\"code_comment\">---------------------------------------</span>\n<br><span class=\"code_ident\">Id</span>&#xA0;&#xA0;|&#xA0;<span class=\"code_ident\">Description</span>\n<br><span class=\"code_number\">101</span>&#xA0;|&#xA0;<span class=\"code_ident\">Opvragen</span>&#xA0;<span class=\"code_ident\">koopaanbod</span>\n<br>\n<br><span class=\"code_ident\">UserRights</span>\n<br><span class=\"code_comment\">---------------------------------------</span>\n<br><span class=\"code_ident\">UserId</span>&#xA0;&#xA0;|&#xA0;<span class=\"code_ident\">RightId</span>\n<br><span class=\"code_number\">1</span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;|&#xA0;<span class=\"code_number\">101</span></code></div></td></tr></table><br><a name=\"more\"></a><br>\r\n<b>Code</b><br>\r\nWe moeten nu nog wel de data uit de database op een eenvoudig toegangelijke manier vertalen naar code. We gebruiken daar grofweg het volgende datamodel voor:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">User</span>\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">Guid</span>&#xA0;<span class=\"code_ident\">Key</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">Name</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">ApiRights</span>&#xA0;<span class=\"code_ident\">Rights</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>}\n<br>\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">ApiRights</span>\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">ApiRight</span>(<span class=\"code_number\">101</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">bool</span>&#xA0;<span class=\"code_ident\">OpvragenKoopAanbod</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\nTijdens het laden van de gebruiker uit de database kunnen we nu handig gebruik maken van de attributes op de properties; ongeveer als:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_ident\">List</span>&lt;<span class=\"code_ident\">UserRights</span>&gt;&#xA0;<span class=\"code_ident\">userRights</span>&#xA0;=&#xA0;<span class=\"code_ident\">Dao</span>.<span class=\"code_method\">GetUserRights</span>(<span class=\"code_number\">1</span>);\n<br>\n<br><span class=\"code_comment\">//&#xA0;cache&#xA0;de&#xA0;properties&#xA0;om&#xA0;snel&#xA0;te&#xA0;kunnen&#xA0;vertalen</span>\n<br><span class=\"code_ident\">Dictionary</span>&lt;<span class=\"code_keyword\">int</span>,&#xA0;<span class=\"code_ident\">PropertyInfo</span>&gt;&#xA0;<span class=\"code_ident\">rightsOnBusinessObject</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">Dictionary</span>&lt;<span class=\"code_keyword\">int</span>,&#xA0;<span class=\"code_ident\">PropertyInfo</span>&gt;();\n<br><span class=\"code_ident\">PropertyInfo</span>[]&#xA0;<span class=\"code_ident\">userRightProps</span>&#xA0;=&#xA0;<span class=\"code_ident\">u</span>.<span class=\"code_ident\">Rights</span>.<span class=\"code_method\">GetType</span>().<span class=\"code_method\">GetProperties</span>();\n<br><span class=\"code_keyword\">foreach</span>&#xA0;(<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">prop</span>&#xA0;<span class=\"code_keyword\">in</span>&#xA0;<span class=\"code_ident\">userRightProps</span>)\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zoek&#xA0;het&#xA0;attribute&#xA0;op</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ApiRightAttribute</span>[]&#xA0;<span class=\"code_ident\">attr</span>&#xA0;=&#xA0;(<span class=\"code_ident\">ApiRightAttribute</span>[])<span class=\"code_ident\">prop</span>.<span class=\"code_method\">GetCustomAttributes</span>(<span class=\"code_keyword\">typeof</span>(<span class=\"code_ident\">ApiRightAttribute</span>),&#xA0;<span class=\"code_keyword\">false</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>(<span class=\"code_ident\">attr</span>.<span class=\"code_ident\">Length</span>&#xA0;&gt;&#xA0;<span class=\"code_number\">0</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">rightsOnBusinessObject</span>.<span class=\"code_method\">Add</span>(<span class=\"code_ident\">attr</span>[<span class=\"code_number\">0</span>].<span class=\"code_ident\">DatabaseId</span>,&#xA0;<span class=\"code_ident\">prop</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}\n<br>\n<br><span class=\"code_comment\">//&#xA0;loop&#xA0;door&#xA0;alle&#xA0;rechten&#xA0;heen&#xA0;die&#xA0;de&#xA0;gebruiker&#xA0;heeft</span>\n<br><span class=\"code_keyword\">foreach</span>&#xA0;(<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">userRight</span>&#xA0;<span class=\"code_keyword\">in</span>&#xA0;<span class=\"code_ident\">userRights</span>)\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zoek&#xA0;de&#xA0;property&#xA0;op,&#xA0;en&#xA0;zet&#xA0;de&#xA0;waarde&#xA0;naar&#xA0;&apos;true&apos;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">rightsOnBusinessObject</span>.<span class=\"code_method\">ContainsKey</span>(<span class=\"code_ident\">userRight</span>.<span class=\"code_ident\">RightId</span>))\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">rightsOnBusinessObject</span>[<span class=\"code_ident\">userRight</span>.<span class=\"code_ident\">RightId</span>].<span class=\"code_method\">SetValue</span>(<span class=\"code_ident\">u</span>.<span class=\"code_ident\">Rights</span>,&#xA0;<span class=\"code_keyword\">true</span>,&#xA0;<span class=\"code_keyword\">null</span>);\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Controle in de service</b><br>\r\nIn de service kunnen we nu een eenvoudige check doen:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_comment\">//&#xA0;we&#xA0;hebben&#xA0;in&#xA0;onze&#xA0;interface&#xA0;een&#xA0;URL-template&#xA0;staan&#xA0;als</span>\n<br><span class=\"code_comment\">//&#xA0;&quot;aanbod/{key}/&quot;</span>\n<br><span class=\"code_comment\">//&#xA0;je&#xA0;roept&#xA0;deze&#xA0;service&#xA0;dus&#xA0;aan&#xA0;als:</span>\n<br><span class=\"code_comment\">//&#xA0;www.url.nl/naamvanje.svc/aanbod/12345abc/</span>\n<br><span class=\"code_comment\">//&#xA0;je&#xA0;key&#xA0;zit&#xA0;dus&#xA0;gewoon&#xA0;in&#xA0;je&#xA0;URL</span>\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">SomeListOfObjects</span>&#xA0;<span class=\"code_method\">GetObjects</span>(<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">key</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">user</span>&#xA0;=&#xA0;<span class=\"code_ident\">Dao</span>.<span class=\"code_method\">GetUser</span>(<span class=\"code_ident\">key</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;als&#xA0;de&#xA0;gebruiker&#xA0;geen&#xA0;rechten&#xA0;heeft</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>(!<span class=\"code_ident\">user</span>.<span class=\"code_ident\">Rights</span>.<span class=\"code_ident\">OpvragenKoopAanbod</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zet&#xA0;de&#xA0;code&#xA0;naar&#xA0;403</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">WebOperationContext</span>.<span class=\"code_ident\">Current</span>.<span class=\"code_ident\">OutgoingResponse</span>.<span class=\"code_ident\">StatusCode</span>&#xA0;=&#xA0;<span class=\"code_ident\">HttpStatusCode</span>.<span class=\"code_ident\">Unauthorized</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;eventueel&#xA0;nog&#xA0;een&#xA0;persoonlijke&#xA0;boodschap</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">WebOperationContext</span>.<span class=\"code_ident\">Current</span>.<span class=\"code_ident\">OutgoingResponse</span>.<span class=\"code_ident\">StatusDescription</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;Dit&#xA0;is&#xA0;niet&#xA0;mijn&#xA0;service,&#xA0;vriend&quot;</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_keyword\">null</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Controle op het aantal requests</b><br>\r\nNu kunnen we weliswaar verifieren of een gebruiker een bepaalde API mag aanroepen, maar dit blokkeert niet de kans dat er vanaf een key 80.000 requests per minuut af worden gevuurd. Tijd dus om ook hier paal en perk aan te stellen!<br>\r\n<br>\r\n<b>Memcached to the rescue!</b><br>\r\n<a href=\"http://memcached.org/\" rel=\"external\">Memcached</a> is een distributed cache systeem dat min of meer het hart achter funda is. We gebruiken memcached in een totaal cluster van 20 machines, die allemaal 1 GB aan geheugen bijdragen. Alles wat we enigszins kunnen cachen stoppen we in deze cache. Omdat we vier webservers hebben staan vanwaar we de API serveren, gebruiken we memcached om het aantal requests / key bij te houden. Fijn hierbij is dat er een &apos;increment&apos; functie is, die de waarde van een bepaalde key met 1 verhoogd. Ideaal.<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">counter</span>&#xA0;=&#xA0;<span class=\"code_ident\">cache</span>.<span class=\"code_method\">Increment</span>(<span class=\"code_ident\">user</span>.<span class=\"code_ident\">Key</span>.<span class=\"code_method\">ToString</span>(<span class=\"code_string\">&quot;N&quot;</span>)&#xA0;+&#xA0;<span class=\"code_string\">&quot;.counter&quot;</span>);\n<br><span class=\"code_keyword\">if</span>&#xA0;(&#xA0;<span class=\"code_ident\">counter</span>&#xA0;&gt;&#xA0;<span class=\"code_number\">100</span>&#xA0;<span class=\"code_comment\">/*&#xA0;100&#xA0;=&#xA0;max&#xA0;requests&#xA0;/&#xA0;minuut&#xA0;*/</span>&#xA0;)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;nu?</span>\n<br>}</code></div></td></tr></table><br>\r\nWe slaan in een aparte key op wanneer we voor het laatst de counter hebben gereset:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">counter</span>&#xA0;=&#xA0;<span class=\"code_ident\">cache</span>.<span class=\"code_method\">Increment</span>(<span class=\"code_ident\">user</span>.<span class=\"code_ident\">Key</span>.<span class=\"code_method\">ToString</span>(<span class=\"code_string\">&quot;N&quot;</span>)&#xA0;+&#xA0;<span class=\"code_string\">&quot;.counter&quot;</span>);\n<br><span class=\"code_keyword\">if</span>&#xA0;(&#xA0;<span class=\"code_ident\">counter</span>&#xA0;&gt;&#xA0;<span class=\"code_ident\">user</span>.<span class=\"code_ident\">MaxNumberOfRequestsPerMinute</span>&#xA0;)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;haal&#xA0;het&#xA0;started&#xA0;object&#xA0;op,&#xA0;en&#xA0;controleer&#xA0;of&#xA0;deze&#xA0;uberhaupt&#xA0;is&#xA0;gezet</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">object</span>&#xA0;<span class=\"code_ident\">started</span>&#xA0;=&#xA0;<span class=\"code_ident\">cache</span>.<span class=\"code_method\">GetFromCache</span>(<span class=\"code_ident\">user</span>.<span class=\"code_ident\">Key</span>.<span class=\"code_method\">ToString</span>(<span class=\"code_string\">&quot;N&quot;</span>)&#xA0;+&#xA0;<span class=\"code_string\">&quot;.started&quot;</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">DateTime</span>&#xA0;<span class=\"code_ident\">startedDatetime</span>&#xA0;=&#xA0;<span class=\"code_ident\">started</span>&#xA0;==&#xA0;<span class=\"code_keyword\">null</span>&#xA0;?&#xA0;<span class=\"code_ident\">DateTime</span>.<span class=\"code_ident\">Now</span>&#xA0;:&#xA0;(<span class=\"code_ident\">DateTime</span>)<span class=\"code_ident\">started</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;is&#xA0;de&#xA0;starttijd&#xA0;minder&#xA0;dan&#xA0;een&#xA0;minuut&#xA0;geleden?</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">startedDatetime</span>&#xA0;&gt;&#xA0;<span class=\"code_ident\">DateTime</span>.<span class=\"code_ident\">Now</span>.<span class=\"code_method\">AddMinutes</span>(<span class=\"code_number\">-1</span>))\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;dan&#xA0;ben&#xA0;je&#xA0;in&#xA0;overtreding!</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">StatusCode</span>&#xA0;=&#xA0;<span class=\"code_ident\">System</span>.<span class=\"code_ident\">Net</span>.<span class=\"code_ident\">HttpStatusCode</span>.<span class=\"code_ident\">Unused</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">context</span>.<span class=\"code_ident\">StatusDescription</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;Request&#xA0;limit&#xA0;exceeded&quot;</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_keyword\">null</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">else</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;anders&#xA0;resetten&#xA0;we&#xA0;de&#xA0;teller</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">cache</span>.<span class=\"code_method\">StoreInCache</span>(<span class=\"code_ident\">user</span>.<span class=\"code_ident\">Key</span>.<span class=\"code_method\">ToString</span>(<span class=\"code_string\">&quot;N&quot;</span>)&#xA0;+&#xA0;<span class=\"code_string\">&quot;.started&quot;</span>,&#xA0;<span class=\"code_ident\">DateTime</span>.<span class=\"code_ident\">Now</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">cache</span>.<span class=\"code_method\">StoreInCache</span>(<span class=\"code_ident\">user</span>.<span class=\"code_ident\">Key</span>.<span class=\"code_method\">ToString</span>(<span class=\"code_string\">&quot;N&quot;</span>)&#xA0;+&#xA0;<span class=\"code_string\">&quot;.counter&quot;</span>,&#xA0;<span class=\"code_number\">0</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>So far...</b><br>\r\nWe hebben nu de authenticatie, het verifi&#xEB;ren van rechten en het controleren van het aantal requests met een paar regels code in weten te bakken in de service. Volgende week meer over het vertalen van Domain Entities =&gt; API Entities.",
    "nextLink": "http://glamour.tweakblogs.net/blog/5983/bouw-eens-een-api-met-wcf-deel-1.html",
    "comments": [
        {
            "author": "-RetroX-",
            "date": "vrijdag 21 januari 2011 15:40",
            "contentHtml": "Mooie uitleg maar ik mis ergens een inzicht.<br>\r\n<br>\r\nAls je een key in url stopt en deze key is verantwoordelijk voor het ophalen van de rechten... kan je dan niet met url manipulatie (key aanpassen) hengelen naar keys/users met meer rechten?<p class=\"edit\">[Reactie gewijzigd op vrijdag 21 januari 2011 15:41]</p>",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "vrijdag 21 januari 2011 15:42",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5986/bouw-eens-een-api-met-wcf-deel-2-autorisatie.html#r_80403\">-RetroX- schreef op vrijdag 21 januari 2011 @ 15:40:</a><br>\r\nMooie uitleg maar ik mis ergens een inzicht.<br>\r\n<br>\r\nAls je een key in url stopt en deze key is verantwoordelijk voor het ophalen van de rechten... kan je dan niet met url manipulatie (key aanpassen) hengelen naar keys/users met meer rechten?</div></blockquote>Ja, is een risico; is in principe altijd een risico als je met publieke keys werkt. We gebruiken GUIDs die we random genereren, dus de kans dat er &apos;per ongeluk expres&apos; een andere werkende key wordt gevonden is &lt; 0,0001 %",
            "ownReply": true
        },
        {
            "author": "Styxxy",
            "date": "vrijdag 21 januari 2011 15:45",
            "contentHtml": "De beperkingen van X aantal requests kan je toch makkelijk ergens anders afhandelen? Binnen SOA (service oriented architecture) ken ik bijvoorbeeld Apache Synapse, die zulke zaken afhandelt. Binnen jouw webservice hoef je dan eigenlijk daar niet meer rekening mee te houden (Synapse fungeert deels als firewall en mediator).<br>\r\n<br>\r\nUiteraard weet ik niet hoe dit zit voor het hele .NET met WCF verhaaltje. Misschien bestaat daar ook iets voor?",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "vrijdag 21 januari 2011 15:55",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5986/bouw-eens-een-api-met-wcf-deel-2-autorisatie.html#r_80405\">Styxxy schreef op vrijdag 21 januari 2011 @ 15:45:</a><br>\r\nDe beperkingen van X aantal requests kan je toch makkelijk ergens anders afhandelen? Binnen SOA (service oriented architecture) ken ik bijvoorbeeld Apache Synapse, die zulke zaken afhandelt. Binnen jouw webservice hoef je dan eigenlijk daar niet meer rekening mee te houden (Synapse fungeert deels als firewall en mediator).<br>\r\n<br>\r\nUiteraard weet ik niet hoe dit zit voor het hele .NET met WCF verhaaltje. Misschien bestaat daar ook iets voor?</div></blockquote>Ja, maar deze oplossing is gebruikt omdat deze makkelijk binnen onze bestaande infrastructuur ge&#xEF;ntegreerd kan worden; bovendien geen problemen met het draaien achter de loadbalancer en het up/downscalen van de servers.<br>\r\n<br>\r\nAnyhow, binnen WCF is er volgens mij nog geen standaardcomponent dat dit soort zaken kan inregelen; lijkt me overigens een vrij nuttige toevoeging aan zo&apos;n service-platform.",
            "ownReply": true
        },
        {
            "author": "tszcheetah",
            "date": "vrijdag 21 januari 2011 16:22",
            "contentHtml": "<blockquote><div class=\"quote\">Ja, is een risico; is in principe altijd een risico als je met publieke keys werkt. We gebruiken GUIDs die we random genereren, dus de kans dat er &apos;per ongeluk expres&apos; een andere werkende key wordt gevonden is &lt; 0,0001 %</div></blockquote>Totdat iemand toevallig wat verkeer voorbij ziet komen en de keys onderschept? Of gaat alles over een SSL verbinding?<br>\r\n<br>\r\nOm de key te veilig te houden kun je vrij eenvoudig extra maatregelen treffen, door ipv de key direct op te sturen de client het request te laten signeren. Is ietsje lastiger te implementeren, maar beduidend veiliger.<br>\r\n<br>\r\nAmazon&apos;s web services eisen bijvoorbeeld dat je een user id, ISO-formatted time stamp (in UTC tijdzone) en een signature meestuurt als vaste parameters. De signature is een encrypted string enkele openbare dingen (o.a. die time stamp, die dus snel veranderd), met de user key gebruikt als key bij het encrypten.<br>\r\n<br>\r\nZolang de user key dan alleen bij Amazon en de gebruiker bekend is, wordt die sleutel dus ook niet openbaar.<br>\r\n<br>\r\nZie ook <a href=\"http://docs.amazonwebservices.com/AlexaWebInfoService/1-0/RequestAuthentication.html\" rel=\"external\" title=\"http://docs.amazonwebservices.com/AlexaWebInfoService/1-0/RequestAuthentication.html\">http://docs.amazonwebserv...equestAuthentication.html</a> voor documentatie over hoe je die services van Amazon moet gebruiken <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"> Best leerzaam! Of je het toepast is natuurlijk afhankelijk van je requirements, mogelijkheden van je service, enzovoorts...",
            "ownReply": false
        },
        {
            "author": "-RetroX-",
            "date": "vrijdag 21 januari 2011 16:42",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5986/bouw-eens-een-api-met-wcf-deel-2-autorisatie.html#r_80409\">tszcheetah schreef op vrijdag 21 januari 2011 @ 16:22:</a><br>\r\n[...]<br>\r\nTotdat iemand toevallig wat verkeer voorbij ziet komen en de keys onderschept? Of gaat alles over een SSL verbinding?<br>\r\n<br>\r\nOm de key te veilig te houden kun je vrij eenvoudig extra maatregelen treffen, door ipv de key direct op te sturen de client het request te laten signeren. Is ietsje lastiger te implementeren, maar beduidend veiliger.</div></blockquote>Juist om het principe kwam mij dit wat vreemd voor. Hoewel het risico wellicht laag is is het niet ondenkbaar. Als er een veilige en relatief simpele methode is om dit risico uit te sluiten dan ben ik wel benieuwd.",
            "ownReply": false
        },
        {
            "author": "vrijdag 21 januari 2011 21:31",
            "date": "",
            "contentHtml": "De bescherming van de API van funda is niet bedoeld om gegevens geheim te houden. Daarvoor zou het beter zijn om een token te genereren op basis van bv. een username/password of met een key + timestamp (en via SSL uitwisselen). De gegevens die je via de funda API kan ophalen zijn op zichzelf niet heel geheim, maar we willen graag kunnen monitoren wie er hoeveel gebruik van maakt. Als de key van &#xE9;&#xE9;n van onze partners uitlekt, kunnen we gewoon een nieuwe key uitgeven. Per key zien wij fijne gebruiksstatistiekjes en je kan misbruik tegenhouden door het aantal requests per minuut af te knijpen. <br>\r\nVoor gebruikers van de API is het opvragen van een URL met een key erin natuurlijk veel laagdrempeliger dan het toevoegen van headers of het via crypto genereren van tokens per sessie.",
            "ownReply": false
        },
        {
            "author": "akakiwi",
            "date": "dinsdag 25 januari 2011 14:26",
            "contentHtml": "Leuk om te zien dat ik hier op nagenoeg dezelfde manier werk als jij. <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\">",
            "ownReply": false
        },
        {
            "author": "Ellos",
            "date": "zaterdag 26 februari 2011 01:20",
            "contentHtml": "Hoe heb je de cache geregeld, is dat jullie eigen asp.net outputcacheprovider, of een exposed memcached api?<br>\r\n<br>\r\nkun je misschien eens een blogpost maken waarin je dat cachen volledig uitlicht?<p class=\"edit\">[Reactie gewijzigd op zaterdag 26 februari 2011 17:10]</p>",
            "ownReply": false
        }
    ]
}