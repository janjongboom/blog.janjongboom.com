{
    "title": "Intelligente suggesties, deel 4: Aantallen, caching en Protocol Buffers",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/5853/intelligente-suggesties-deel-4-aantallen-caching-en-protocol-buffers.html",
    "date": "2010-12-30T14:57:00.000Z",
    "category": "Algoritmes",
    "views": 2851,
    "articleHtml": "Dit is deel 4 in een serie over de techniek uit een &apos;intelligente&apos; zoekbox.<ul><li><a href=\"http://glamour.tweakblogs.net/blog/5832/intelligente-suggesties-deel-1-introductie-en-startswith.html\" rel=\"external\">1. Introductie en &apos;StartsWith&apos;</a></li><li><a href=\"http://glamour.tweakblogs.net/blog/5842/intelligente-suggesties-deel-2-volledige-matching-en-typfouten.html\" rel=\"external\">2. Volledige matching en typfouten</a></li><li><a href=\"http://glamour.tweakblogs.net/blog/5849/intelligente-suggesties-deel-3-uitspraak-en-hierarchie.html\" rel=\"external\">3. Uitspraak en hierarchie</a></li><li><b>4. Aantallen, caching en Protocol Buffers</b></li></ul>We kunnen hierarchisch zoeken, spel- en typfouten verhelpen en zelfs vrij goed gokken wat een gebruiker bedoelt als we de zoekterm niet helemaal begrijpen; waardoor alleen nog de grijze getallen met aantallen openstaan.<br><a name=\"more\"></a><br>\r\n<b>Aantallen</b><br>\r\nOp funda worden verschillende soorten aanbod gefaciliteerd. Op funda.nl zijn dit er 5: koop, huur, recreatie, nieuwbouw en europe; en op fundainbusiness.nl zijn dit er zelfs acht! Omdat deze aantallen redelijk vaak veranderen willen we dit waarschijnlijk minder lang cachen dan alle gebieden en de trees. Daarom willen we de aantallen in een los object opslaan.<br>\r\n<br>\r\nAllereerst heb ik in de database een view gebakken die de data gegroepeerd ophaalt. Hierin staat bijvoorbeeld:<br>\r\n<br>data:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n</pre></td><td class=\"phphighlightcode\"><div><pre>Id        | Type    | Straat    | Buurt            | Plaats    | Gemeente    | etc.    | Aantal\r\n1        | koop    | Griftland    | Ermelo-West    | Ermelo    | Ermelo    | ...    | 2</pre></div></td></tr></table><br>\r\n<i>Ja, dit zijn flink wat records (max. het aantal straten in Nederland * (8 + 5)), maar in de praktijk is dit aantal records over de lijn trekken secondenwerk.</i><br>\r\n<br>\r\n<b>Model</b><br>\r\nIn het model willen we geen referentie naar het GebiedId hebben, omdat deze in een andere cachegroep kan leven:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br></code></td><td class=\"phphighlightcode\"><div><code>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">AantallenWrapper</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">private</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_ident\">List</span>&lt;<span class=\"code_ident\">ObjectAantalType</span>&gt;&#xA0;<span class=\"code_ident\">_legeObjectAantallen</span>&#xA0;=&#xA0;<span class=\"code_ident\">Enum</span>.<span class=\"code_method\">GetValues</span>(<span class=\"code_keyword\">typeof</span>&#xA0;(<span class=\"code_ident\">ObjectAantalType</span>)).<span class=\"code_ident\">Cast</span>&lt;<span class=\"code_ident\">ObjectAantalType</span>&gt;().<span class=\"code_method\">ToList</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">Dictionary</span>&lt;<span class=\"code_ident\">ObjectAantalType</span>,&#xA0;<span class=\"code_keyword\">int</span>&gt;&#xA0;<span class=\"code_ident\">ObjectAantallen</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_method\">AantallenWrapper</span>()\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;voeg&#xA0;alle&#xA0;&apos;objectaantaltypes&apos;&#xA0;toe,&#xA0;met&#xA0;initiele&#xA0;waarde&#xA0;&apos;0&apos;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ObjectAantallen</span>&#xA0;=&#xA0;<span class=\"code_ident\">_legeObjectAantallen</span>.<span class=\"code_method\">ToDictionary</span>(<span class=\"code_ident\">t</span>&#xA0;=&gt;&#xA0;<span class=\"code_ident\">t</span>,&#xA0;<span class=\"code_ident\">t</span>&#xA0;=&gt;&#xA0;<span class=\"code_number\">0</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;ObjectAantalType&#xA0;is&#xA0;een&#xA0;enumeration&#xA0;met&#xA0;daarin&#xA0;&apos;Koop&apos;,&#xA0;&apos;Huur&apos;,&#xA0;etc.</span></code></div></td></tr></table><br>\r\nWe cachen deze in een:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">Dictionary</span>&lt;<span class=\"code_keyword\">int</span>,&#xA0;<span class=\"code_ident\">AantallenWrapper</span>&gt;&#xA0;<span class=\"code_ident\">IxGebiedAantallen</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}</code></div></td></tr></table><br>\r\nEn vullen hem door door alle records in de tabel heen te lopen en de aantallen stuk voor stuk toe te voegen. We kunnen nu snel het aantal objecten opvragen voor gebied 1234 voor &apos;koop&apos; via:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">cnt</span>&#xA0;=&#xA0;<span class=\"code_ident\">cache</span>.<span class=\"code_ident\">IxGebiedAantallen</span>[<span class=\"code_number\">1234</span>].<span class=\"code_ident\">ObjectAantallen</span>[<span class=\"code_ident\">ObjectAantalType</span>.<span class=\"code_ident\">Koop</span>];</code></div></td></tr></table><br>\r\n<br>\r\n<b>Caching dan?</b><br>\r\nDe zoekbox die we maken gebruikt zo 200 MB aan geheugen, inclusief aantallen. Niet iets dat je voor elke website op je server in geheugen wil houden (zeker niet op een 32-bits machine). Daarom cachen we de data in <a href=\"http://msdn.microsoft.com/en-us/library/6hbbsfk6(v=VS.100).aspx\" rel=\"external\">ASP.NET cache</a>, voordeel hierover ten opzichte van memcached is dat het benaderen van data in de ASP.NET cache bijna net zo snel is als het object opvragen vanuit een static. Bij memcached zou elke keer de volledige tree naar de machine moeten worden getrokken.<br>\r\n<br>\r\nDaarnaast is het ook mogelijk om een cachegroep in een ander <a href=\"http://msdn.microsoft.com/en-us/library/system.appdomain.aspx\" rel=\"external\">AppDomain</a> te hosten dan de website zelf. Wanneer elke website dat AppDomain gebruikt om de data op te halen kunnen we de gecachete data delen over verschillende websites. Scheelt flink wat memory, daar we zowel funda, als funda in business, als onze backend van deze data gebruik willen laten maken!<br>\r\n<br>\r\n<b>Hoelang cachen?</b><br>\r\nWe maken gebruik van <a href=\"http://memcached.enyim.com/\" rel=\"external\">Enyim</a> als client-side component voor caching. Deze kan op basis van config bepaalde cachegroepen in memcached en ASP.NET draaien. Bovendien ondersteunt deze ook het na een bepaalde tijd laten expiren van je items in cache. Voor zaken die lang in cache moeten blijven gebruiken we typisch 4 uur. Na deze vier uur zijn dus al onze gebruikers de klos! Ze moeten dan minuut of twee wachten tot alle trees weer zijn opgebouwd. Daarom gebruik ik binnen mijn gecachte object een &apos;LastUpdated&apos; veld: wanneer de &apos;LastUpdated&apos; 3:50 uur geleden is starten we een async thread die alvast de data opnieuw gaat ophalen. Hierdoor hebben gebruikers geen last van een expirerende cache!<br>\r\n<br>\r\n<b>Elke vier uur; verandert die data dan wel echt?</b><br>\r\nJa en nee. De aantallen willen we wel graag elke 4 uur opnieuw ophalen, maar de geografische data verandert hoogstens elke paar maanden (wanneer we nieuwe data aangeleverd krijgen). Zonde dus dat we die BK-trees elke keer opnieuw moeten opbouwen! Vandaar dat we een extra laag caching gebruiken: het filesystem! Normaal gesproken heel eenvoudig: schrijf de cache weg door middel van <a href=\"http://msdn.microsoft.com/en-us/library/72hyey7b(VS.71).aspx\" rel=\"external\">Binary Serialization</a> naar schijf, en als de cache expiret lees je de file weer uit. Bij een nieuwe update verwijder je gewoon de file, en na een tijdje genereert het systeem zelf een nieuwe file op basis van de nieuwste data. Alleen jammer dat er zo&apos;n gigantische overhead in CPU, memory en HDD space is bij deze vorm van serialisatie!<br>\r\n<br>\r\n<b>Tijd voor...</b><br>\r\n<a href=\"http://code.google.com/p/protobuf/\" rel=\"external\">Protocol Buffers</a>! Een gestructureerd bestandsformaat van Google; juist gemaakt voor het opslaan en verzenden van grote bomen aan data. Er is ook een goede <a href=\"http://code.google.com/p/protobuf-net/\" rel=\"external\">.NET wrapper</a> gemaakt door Marc Gravell, die werkt door attributes te gebruiken.<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></td><td class=\"phphighlightcode\"><div><code>&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_ident\">ProtoContract</span>]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">GeoGebied</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_method\">GeoGebied</span>()\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">ProtoMember</span>(<span class=\"code_number\">1</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">Niveau</span>&#xA0;<span class=\"code_ident\">Niveau</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">ProtoMember</span>(<span class=\"code_number\">2</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">Naam</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">ProtoMember</span>(<span class=\"code_number\">3</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">string</span>[]&#xA0;<span class=\"code_ident\">Keys</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">ProtoMember</span>(<span class=\"code_number\">4</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">Id</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">ProtoMember</span>(<span class=\"code_number\">5</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">Parent</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;dit&#xA0;is&#xA0;de&#xA0;magic!</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">using</span>(<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">fs</span>&#xA0;=&#xA0;<span class=\"code_ident\">File</span>.<span class=\"code_method\">Create</span>(@<span class=\"code_string\">&quot;C:\\ergensopschijf.jan&quot;</span>))&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Serializer</span>.<span class=\"code_method\">Serialize</span>(<span class=\"code_ident\">fs</span>,&#xA0;<span class=\"code_ident\">obj</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}</code></div></td></tr></table><br>\r\nIn ons geval scheelde dit 60% aan HDD ruimte (op de gehele cache), was dit met serializen ruwweg 2 keer zo snel, en memory Infinite times omdat .NET de tree niet terug kon serializen zonder OutOfMemory te raken. Awesomeness (om met E.B. te spreken)!<br>\r\n<br>\r\n<b>Lijsten serializen</b><br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br></code></td><td class=\"phphighlightcode\"><div><code>[<span class=\"code_method\">ProtoMember</span>(<span class=\"code_number\">1</span>)]\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">List</span>&lt;<span class=\"code_ident\">GeoGebied</span>&gt;&#xA0;<span class=\"code_ident\">EenLijst</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;<span class=\"code_ident\">set</span>;}</code></div></td></tr></table><br>\r\nBij het serializen van bovenstaande code wordt &#xE9;lk item in die lijst ook geserialized. Wanneer je vijf lijsten hebt met steeds dezelfde objecten scheelt dat veel ruimte op HDD en (na deserializen) veel memory! Daarom wilde ik alleen de ID&apos;s van de gebieden opslaan. Die kan ik dan runtime weer terugzoeken. Dit is niet triviaal, maar met een kleine hack vrij snel te fixen:<br>\r\n<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br></code></td><td class=\"phphighlightcode\"><div><code>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;dit&#xA0;is&#xA0;de&#xA0;definitie&#xA0;van&#xA0;de&#xA0;BkTreeNode&#xA0;uit&#xA0;de&#xA0;vorige&#xA0;post</span>\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_ident\">ProtoContract</span>]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">BkTreeNode</span>&lt;<span class=\"code_ident\">T</span>&gt;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">where</span>&#xA0;<span class=\"code_ident\">T</span>&#xA0;:&#xA0;<span class=\"code_keyword\">class</span>,&#xA0;<span class=\"code_ident\">IZoekboxItem</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">ProtoMember</span>(<span class=\"code_number\">1</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">Key</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">ProtoMember</span>(<span class=\"code_number\">2</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">Dictionary</span>&lt;<span class=\"code_keyword\">int</span>,&#xA0;<span class=\"code_ident\">BkTreeNode</span>&lt;<span class=\"code_ident\">T</span>&gt;&gt;&#xA0;<span class=\"code_ident\">Nodes</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">ProtoMember</span>(<span class=\"code_number\">4</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;bij&#xA0;de&#xA0;eerste&#xA0;aanroep&#xA0;moet&#xA0;deze&#xA0;NULL&#xA0;teruggeven&#xA0;anders&#xA0;lukt&#xA0;deserialisatie&#xA0;niet!</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">internal</span>&#xA0;<span class=\"code_ident\">List</span>&lt;<span class=\"code_keyword\">int</span>&gt;&#xA0;<span class=\"code_ident\">ProtoItems</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">get</span>&#xA0;{&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">Items</span>.<span class=\"code_ident\">Count</span>&#xA0;==&#xA0;<span class=\"code_number\">0</span>&#xA0;?&#xA0;<span class=\"code_keyword\">null</span>&#xA0;:&#xA0;<span class=\"code_ident\">Items</span>.<span class=\"code_method\">Select</span>(<span class=\"code_ident\">i</span>&#xA0;=&gt;&#xA0;<span class=\"code_ident\">i</span>.<span class=\"code_ident\">Id</span>).<span class=\"code_method\">ToList</span>();&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">set</span>&#xA0;{&#xA0;<span class=\"code_ident\">_protoList</span>&#xA0;=&#xA0;<span class=\"code_ident\">value</span>;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">private</span>&#xA0;<span class=\"code_ident\">List</span>&lt;<span class=\"code_keyword\">int</span>&gt;&#xA0;<span class=\"code_ident\">_protoList</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">private</span>&#xA0;<span class=\"code_ident\">List</span>&lt;<span class=\"code_ident\">IZoekboxItem</span>&gt;&#xA0;<span class=\"code_ident\">_items</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">private</span>&#xA0;<span class=\"code_ident\">List</span>&lt;<span class=\"code_ident\">IZoekboxItem</span>&gt;&#xA0;<span class=\"code_ident\">Items</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">get</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">_items</span>.<span class=\"code_ident\">Count</span>&#xA0;==&#xA0;<span class=\"code_number\">0</span>&#xA0;&amp;&amp;&#xA0;<span class=\"code_ident\">_protoList</span>&#xA0;!=&#xA0;<span class=\"code_keyword\">null</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;hier&#xA0;terugmappen.&#xA0;Je&#xA0;eigen&#xA0;implementatie&#xA0;zal&#xA0;er&#xA0;anders&#xA0;uitzien</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">_items</span>&#xA0;=&#xA0;<span class=\"code_ident\">_protoList</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.<span class=\"code_method\">Select</span>(<span class=\"code_ident\">i</span>&#xA0;=&gt;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ZoekboxController</span>.<span class=\"code_ident\">LongCache</span>.<span class=\"code_ident\">IxGebiedId</span>.<span class=\"code_method\">ContainsKey</span>(<span class=\"code_ident\">i</span>)&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;?&#xA0;(<span class=\"code_ident\">IZoekboxItem</span>)<span class=\"code_ident\">ZoekboxController</span>.<span class=\"code_ident\">LongCache</span>.<span class=\"code_ident\">IxGebiedId</span>[<span class=\"code_ident\">i</span>].<span class=\"code_method\">First</span>()\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;:&#xA0;<span class=\"code_keyword\">null</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.<span class=\"code_method\">Where</span>(<span class=\"code_ident\">i</span>=&gt;&#xA0;<span class=\"code_ident\">i</span>&#xA0;!=&#xA0;<span class=\"code_keyword\">null</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.<span class=\"code_method\">ToList</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">_protoList</span>&#xA0;=&#xA0;<span class=\"code_keyword\">null</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">_items</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">set</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">_items</span>&#xA0;=&#xA0;<span class=\"code_ident\">value</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">///&#xA0;&lt;summary&gt;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">///&#xA0;Don&apos;t&#xA0;use,&#xA0;needed&#xA0;for&#xA0;serialization</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">///&#xA0;&lt;/summary&gt;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_method\">BkTreeNode</span>()\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Nodes</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">Dictionary</span>&lt;<span class=\"code_keyword\">int</span>,&#xA0;<span class=\"code_ident\">BkTreeNode</span>&lt;<span class=\"code_ident\">T</span>&gt;&gt;();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ProtoItems</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">List</span>&lt;<span class=\"code_keyword\">int</span>&gt;();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Items</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">List</span>&lt;<span class=\"code_ident\">IZoekboxItem</span>&gt;();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_method\">BkTreeNode</span>(<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">s</span>,&#xA0;<span class=\"code_ident\">T</span>&#xA0;<span class=\"code_ident\">item</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">/*&#xA0;default&#xA0;ctor&#xA0;*/</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">void</span>&#xA0;<span class=\"code_method\">Add</span>(<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">s</span>,&#xA0;<span class=\"code_ident\">T</span>&#xA0;<span class=\"code_ident\">item</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">/*&#xA0;...&#xA0;*/</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">List</span>&lt;<span class=\"code_ident\">T</span>&gt;&#xA0;<span class=\"code_method\">Query</span>(<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">searchTerm</span>,&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">maxDistance</span>,&#xA0;<span class=\"code_keyword\">ref</span>&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">hits</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">/*&#xA0;...&#xA0;*/</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}</code></div></td></tr></table><br>\r\n<br>\r\nWerking is dus hetzelfde gebleven, maar tijdens (de)serializen wordt alleen het ID opgeslagen <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"> .<br>\r\n<br>\r\n<b>Morgen</b><br>\r\nOud-en-nieuw. Serie is afgelopen. In het volgende jaar weer met goede moed helemaal los op een nieuw project! Als ik een publiek beschikbare demo heb zal ik de link posten.",
    "nextLink": "http://glamour.tweakblogs.net/blog/5849/intelligente-suggesties-deel-3-uitspraak-en-hierarchie.html",
    "comments": [
        {
            "author": "ACM",
            "date": "donderdag 30 december 2010 16:26",
            "contentHtml": "Ik begrijp je cachingverhaal eigenlijk niet zo goed, althans, vooral de nu gemaakte keuzes niet. Dat je je tellertjes en BK-tree (los?) in een gedeeld geheugen plaatst is uiteraard logisch.<br>\r\n<br>\r\nMaar waarom zou die BK-tree naar disk opgeslagen moeten worden? Dat opbouwen doe je toch niet zo vaak? Ik mag toch hopen dat je die BK-tree in (gedeeld) ram-geheugen houdt, of niet? En dan blijft het opstarten over, daarvan boeit het toch niet dat het wat langer duurt?<br>\r\n<br>\r\nOm onze eigen productomgeving er maar bij te pakken; het is compleet onafhankelijk van de disk. Zodra het gestart wordt wordt alle productdata ingelezen en in diverse structuren in het ram-geheugen opgeslagen (kost zo&apos;n 40 seconden) en vanaf dan wordt de boel adhv berichten op een publish/subscribe messaging systeem (een jms topic) on-demand bijgewerkt. Voor de zekerheid gebeurt het opbouwen ook compleet opnieuw elke paar uur (afhankelijk van de precieze dataset tussen de 6 en de 24 bij mij), maar aangezien dat herladen allemaal op de achtergrond gebeurt merkt niemand dat.<br>\r\nZelfs als de data minder vaak zou veranderen en ik elk uur de applicatie zou herstarten zou ik niet gauw de boel naar disk proberen te schrijven om zo de opstarttijd te halveren.<br>\r\n<br>\r\nDaarbij moet wel gezegd worden dat ik hier het voordeel heb dat het losse omgevingen zijn, waardoor de webservers uit kunnen wijken naar een niet-lokale versie als die even niet (snel genoeg) reageert <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"><p class=\"edit\">[Reactie gewijzigd op donderdag 30 december 2010 16:28]</p>",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "maandag 03 januari 2011 09:07",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5853/intelligente-suggesties-deel-4-aantallen-caching-en-protocol-buffers.html#r_78409\">ACM schreef op donderdag 30 december 2010 @ 16:26:</a><br>\r\nMaar waarom zou die BK-tree naar disk opgeslagen moeten worden? Dat opbouwen doe je toch niet zo vaak? Ik mag toch hopen dat je die BK-tree in (gedeeld) ram-geheugen houdt, of niet? En dan blijft het opstarten over, daarvan boeit het toch niet dat het wat langer duurt?</div></blockquote>Dat boeit in dit geval wel; opnieuw opbouwen kost me zo&apos;n drie minuten; en van disk laden zo&apos;n 15 seconden. Na elke release is er een AppPool reset en dus duurt het opnieuw in de loadbalancer brengen van de server 3 minuten langer. Bovendien trekt het opbouwen van de cache een server makkelijk voor 2 cores vol; ook niet iets wat je zo vaak wil hebben op productie.<blockquote><div class=\"quote\">Om onze eigen productomgeving er maar bij te pakken; het is compleet onafhankelijk van de disk. Zodra het gestart wordt wordt alle productdata ingelezen en in diverse structuren in het ram-geheugen opgeslagen (kost zo&apos;n 40 seconden) en vanaf dan wordt de boel adhv berichten op een publish/subscribe messaging systeem (een jms topic) on-demand bijgewerkt. Voor de zekerheid gebeurt het opbouwen ook compleet opnieuw elke paar uur (afhankelijk van de precieze dataset tussen de 6 en de 24 bij mij), maar aangezien dat herladen allemaal op de achtergrond gebeurt merkt niemand dat.<br>\r\nZelfs als de data minder vaak zou veranderen en ik elk uur de applicatie zou herstarten zou ik niet gauw de boel naar disk proberen te schrijven om zo de opstarttijd te halveren.<br>\r\n<br>\r\nDaarbij moet wel gezegd worden dat ik hier het voordeel heb dat het losse omgevingen zijn, waardoor de webservers uit kunnen wijken naar een niet-lokale versie als die even niet (snel genoeg) reageert <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"></div></blockquote>Dit is voor ons een nieuwe situatie: normale data is altijd snel genoeg om op te bouwen wanneer de gebruiker dit vraagt en wordt daarna opgeslagen in memcached of ASP.NET Cache. Voor grotere sets die we willen aggregeren etc. verwerken we dit via een ESB naar een gewone database. De data uit deze database wordt vervolgens opgeslagen in memcached wanneer iemand erom vraagt. Nooit de gehele set maar altijd het resultaat van de query. In principe hetzelfde model als jullie gebruiken alleen met MSSQL als persistant datastore ertussen. De dataset die we nu hebben is alleen niet effici&#xEB;nt genoeg op te slaan in een relationele database, dus vandaar deze tussenweg. Zie het filesystem dus eigenlijk als een vervanging van onze database. We zouden hem daar evt. als blob in kunnen opslaan, dan is de werking helemaal gelijk.",
            "ownReply": true
        }
    ]
}