{
    "title": "Validatie zoals UX het wil, met ASP.NET MVC 2",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/6329/validatie-zoals-ux-het-wil-met-asp-punt-net-mvc-2.html",
    "date": "2011-03-29T12:23:00.000Z",
    "category": "Frontend",
    "views": 4443,
    "articleHtml": "De standaard validatie in MVC 2 gaat er vanuit dat je werkt met &apos;Validation messages&apos; achter je tekstvelden, en een &apos;Validation summary&apos; bovenaan je scherm. Dit werkt snel en out-of-the box, inclusief javascript validatie via jQuery Validate, en ook server side wanneer er geen javascript beschikbaar is (pic <a href=\"http://rajsoftware.wordpress.com/2010/05/09/mvc2-validation-step-by-step/\" rel=\"external\">via</a>).<br>\r\n<img src=\"http://100procentjan.nl/tweakers/validationsummary.jpg\" title=\"http://100procentjan.nl/tweakers/validationsummary.jpg\" alt=\"http://100procentjan.nl/tweakers/validationsummary.jpg\"><br>\r\nMaar... wat als je UX-afdeling dit spuuglelijk vindt? Vandaar dat we bovenstaande gaan transformeren naar:<br>\r\n<img src=\"http://100procentjan.nl/tweakers/validationnew.png\" title=\"http://100procentjan.nl/tweakers/validationnew.png\" alt=\"http://100procentjan.nl/tweakers/validationnew.png\"><br><a name=\"more\"></a><br>\r\n<b>Zo veel mogelijk standaard</b><br>\r\nOm ervoor te zorgen dat we zo min mogelijk werk doen, conformeren we aan het model dat MVC afdwingt met annotations op je velden:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br></code></td><td class=\"phphighlightcode\"><div><code>&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">Required</span>(<span class=\"code_ident\">ErrorMessage</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;\\&quot;Naam\\&quot;&#xA0;is&#xA0;verplicht&#xA0;maar&#xA0;niet&#xA0;ingevoerd&quot;</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;[<span class=\"code_method\">DisplayName</span>(<span class=\"code_string\">&quot;Naam&quot;</span>)]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">Naam</span>&#xA0;{&#xA0;<span class=\"code_ident\">get</span>;&#xA0;<span class=\"code_ident\">set</span>;&#xA0;}</code></div></td></tr></table><br>\r\nWanneer we nu in de view hier een textbox voor tekenen krijgen we er extra gratis validatie bij:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br></code></td><td class=\"phphighlightcode\"><div><code>&lt;%=&#xA0;<span class=\"code_ident\">Html</span>.<span class=\"code_method\">TextBoxFor</span>(<span class=\"code_ident\">m</span>&#xA0;=&gt;&#xA0;<span class=\"code_ident\">m</span>.<span class=\"code_ident\">Naam</span>)&#xA0;%&gt;</code></div></td></tr></table><br>\r\nPunt is alleen dat onze classes voor niet geldige velden <b>niet</b> op de textbox zitten maar op een veld eromheen:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></td><td class=\"phphighlightcode\"><div><code>&lt;!--&#xA0;<span class=\"code_ident\">valide</span>&#xA0;<span class=\"code_ident\">veld</span>&#xA0;--&gt;\n<br>&lt;<span class=\"code_ident\">span</span>&#xA0;<span class=\"code_keyword\">class</span>=<span class=\"code_string\">&quot;input-wrap&quot;</span>&gt;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&lt;<span class=\"code_ident\">input</span>&#xA0;<span class=\"code_ident\">type</span>=<span class=\"code_string\">&quot;text&quot;</span>&#xA0;/&gt;\n<br>&lt;/<span class=\"code_ident\">span</span>&gt;\n<br>\n<br>&lt;!--&#xA0;<span class=\"code_ident\">niet</span>&#xA0;<span class=\"code_ident\">valide</span>&#xA0;<span class=\"code_ident\">veld</span>&#xA0;--&gt;\n<br>&lt;<span class=\"code_ident\">span</span>&#xA0;<span class=\"code_keyword\">class</span>=<span class=\"code_string\">&quot;input-wrap&#xA0;input-error&quot;</span>&gt;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&lt;<span class=\"code_ident\">input</span>&#xA0;<span class=\"code_ident\">type</span>=<span class=\"code_string\">&quot;text&quot;</span>&#xA0;/&gt;\n<br>&lt;/<span class=\"code_ident\">span</span>&gt;</code></div></td></tr></table><br>\r\n<br>\r\n<b>HTML Helper voor de wrapper</b><br>\r\nDe wrapper om het veld heen kunnen we uiteraard ook genereren, en daarbij meteen de metadata over de correctheid van het veld meenemen. Dat kan door middel van iets als:<br>\r\n<br>ASP:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n</pre></td><td class=\"phphighlightcode\"><div><pre>&lt;%= Html.WrapperFor (m =&gt; m.Naam) %&gt;\r\n    &lt;%= Html.TextBoxFor (m =&gt; m.Naam %&gt;\r\n&lt;%= Html.EndWrapper %&gt;</pre></div></td></tr></table><br>\r\nMaar dat is vrij foutgevoelig! Tijd voor een trucje met &apos;IDisposable&apos;:<br>\r\n<br>ASP:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n</pre></td><td class=\"phphighlightcode\"><div><pre>&lt;% using (Html.BeginInputWrapperFor (m =&gt; m.Naam)) { %&gt;\r\n    &lt;%= Html.TextBoxFor (m =&gt; m.Naam %&gt;\r\n&lt;% }</pre></div></td></tr></table><br>\r\nWe kunnen nu in de constructor van het wrapper element de begin tag schrijven, en in de &apos;Dispose&apos; de eindtag.<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">HtmlHelperExtender</span>\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_ident\">MvcInputWrapper</span>&#xA0;<span class=\"code_ident\">BeginInputWrapperFor</span>&lt;<span class=\"code_ident\">TModel</span>,&#xA0;<span class=\"code_ident\">TProperty</span>&gt;(<span class=\"code_keyword\">this</span>&#xA0;<span class=\"code_ident\">HtmlHelper</span>&lt;<span class=\"code_ident\">TModel</span>&gt;&#xA0;<span class=\"code_ident\">htmlHelper</span>,&#xA0;<span class=\"code_ident\">Expression</span>&lt;<span class=\"code_ident\">Func</span>&lt;<span class=\"code_ident\">TModel</span>,&#xA0;<span class=\"code_ident\">TProperty</span>&gt;&gt;&#xA0;<span class=\"code_ident\">expression</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;al&#xA0;deze&#xA0;metadata&#xA0;helpers&#xA0;zitten&#xA0;standaard&#xA0;in&#xA0;MVC!</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">MvcInputWrapper</span>(<span class=\"code_ident\">htmlHelper</span>,&#xA0;<span class=\"code_ident\">ModelMetadata</span>.<span class=\"code_ident\">FromLambdaExpression</span>&lt;<span class=\"code_ident\">TModel</span>,&#xA0;<span class=\"code_ident\">TProperty</span>&gt;(<span class=\"code_ident\">expression</span>,&#xA0;<span class=\"code_ident\">htmlHelper</span>.<span class=\"code_ident\">ViewData</span>),&#xA0;<span class=\"code_ident\">ExpressionHelper</span>.<span class=\"code_method\">GetExpressionText</span>(<span class=\"code_ident\">expression</span>));\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}\n<br>\n<br><span class=\"code_comment\">//&#xA0;class&#xA0;zelf</span>\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">MvcInputWrapper</span>&#xA0;:&#xA0;<span class=\"code_ident\">IDisposable</span>\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;cache&#xA0;tagbuilder&#xA0;en&#xA0;textwriter</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">private</span>&#xA0;<span class=\"code_keyword\">readonly</span>&#xA0;<span class=\"code_ident\">TagBuilder</span>&#xA0;<span class=\"code_ident\">_builder</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">private</span>&#xA0;<span class=\"code_keyword\">readonly</span>&#xA0;<span class=\"code_ident\">TextWriter</span>&#xA0;<span class=\"code_ident\">_writer</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;ctor</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_method\">MvcInputWrapper</span>(<span class=\"code_ident\">HtmlHelper</span>&#xA0;<span class=\"code_ident\">htmlHelper</span>,&#xA0;<span class=\"code_ident\">ModelMetadata</span>&#xA0;<span class=\"code_ident\">modelMetadata</span>,&#xA0;<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">expression</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;controleer&#xA0;of&#xA0;het&#xA0;veld&#xA0;valide&#xA0;is</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ModelState</span>&#xA0;<span class=\"code_ident\">state</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">bool</span>&#xA0;<span class=\"code_ident\">isValid</span>&#xA0;=&#xA0;<span class=\"code_keyword\">true</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">fullHtmlFieldName</span>&#xA0;=&#xA0;<span class=\"code_ident\">htmlHelper</span>.<span class=\"code_ident\">ViewContext</span>.<span class=\"code_ident\">ViewData</span>.<span class=\"code_ident\">TemplateInfo</span>.<span class=\"code_method\">GetFullHtmlFieldName</span>(<span class=\"code_ident\">expression</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">htmlHelper</span>.<span class=\"code_ident\">ViewData</span>.<span class=\"code_ident\">ModelState</span>.<span class=\"code_method\">TryGetValue</span>(<span class=\"code_ident\">fullHtmlFieldName</span>,&#xA0;<span class=\"code_keyword\">out</span>&#xA0;<span class=\"code_ident\">state</span>)&#xA0;&amp;&amp;&#xA0;(<span class=\"code_ident\">state</span>.<span class=\"code_ident\">Errors</span>.<span class=\"code_ident\">Count</span>&#xA0;&gt;&#xA0;<span class=\"code_number\">0</span>))\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">isValid</span>&#xA0;=&#xA0;<span class=\"code_keyword\">false</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;cache&#xA0;de&#xA0;writer</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">_writer</span>&#xA0;=&#xA0;<span class=\"code_ident\">htmlHelper</span>.<span class=\"code_ident\">ViewContext</span>.<span class=\"code_ident\">Writer</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;maak&#xA0;een&#xA0;tagbuilder&#xA0;aan</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">_builder</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">TagBuilder</span>(<span class=\"code_string\">&quot;span&quot;</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">_builder</span>.<span class=\"code_method\">AddCssClass</span>(<span class=\"code_string\">&quot;input-wrap&quot;</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;als&#xA0;niet&#xA0;valid?&#xA0;voeg&#xA0;de&#xA0;error&#xA0;class&#xA0;toe</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>(!<span class=\"code_ident\">isValid</span>)&#xA0;<span class=\"code_ident\">_builder</span>.<span class=\"code_method\">AddCssClass</span>(<span class=\"code_string\">&quot;input-error&quot;</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;schrijf&#xA0;begin&#xA0;tag</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">_writer</span>.<span class=\"code_method\">Write</span>(<span class=\"code_ident\">_builder</span>.<span class=\"code_method\">ToString</span>(<span class=\"code_ident\">TagRenderMode</span>.<span class=\"code_ident\">StartTag</span>));\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">void</span>&#xA0;<span class=\"code_method\">Dispose</span>()\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;schrijf&#xA0;eind&#xA0;tag</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">_writer</span>.<span class=\"code_method\">Write</span>(<span class=\"code_ident\">_builder</span>.<span class=\"code_method\">ToString</span>(<span class=\"code_ident\">TagRenderMode</span>.<span class=\"code_ident\">EndTag</span>));\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Validation summary</b><br>\r\nBovenaan moet ook nog een validation summary komen te staan. Ook hier kunnen we weer handig gebruik maken van de ModelState functies die beschikbaar zijn in de HtmlHelpers:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_comment\">//&#xA0;in&#xA0;je&#xA0;view</span>\n<br><span class=\"code_comment\">//&#xA0;&lt;%=&#xA0;Html.ValidationSummaryFunda&#xA0;%&gt;</span>\n<br>\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_keyword\">string</span>&#xA0;<span class=\"code_ident\">ValidationSummaryFunda</span>&lt;<span class=\"code_ident\">TModel</span>&gt;(<span class=\"code_keyword\">this</span>&#xA0;<span class=\"code_ident\">HtmlHelper</span>&lt;<span class=\"code_ident\">TModel</span>&gt;&#xA0;<span class=\"code_ident\">htmlHelper</span>)\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;zet&#xA0;client&#xA0;validation&#xA0;aan,&#xA0;zodat&#xA0;we&#xA0;dat&#xA0;niet&#xA0;handmatig&#xA0;hoeven&#xA0;te&#xA0;doen</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">htmlHelper</span>.<span class=\"code_method\">EnableClientValidation</span>();\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">modelState</span>&#xA0;=&#xA0;<span class=\"code_ident\">htmlHelper</span>.<span class=\"code_ident\">ViewData</span>.<span class=\"code_ident\">ModelState</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;als&#xA0;het&#xA0;model&#xA0;valid&#xA0;is,&#xA0;dan&#xA0;sowieso&#xA0;return&#xA0;&quot;&quot;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">modelState</span>.<span class=\"code_ident\">IsValid</span>)&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_string\">&quot;&quot;</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;pak&#xA0;alle&#xA0;error&#xA0;messages</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">errorMessages</span>&#xA0;=&#xA0;<span class=\"code_ident\">modelState</span>.<span class=\"code_ident\">Values</span>.<span class=\"code_method\">Where</span>(<span class=\"code_ident\">v</span>&#xA0;=&gt;&#xA0;<span class=\"code_ident\">v</span>.<span class=\"code_ident\">Errors</span>.<span class=\"code_method\">Any</span>()).<span class=\"code_method\">SelectMany</span>(<span class=\"code_ident\">v</span>&#xA0;=&gt;&#xA0;<span class=\"code_ident\">v</span>.<span class=\"code_ident\">Errors</span>).<span class=\"code_method\">Select</span>(<span class=\"code_ident\">v</span>=&gt;<span class=\"code_ident\">v</span>.<span class=\"code_ident\">ErrorMessage</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;bepaal&#xA0;aan&#xA0;de&#xA0;hand&#xA0;van&#xA0;het&#xA0;aantal&#xA0;messages&#xA0;de&#xA0;uiteindelijke&#xA0;foutmelding</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">MvcHtmlString</span>&#xA0;<span class=\"code_ident\">errorString</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>(<span class=\"code_ident\">errorMessages</span>.<span class=\"code_method\">Count</span>()&#xA0;==&#xA0;<span class=\"code_number\">1</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">errorString</span>&#xA0;=&#xA0;<span class=\"code_ident\">MvcHtmlString</span>.<span class=\"code_method\">Create</span>(<span class=\"code_keyword\">string</span>.<span class=\"code_method\">Format</span>(<span class=\"code_string\">&quot;&lt;strong&gt;{0}.&lt;/strong&gt;&#xA0;Vul&#xA0;het&#xA0;rode&#xA0;veld&#xA0;aan.&quot;</span>,&#xA0;<span class=\"code_ident\">errorMessages</span>.<span class=\"code_method\">First</span>()));\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">else</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">errorString</span>&#xA0;=&#xA0;<span class=\"code_ident\">MvcHtmlString</span>.<span class=\"code_method\">Create</span>(<span class=\"code_string\">&quot;&lt;strong&gt;Meerdere&#xA0;velden&#xA0;zijn&#xA0;niet&#xA0;correct&#xA0;ingevoerd.&lt;/strong&gt;&#xA0;Vul&#xA0;de&#xA0;rode&#xA0;velden&#xA0;aan.&quot;</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;bouw&#xA0;de&#xA0;tag</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">builder</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">TagBuilder</span>(<span class=\"code_string\">&quot;p&quot;</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">builder</span>.<span class=\"code_method\">AddCssClass</span>(<span class=\"code_string\">&quot;notify-error&quot;</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">builder</span>.<span class=\"code_ident\">InnerHtml</span>&#xA0;=&#xA0;<span class=\"code_ident\">errorString</span>.<span class=\"code_method\">ToString</span>();\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;render</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">builder</span>.<span class=\"code_method\">ToString</span>(<span class=\"code_ident\">TagRenderMode</span>.<span class=\"code_ident\">Normal</span>);\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Validatie in de controller</b><br>\r\nOm te zorgen dat de error-messages ook daadwerkelijk te zien worden wanneer je submit zal je nog een check moeten toevoegen in je action:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></td><td class=\"phphighlightcode\"><div><code>[<span class=\"code_ident\">HttpGet</span>]\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">ViewResult</span>&#xA0;<span class=\"code_method\">Contact</span>(<span class=\"code_ident\">SoortAanbod</span>&#xA0;<span class=\"code_ident\">aanbod</span>,&#xA0;<span class=\"code_ident\">ObjectdetailPagina</span>&#xA0;<span class=\"code_ident\">tab</span>,&#xA0;<span class=\"code_keyword\">long</span>&#xA0;<span class=\"code_ident\">id</span>)\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;dit&#xA0;is&#xA0;de&#xA0;GET&#xA0;logica&#xA0;om&#xA0;het&#xA0;formulier&#xA0;te&#xA0;tonen</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">model</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">ObjectsClient</span>().<span class=\"code_method\">GetContact</span>(<span class=\"code_ident\">aanbod</span>,&#xA0;<span class=\"code_ident\">tab</span>,&#xA0;<span class=\"code_ident\">id</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_method\">View</span>(<span class=\"code_ident\">Enum</span>.<span class=\"code_method\">GetName</span>(<span class=\"code_ident\">tab</span>.<span class=\"code_method\">GetType</span>(),&#xA0;<span class=\"code_ident\">tab</span>),&#xA0;<span class=\"code_ident\">model</span>);\n<br>}\n<br>\n<br>[<span class=\"code_ident\">HttpPost</span>]\n<br><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">ActionResult</span>&#xA0;<span class=\"code_method\">Contact</span>(<span class=\"code_ident\">SoortAanbod</span>&#xA0;<span class=\"code_ident\">aanbod</span>,&#xA0;<span class=\"code_ident\">ObjectdetailPagina</span>&#xA0;<span class=\"code_ident\">tab</span>,&#xA0;<span class=\"code_keyword\">long</span>&#xA0;<span class=\"code_ident\">id</span>,&#xA0;<span class=\"code_ident\">ObjectContactModel</span>&#xA0;<span class=\"code_ident\">model</span>)\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;na&#xA0;POST</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;als&#xA0;modelstate&#xA0;niet&#xA0;valid</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(!<span class=\"code_ident\">ModelState</span>.<span class=\"code_ident\">IsValid</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;doe&#xA0;de&#xA0;GET&#xA0;actie.&#xA0;ModelState&#xA0;blijft&#xA0;hier&#xA0;geldig,&#xA0;dus&#xA0;je&#xA0;raakt&#xA0;je&#xA0;validatie-info&#xA0;niet&#xA0;kwijt</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_method\">Contact</span>(<span class=\"code_ident\">aanbod</span>,&#xA0;<span class=\"code_ident\">tab</span>,&#xA0;<span class=\"code_ident\">id</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;handel&#xA0;normaal&#xA0;af</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">url</span>&#xA0;=&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">ObjectsClient</span>().<span class=\"code_method\">SaveContact</span>(<span class=\"code_ident\">id</span>,&#xA0;<span class=\"code_ident\">model</span>,&#xA0;<span class=\"code_ident\">tab</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_method\">Redirect</span>(<span class=\"code_ident\">url</span>);\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Client side validatie</b><br>\r\nDit werkt prima, maar alleen server-side. Voor client-side validatie laat ik de volgende keer zien hoe je eenvoudig ASP.NET MVC 2 kan koppelen aan een (eigen) validatie-framework in javascript.",
    "nextLink": "http://glamour.tweakblogs.net/blog/6301/api-documentatie-genereren-uit-code.html",
    "comments": [
        {
            "author": "mithras",
            "date": "dinsdag 29 maart 2011 15:05",
            "contentHtml": "Ik heb geen verstand van C# en ASP, dus kan daar niet op reageren. Wel op de screenshot van &quot;hoe het moet&quot; van je (fictieve?) UX department.<br>\r\n<br>\r\n1) Er is een slechte (praktisch geen, alleen de rode kleur in het algemeen) koppeling van de melding en het veld. Wat als je meerdere fout ingevulde fouten hebt?<br>\r\n2) De melding is onduidelijk en niet volledig. Wat is er fout? Hoe moet het wel? Wat betekent &quot;niet correct&quot;? Is een apenstaartje een verboden karakter, heb ik iets teveel of iets te weinig ingevuld?<br>\r\n<br>\r\nAls voorbeeld zie ik eerder een ontwerp van foutmeldingen zoals UX Movement het presenteert in <a href=\"http://uxmovement.com/forms/why-long-forms-need-to-use-instant-validation\" rel=\"external\">Why Long Forms Need to Use Instant Validation</a>. Het gaat mij niet zozeer om de instant validation, maar op de manier waarop een gebruiker te zien krijgt dat een input fout is ingevuld <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\">",
            "ownReply": false
        },
        {
            "author": "Keeper",
            "date": "dinsdag 29 maart 2011 15:33",
            "contentHtml": "Technisch interessant, maar wel een vreemde redenering van je UX-team. Een UX-team moet m.i. ook helemaal niet kijken of iets mooi is of niet, maar of het gebruikersvriendelijk is.<br>\r\n<br>\r\nIk weet niet of dit een fictieve case is, maar volgens mij is de (locatie van de) originele melding een stuk duidelijker dan de door het UX-team gewenste oplossing. De tekst kan sowieso wel beter (zie vorige reactie), maar de samenvatting melding bovenaan is nu wel erg veel een spelletje ipv een nuttige melding.<br>\r\n<br>\r\nWat inderdaad als er meerdere velden fout zijn, of zie je er altijd maar eentje? Wat als ik kleurenblind ben (dan zie ik geen rood veld, wel een grijze), wat als het rode veld zich niet op mijn scherm bevindt (bij een lang formulier)? Dat wordt in het originele voorbeeld ook niet helemaal afgevangen, maar de koppeling tussen verkeerd veld en foutmelding is dan wel een stuk duidelijker.",
            "ownReply": false
        },
        {
            "author": "Jeroen Mulder",
            "date": "dinsdag 29 maart 2011 17:29",
            "contentHtml": "@mithras en @Keeper, jullie hebben allebei gelijk als het om een volledige site als funda.nl zou gaan. Echter, het gaat hier om de nieuwe funda website voor mobile devices gericht op gebruikers van moderne smartphones. Het gebrek aan screen real estate en een ander soort interactie op mobile devices beperkt je in het toepassen van alle mooie IxD patterns die we normaal kennen. Leek me leuk (en Jan vroeg er om) om vanuit mijn oogpunt te reageren op jullie opmerkingen te plaatsen, dus vandaar hieronder...<br>\r\n<br>\r\nInstant validation zou kunnen, maar instant validation wordt alleen aangeraden n&#xE1;dat het invoerproces voltooid is en niet tijdens. In technische termen, &apos;onblur&apos; van het tekstveld en niet &apos;onkeyup&apos; (of whatever). Dan loop je meteen tegen het probleem aan dat mobile devices met virtuele toetsenborden bij focus van een tekstveld altijd het gefocusde aan de bovenzijde van de viewport positioneren (om ruimte te cre&#xEB;ren voor het toetsenbord). Het gevolg is dat bij een verticale layout van je formulier het voorgaande element (tekstveld in dit geval) gevalideerd is maar wel buiten beeld staat. Resultaat is dat het niet zo nuttig is. <br>\r\n<br>\r\nNormaal gesproken wordt een voorbeeld van een e-mailadres als &apos;placeholder&apos; in het veld getoond om de gebruiker te leren over hoe een correct e-mailadres er uit ziet. Voor de rest gaan we er maar even vanuit dat een gebruiker zelf kan achterhalen wat de fout is (er van uitgaande dat onze validatie regex goed is). Vast niet altijd waar, maar voor simpele velden als e-mailadres en telefoonnummer best acceptabel. Je moet je realiseren dat het hier om gebruikers van smartphones gaat.<br>\r\n<br>\r\nQua inhoud van de melding ben ik deels eens. Als de tekst niet het woord &apos;rode&apos; had gehad was het beter geweest, maar in de praktijk doet het geen kwaad. De melding benoemt zowel de naam van het veld als het feit dat deze afwijkend is vormgegeven. Het melden van de kleur is een simpel geheugensteuntje voor de gebruiker om snel de betreffende velden uit het formulier te pikken, zonder te moeten onthouden welke velden het precies waren. Stukje verwachtingsmanagement alvorens zij verder het formulier in gaan om het probleem te verhelpen. Kleurenblinden zullen inderdaad even zuchten door het gebruik van het woord &apos;rode&apos; maar kunnen prima uit de voeten met het eerste deel van de melding. Als de melding alleen &quot;Vul de roden velden aan&quot; was dan hadden we een probleem gehad.<br>\r\n<br>\r\nDe uitdaging is om de interactie van form validation voor mobile devices beter te maken, maar het mag duidelijk zijn dat de gebruikelijke &apos;desktop&apos; patterns niet &#xE9;&#xE9;n op &#xE9;&#xE9;n over te nemen zijn. Geen van ons zal ook beweren dat deze huidige oplossing perfect is, maar hij is gezien alle scenario&apos;s en randvoorwaarden naar mijn mening goed genoeg. Betekent natuurlijk niet dat het een onderdeel is wat we zeker gaan verbeteren, maar de prioriteiten liggen op het moment anders.<br>\r\n<br>\r\nOverigens, de &apos;UX department&apos; bij funda is niet fictief maar bestaat uit drie designers. Daar ben ik er &#xE9;&#xE9;n van (overigens niet de &apos;lead&apos; geweest voor mobiel). Bij funda denken we tot in het extreme na over de details en hoe mensen onze producten gebruiken, maar soms moeten zaken nou eenmaal eens live gezet worden voordat je er verder aan mag sleutelen. ;-)<br>\r\n<br>\r\nThanks voor jullie opmerkingen! Leuk om te zien dat er ook designers dit blog lezen.",
            "ownReply": false
        },
        {
            "author": "chrashoverraid",
            "date": "dinsdag 29 maart 2011 22:47",
            "contentHtml": "Weer een leuke post creator1988!<br>\r\nJeroen Mulder, jij ook bedankt voor je berichtje. Leuk om zo&apos;n uitgebreide reactie te zien <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\">",
            "ownReply": false
        },
        {
            "author": "samo",
            "date": "woensdag 30 maart 2011 08:38",
            "contentHtml": "Leuk dat niet alleen de coder reageert maar ook de persoon/afdeling die de coder voedt met nieuwe requirements. Daarover wel een vraag. Met de foutmelding boven, het foute veld in het midden en de submitknop onderin, is daar geen creatievere oplossing voor? Zou de foutmelding vanuit een flow-oogpunt niet beter bij de submit-button passen?<br>\r\nMaken jullie hierbij ook gebruik van de html5 elementen die voornamelijk bij mobiele apparaten voordelen leveren zoals input type=email?",
            "ownReply": false
        },
        {
            "author": "Jeroen Mulder",
            "date": "woensdag 30 maart 2011 08:52",
            "contentHtml": "@samo, misschien wel. Durf niet te zeggen of daar over is nagedacht. Nogmaals, ik ben niet de lead geweest bij dit project, maar wel betrokken.<br>\r\n<br>\r\nIk denk dat het ook een stukje &apos;keep it simple&apos; is geweest. Een van de doelstellingen is dat de site geheel moet werken zonder Javascript. Op het moment is de interactie in beide scenarios identiek. Ook wij hebben niet bijzonder veel ervaring met interaction design op mobile devices, dus door het simpel te houden hopen we maar dat het resultaat in ieder geval niet slecht is. We gaan het zien, er van leren en dan verbeteren :-)<br>\r\n<br>\r\nWat betreft de HTML5 input types, ja, daar maken we gebruik van. De spec moedigt de browser vendors aan een aanvullende validatie uit te voeren, maar op mobiel doen zowel iOS als Android dat niet. Hopende dat dat wel gaat komen (op de desktop doen Opera en Firefox 4 het wel) hoeven we misschien het probleem straks niet eens meer echt op te lossen. Vooralsnog krijg je alleen een aangepaste keyboard layout op devices met een virtueel toetsenbord.",
            "ownReply": false
        },
        {
            "author": "Keeper",
            "date": "woensdag 30 maart 2011 10:56",
            "contentHtml": "Thanks voor je reactie Jeroen, leuk om te lezen, misschien ook hier gaan bloggen?",
            "ownReply": false
        },
        {
            "author": "Jeroen Mulder",
            "date": "woensdag 30 maart 2011 11:00",
            "contentHtml": "@Keeper, thanks. Ja, misschien wel. Wil wel al weer een tijdje gaan bloggen, maar ben nog niet helemaal zeker over het format. Heb niet echt de discipline om zoals Jan steeds iets interessants te schrijven. Meedoen aan de discussie gaat me makkelijker af. :-)",
            "ownReply": false
        },
        {
            "author": "mithras",
            "date": "vrijdag 01 april 2011 15:50",
            "contentHtml": "@Jeroen Mulder: leuk om je reactie te lezen <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"><br>\r\n<br>\r\nIk had zo snel niet gezien dat het ging om een mobiele versie. Het spreekt dan ook voor zich dat in mobielenland de websites zich wat anders (moeten) gedragen dat in de wereld van de desktops. Dat komt natuurlijk omdat creator1988 zich in deze blog niet richt op de UI, maar de achterliggende code.<br>\r\n<br>\r\nGoede gedachtengang ook, want wijzelf merken ook altijd de worsteling met schermruimte en de hoeveelheid informatie die je wilt tonen. Toch denk ik dat ten behoeve van de koppeling van foutmelding en invoerveld je wel extra ruimte kan gebruiken.<br>\r\n<br>\r\nDe melding plaatsen bij het emailadres zelf geeft namelijk meer duidelijkheid. Je kan de ruimte boven het invoerveld, naast het label er wellicht voor gebruiken. Anders is een mogelijkheid nog het weglaten van de correct ingevoerde velden, zodat er meteen overzicht is welke velden niet goed ingevuld zijn.<br>\r\n<br>\r\nMaar goed, overwegingen voor een andere keer. Ik wacht jou eigen blog wel af <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\"><br>\r\n<br>\r\nPS. Het &quot;fictief&quot; kwam meer door de totaal verschillende screenshots. Alsof deze &quot;ter referentie&quot; op internet waren gezocht en er als voorbeeld waren bijgeplakt. Niets persoonlijks verder <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\">",
            "ownReply": false
        },
        {
            "author": "Jeroen Mulder",
            "date": "vrijdag 01 april 2011 19:51",
            "contentHtml": "@mithras, misschien heb je gelijk, maar dan moet je je wel realiseren dat je dan beide moet doen. Zowel een melding van fouten bovenaan en dan wellicht gevolg door per veld specifiekere omschrijvingen. Met alleen het laatste loop je in de problemen bij langere formulieren waar het betreffende foutieve veld buiten de viewport na een page refresh zou vallen.<br>\r\n<br>\r\nHet is allemaal niet erg makkelijk of voor de hand liggend, in ieder geval. Wij kiezen dan maar vaak de simpelste oplossing die het gros van het probleem oplost en proberen daar dan voor optimalisatie van te leren. :-)",
            "ownReply": false
        }
    ]
}