{
    "title": "Rate limited website scraping with node.js and async",
    "language": "en",
    "link": "http://glamour.tweakblogs.net/blog/7818/rate-limited-website-scraping-with-node-punt-js-and-async.html",
    "date": "2012-04-25T17:30:00.000Z",
    "category": "Frontend",
    "views": 30913,
    "articleHtml": "So yesterday a <a href=\"http://www.funda.nl/about/default.aspx?pagina=/nl/algemene-teksten-funda-sites/fundanl/over-funda/werken-bij-funda/senior-software-developer\" rel=\"external nofollow\">job description</a> at my previous employer popped up in my facebook stream which reminded me of <a href=\"http://www.funda.nl/about/default.aspx?pagina=/nl/info/opdracht/\" rel=\"external nofollow\">the programming excercise</a> that we included in the interview process just before I left the company. In short it comes down to:<ul><li>Funda has an API that lets you do queries, the response is paged, max. 25 objects at a time</li><li>The API is rate limited at about 100 req./minute</li><li>Request all pages for a given query</li><li>Count the times a realtor ID is in the result</li><li>Aggregate and sum the realtor ID&apos;s and create a top 10 list of realtors with the most objects</li></ul>Scraping this is pretty easy, but the rate limiting got me thinking. A great library for doing queue work like this (create a large list of URLs to scrape, then do it 4 at the same time or something) is <a href=\"https://github.com/caolan/async\" rel=\"external nofollow\">async</a> by caolan, but it lacks real rate limiting. Room for improvement!<br><a name=\"more\"></a><br>\r\n<b>Expanding async</b><br>\r\nThe async library already has a pretty convenient way to create dynamically sized queues with concurrency, in the form of:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_comment\">//&#xA0;create&#xA0;a&#xA0;queue&#xA0;that&#xA0;does&#xA0;4&#xA0;items&#xA0;at&#xA0;the&#xA0;same&#xA0;time</span>\n<br><span class=\"code_comment\">//&#xA0;that&#xA0;for&#xA0;every&#xA0;item&#xA0;in&#xA0;the&#xA0;queue&#xA0;outputs&#xA0;the&#xA0;value&#xA0;times&#xA0;2</span>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">q</span>&#xA0;=&#xA0;<span class=\"code_ident\">async</span>.<span class=\"code_method\">queue</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">item</span>,&#xA0;<span class=\"code_ident\">next</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;add&#xA0;a&#xA0;random&#xA0;timeout&#xA0;so&#xA0;we&#xA0;can&#xA0;see&#xA0;the&#xA0;queue&apos;ing</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">setTimeout</span>(<span class=\"code_keyword\">function</span>&#xA0;()&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_ident\">item</span>&#xA0;*&#xA0;<span class=\"code_number\">2</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">next</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;},&#xA0;<span class=\"code_ident\">Math</span>.<span class=\"code_method\">random</span>()&#xA0;*&#xA0;<span class=\"code_number\">1000</span>&#xA0;|<span class=\"code_number\">0</span>);\n<br>},&#xA0;<span class=\"code_number\">4</span>);\n<br>\n<br><span class=\"code_ident\">q</span>.<span class=\"code_ident\">drain</span>&#xA0;=&#xA0;<span class=\"code_keyword\">function</span>&#xA0;()&#xA0;{&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_string\">&quot;done&quot;</span>);&#xA0;};\n<br>\n<br><span class=\"code_ident\">q</span>.<span class=\"code_method\">push</span>([&#xA0;<span class=\"code_number\">1</span>,<span class=\"code_number\">2</span>,<span class=\"code_number\">3</span>,<span class=\"code_number\">4</span>,<span class=\"code_number\">5</span>,<span class=\"code_number\">6</span>,<span class=\"code_number\">7</span>,<span class=\"code_number\">8</span>,<span class=\"code_number\">9</span>,<span class=\"code_number\">10</span>&#xA0;]);\n<br>\n<br><span class=\"code_comment\">//&#xA0;gives&#xA0;something&#xA0;like&#xA0;(order&#xA0;can&#xA0;be&#xA0;different)</span>\n<br><span class=\"code_comment\">//&#xA0;but&#xA0;higher&#xA0;numbers&#xA0;are&#xA0;pushed&#xA0;later&#xA0;than&#xA0;lower&#xA0;numbers</span>\n<br><span class=\"code_comment\">//&#xA0;8,&#xA0;6,&#xA0;12,&#xA0;4,&#xA0;2,&#xA0;10,&#xA0;18,&#xA0;16,&#xA0;14,&#xA0;20,&#xA0;done</span></code></div></td></tr></table><br>\r\nTo add rate limiting to queues I created a <a href=\"https://github.com/janjongboom/async/blob/master/lib/async.js#L712\" rel=\"external nofollow\">mixin</a> that adds some methods to async that will create a form of an event loop structure that&apos;ll fire every X ms. Where X is of course the max. speed that we can query the target website. The usage is still the same, but the queue variable now has a chainable method &apos;rateLimit&apos; added. Executing the same code like before but rate limited to 1 request per second will give a sorted response, because even though we have a concurrency of four, the max. time processing an item is 1 second. The previous record will therefore always be processed.<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_comment\">//&#xA0;change</span>\n<br><span class=\"code_comment\">//&#xA0;},&#xA0;4);</span>\n<br><span class=\"code_comment\">//&#xA0;into</span>\n<br>},&#xA0;<span class=\"code_number\">4</span>).<span class=\"code_method\">rateLimit</span>(<span class=\"code_number\">1000</span>);\n<br>\n<br><span class=\"code_comment\">//&#xA0;gives</span>\n<br><span class=\"code_comment\">//&#xA0;2,&#xA0;4,&#xA0;6,&#xA0;8,&#xA0;10,&#xA0;12,&#xA0;14,&#xA0;16,&#xA0;18,&#xA0;20,&#xA0;done</span></code></div></td></tr></table><br>\r\n<br>\r\n<b>Transforming it in real world code</b><br>\r\nThe response that we get from funda has a &apos;Paging&apos; parameter that contains the next URL that we can call. If it&apos;s empty, we&apos;ve reached the end of our set. In pseudo code:<br>\r\n<br>pseudo:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n4\n5\n6\n</pre></td><td class=\"phphighlightcode\"><div><pre>func processItem (url)\r\n    resp = request(url)\r\n    if resp.Paging.VolgendeUrl\r\n        processItem resp.Paging.VolgendeUrl\r\n    else\r\n        &quot;done&quot;</pre></div></td></tr></table><br>\r\nIn javascript with async, this will look like:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">async</span>&#xA0;=&#xA0;<span class=\"code_method\">require</span>(<span class=\"code_string\">&quot;async&quot;</span>);\n<br>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">q</span>&#xA0;=&#xA0;<span class=\"code_ident\">async</span>.<span class=\"code_method\">queue</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">url</span>,&#xA0;<span class=\"code_ident\">next</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">request</span>.<span class=\"code_method\">get</span>(<span class=\"code_ident\">url</span>,&#xA0;<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">err</span>,&#xA0;<span class=\"code_ident\">res</span>,&#xA0;<span class=\"code_ident\">body</span>)&#xA0;{\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;parse&#xA0;the&#xA0;body&#xA0;to&#xA0;JSON</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">body</span>&#xA0;=&#xA0;<span class=\"code_ident\">JSON</span>.<span class=\"code_method\">parse</span>(<span class=\"code_ident\">body</span>);\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">body</span>&#xA0;&amp;&amp;&#xA0;<span class=\"code_ident\">body</span>.<span class=\"code_ident\">Paging</span>.<span class=\"code_ident\">VolgendeUrl</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">q</span>.<span class=\"code_method\">push</span>(<span class=\"code_ident\">body</span>.<span class=\"code_ident\">Paging</span>.<span class=\"code_ident\">VolgendeUrl</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;do&#xA0;stuff&#xA0;like&#xA0;counting&#xA0;realtors</span>\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">next</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;});\n<br>},&#xA0;<span class=\"code_number\">1</span>).<span class=\"code_method\">rateLimit</span>(<span class=\"code_number\">60000</span>&#xA0;/&#xA0;<span class=\"code_number\">60</span>);&#xA0;<span class=\"code_comment\">//&#xA0;60&#xA0;per&#xA0;minute,&#xA0;just&#xA0;to&#xA0;be&#xA0;safe</span>\n<br>\n<br><span class=\"code_comment\">//&#xA0;initial&#xA0;page</span>\n<br><span class=\"code_ident\">q</span>.<span class=\"code_method\">push</span>(<span class=\"code_string\">&quot;/zaandam/tuin/&quot;</span>);\n<br>\n<br><span class=\"code_ident\">q</span>.<span class=\"code_ident\">drain</span>&#xA0;=&#xA0;<span class=\"code_keyword\">function</span>&#xA0;()&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_string\">&quot;done&quot;</span>);\n<br>};</code></div></td></tr></table><br>\r\n<br>\r\n<b>Counting realtor IDs</b><br>\r\nBecause the purpose of the assignment is to count the realtor IDs we&apos;ll add a simple object map where we gather all the data:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_comment\">//&#xA0;the&#xA0;key&#xA0;will&#xA0;be&#xA0;the&#xA0;realtor&#xA0;ID&#xA0;and&#xA0;the&#xA0;value&#xA0;the&#xA0;no&#xA0;of&#xA0;times&#xA0;we&#xA0;encountered&#xA0;this&#xA0;realtor</span>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">map</span>&#xA0;=&#xA0;{};&#xA0;\n<br>\n<br><span class=\"code_comment\">//&#xA0;=================</span>\n<br><span class=\"code_comment\">//&#xA0;when&#xA0;a&#xA0;request&#xA0;comes&#xA0;in:</span>\n<br><span class=\"code_comment\">//&#xA0;first&#xA0;grab&#xA0;the&#xA0;realtor&#xA0;IDs</span>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">realtorIds</span>&#xA0;=&#xA0;<span class=\"code_ident\">body</span>.<span class=\"code_ident\">Objects</span>.<span class=\"code_method\">map</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">obj</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">obj</span>.<span class=\"code_ident\">MakelaarId</span>;\n<br>});\n<br><span class=\"code_comment\">//&#xA0;then&#xA0;move&#xA0;it&#xA0;to&#xA0;the&#xA0;map</span>\n<br><span class=\"code_ident\">realtorIds</span>.<span class=\"code_method\">forEach</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">rid</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;check&#xA0;for&#xA0;existing&#xA0;one,&#xA0;if&#xA0;not&#xA0;initialize&#xA0;it&#xA0;with&#xA0;&apos;1&apos;</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">map</span>[<span class=\"code_ident\">rid</span>]&#xA0;=&#xA0;(<span class=\"code_ident\">map</span>[<span class=\"code_ident\">rid</span>]&#xA0;||&#xA0;<span class=\"code_number\">0</span>)&#xA0;+&#xA0;<span class=\"code_number\">1</span>;\n<br>});\n<br>\n<br><span class=\"code_comment\">//&#xA0;=================</span>\n<br><span class=\"code_comment\">//&#xA0;on&#xA0;drain:</span>\n<br><span class=\"code_comment\">//&#xA0;make&#xA0;a&#xA0;sortable&#xA0;object&#xA0;with&#xA0;{id:&#xA0;[Number],&#xA0;cnt:&#xA0;[Number]}</span>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">sortable</span>&#xA0;=&#xA0;<span class=\"code_ident\">Object</span>.<span class=\"code_method\">keys</span>(<span class=\"code_ident\">map</span>).<span class=\"code_method\">map</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">k</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">id</span>:&#xA0;<span class=\"code_ident\">k</span>,\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">cnt</span>:&#xA0;<span class=\"code_ident\">makelaarMap</span>[<span class=\"code_ident\">k</span>]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;};\n<br>});\n<br><span class=\"code_comment\">//&#xA0;now&#xA0;sort&#xA0;it&#xA0;on&#xA0;cnt&#xA0;HI-LO</span>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">sorted</span>&#xA0;=&#xA0;<span class=\"code_ident\">sortable</span>.<span class=\"code_method\">sort</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">o</span>,&#xA0;<span class=\"code_ident\">p</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">o</span>.<span class=\"code_ident\">cnt</span>&#xA0;&gt;&#xA0;<span class=\"code_ident\">p</span>.<span class=\"code_ident\">cnt</span>&#xA0;?&#xA0;<span class=\"code_number\">-1</span>&#xA0;:&#xA0;(<span class=\"code_ident\">o</span>.<span class=\"code_ident\">cnt</span>&#xA0;===&#xA0;<span class=\"code_ident\">p</span>.<span class=\"code_ident\">cnt</span>&#xA0;?&#xA0;<span class=\"code_number\">0</span>&#xA0;:&#xA0;<span class=\"code_number\">1</span>);\n<br>});\n<br><span class=\"code_comment\">//&#xA0;output&#xA0;it</span>\n<br><span class=\"code_keyword\">for</span>&#xA0;(<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">ix</span>&#xA0;=&#xA0;<span class=\"code_number\">0</span>;&#xA0;<span class=\"code_ident\">ix</span>&#xA0;&lt;&#xA0;<span class=\"code_number\">10</span>;&#xA0;<span class=\"code_ident\">ix</span>++)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_ident\">ix</span><span class=\"code_number\">+1</span>&#xA0;+&#xA0;<span class=\"code_string\">&apos;.&apos;</span>,&#xA0;<span class=\"code_ident\">sorted</span>[<span class=\"code_ident\">ix</span>].<span class=\"code_ident\">id</span>,&#xA0;<span class=\"code_string\">&apos;has&apos;</span>,&#xA0;<span class=\"code_ident\">sorted</span>[<span class=\"code_ident\">ix</span>].<span class=\"code_ident\">cnt</span>,&#xA0;<span class=\"code_string\">&apos;objects&apos;</span>);\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Hooking it together</b><br>\r\nWe&apos;ll need some small things to do, first, we&apos;ll need to incorporate the base URL, then, we&apos;ll need to normalize the URLs we receive from &apos;VolgendeUrl&apos; and maybe do some sanitizing. The final script will look something like this:<br>\r\n<br>JavaScript:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">async</span>&#xA0;=&#xA0;<span class=\"code_method\">require</span>(<span class=\"code_string\">&quot;async&quot;</span>);\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">request</span>&#xA0;=&#xA0;<span class=\"code_method\">require</span>(<span class=\"code_string\">&quot;request&quot;</span>);\n<br>\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">makelaarMap</span>&#xA0;=&#xA0;{};\n<br><span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">q</span>&#xA0;=&#xA0;<span class=\"code_ident\">async</span>.<span class=\"code_method\">queue</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">zo</span>,&#xA0;<span class=\"code_ident\">next</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_string\">&quot;process&quot;</span>,&#xA0;<span class=\"code_ident\">zo</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">url</span>&#xA0;=&#xA0;<span class=\"code_string\">&quot;http://partnerapi.funda.nl/feeds/Aanbod.svc/json/a001e6c3ee6e4853ab18fe44cc1494de/?type=koop&amp;pagesize=25&amp;zo=&quot;</span>&#xA0;+&#xA0;<span class=\"code_ident\">zo</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">request</span>.<span class=\"code_method\">get</span>(<span class=\"code_ident\">url</span>,&#xA0;<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">err</span>,&#xA0;<span class=\"code_ident\">res</span>,&#xA0;<span class=\"code_ident\">body</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;add&#xA0;error&#xA0;checking&#xA0;(see&#xA0;err,&#xA0;and&#xA0;res.statusCode)</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;((<span class=\"code_ident\">body</span>&#xA0;=&#xA0;<span class=\"code_ident\">body</span>&#xA0;&amp;&amp;&#xA0;<span class=\"code_ident\">JSON</span>.<span class=\"code_method\">parse</span>(<span class=\"code_ident\">body</span>))&#xA0;&amp;&amp;&#xA0;<span class=\"code_ident\">body</span>.<span class=\"code_ident\">Paging</span>.<span class=\"code_ident\">VolgendeUrl</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">q</span>.<span class=\"code_method\">push</span>(<span class=\"code_ident\">body</span>.<span class=\"code_ident\">Paging</span>.<span class=\"code_ident\">VolgendeUrl</span>.<span class=\"code_method\">replace</span>(<span class=\"code_string\">/^\\/\\~\\/\\w+/</span>,&#xA0;<span class=\"code_string\">&quot;&quot;</span>));\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">body</span>.<span class=\"code_ident\">Objects</span>.<span class=\"code_method\">map</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">o</span>)&#xA0;{&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">o</span>.<span class=\"code_ident\">MakelaarId</span>;&#xA0;}).<span class=\"code_method\">forEach</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">mid</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">makelaarMap</span>[<span class=\"code_ident\">mid</span>]&#xA0;=&#xA0;(<span class=\"code_ident\">makelaarMap</span>[<span class=\"code_ident\">mid</span>]&#xA0;||&#xA0;<span class=\"code_number\">0</span>)&#xA0;+&#xA0;<span class=\"code_number\">1</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;});\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">next</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;});\n<br>},&#xA0;<span class=\"code_number\">1</span>).<span class=\"code_method\">rateLimit</span>(<span class=\"code_number\">60000</span>&#xA0;/&#xA0;<span class=\"code_number\">60</span>);&#xA0;<span class=\"code_comment\">//&#xA0;60&#xA0;per&#xA0;minute</span>\n<br>\n<br><span class=\"code_comment\">//&#xA0;initial&#xA0;page</span>\n<br><span class=\"code_ident\">q</span>.<span class=\"code_method\">push</span>(<span class=\"code_string\">&quot;/zaandam/tuin/&quot;</span>);\n<br>\n<br><span class=\"code_ident\">q</span>.<span class=\"code_ident\">drain</span>&#xA0;=&#xA0;<span class=\"code_keyword\">function</span>&#xA0;()&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">sorted</span>&#xA0;=&#xA0;<span class=\"code_ident\">Object</span>.<span class=\"code_method\">keys</span>(<span class=\"code_ident\">makelaarMap</span>).<span class=\"code_method\">map</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">k</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">id</span>:&#xA0;<span class=\"code_ident\">k</span>,\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">cnt</span>:&#xA0;<span class=\"code_ident\">makelaarMap</span>[<span class=\"code_ident\">k</span>]\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}).<span class=\"code_method\">sort</span>(<span class=\"code_keyword\">function</span>&#xA0;(<span class=\"code_ident\">o</span>,&#xA0;<span class=\"code_ident\">p</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">o</span>.<span class=\"code_ident\">cnt</span>&#xA0;&gt;&#xA0;<span class=\"code_ident\">p</span>.<span class=\"code_ident\">cnt</span>&#xA0;?&#xA0;<span class=\"code_number\">-1</span>&#xA0;:&#xA0;(<span class=\"code_ident\">o</span>.<span class=\"code_ident\">cnt</span>&#xA0;===&#xA0;<span class=\"code_ident\">p</span>.<span class=\"code_ident\">cnt</span>&#xA0;?&#xA0;<span class=\"code_number\">0</span>&#xA0;:&#xA0;<span class=\"code_number\">1</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;});\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">for</span>&#xA0;(<span class=\"code_keyword\">var</span>&#xA0;<span class=\"code_ident\">ix</span>&#xA0;=&#xA0;<span class=\"code_number\">0</span>;&#xA0;<span class=\"code_ident\">ix</span>&#xA0;&lt;&#xA0;<span class=\"code_number\">10</span>;&#xA0;<span class=\"code_ident\">ix</span>++)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">console</span>.<span class=\"code_method\">log</span>(<span class=\"code_ident\">ix</span><span class=\"code_number\">+1</span>&#xA0;+&#xA0;<span class=\"code_string\">&apos;.&apos;</span>,&#xA0;<span class=\"code_ident\">sorted</span>[<span class=\"code_ident\">ix</span>].<span class=\"code_ident\">id</span>,&#xA0;<span class=\"code_string\">&apos;has&apos;</span>,&#xA0;<span class=\"code_ident\">sorted</span>[<span class=\"code_ident\">ix</span>].<span class=\"code_ident\">cnt</span>,&#xA0;<span class=\"code_string\">&apos;objects&apos;</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>};</code></div></td></tr></table><br>\r\n<br>\r\n<b>Running it</b><br>\r\nTo run it: execute the following commands on your local system or on <a href=\"http://c9.io/dashboard.html\" rel=\"external nofollow\">Cloud9 IDE</a>:<br>\r\n<br>bash:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n4\n</pre></td><td class=\"phphighlightcode\"><div><pre>$ git clone https://github.com/janjongboom/async node_modules/async\r\n$ npm install request\r\n# paste the code in server.js\r\n$ node server.js</pre></div></td></tr></table>",
    "nextLink": "http://glamour.tweakblogs.net/blog/7779/inheritance-in-javascript.html",
    "comments": [
        {
            "author": "Xantios",
            "date": "Wednesday 25 April 2012 20:04",
            "contentHtml": "waarom wel het woord makelaar gebruiken in je code ( om er eens 1 te noemen)<br>\r\nen de rest van je post in het engels? <br>\r\n<br>\r\nSowieso, Funda is toch een Nederlandse toko ?",
            "ownReply": false
        },
        {
            "author": "kipusoep",
            "date": "Thursday 26 April 2012 10:20",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/7818/rate-limited-website-scraping-with-node-punt-js-and-async.html#r_107383\">Xantios wrote on Wednesday 25 April 2012 @ 20:04:</a><br>\r\nwaarom wel het woord makelaar gebruiken in je code ( om er eens 1 te noemen)<br>\r\nen de rest van je post in het engels? <br>\r\n<br>\r\nSowieso, Funda is toch een Nederlandse toko ?</div></blockquote>Viel mij ook op inderdaad. Wat mij betreft: code (en dus o.a. ook variabelen) altijd in het engels.",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "Thursday 26 April 2012 11:36",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/7818/rate-limited-website-scraping-with-node-punt-js-and-async.html#r_107403\">kipusoep wrote on Thursday 26 April 2012 @ 10:20:</a><br>\r\n[...]<br>\r\n<br>\r\nViel mij ook op inderdaad. Wat mij betreft: code (en dus o.a. ook variabelen) altijd in het engels.</div></blockquote>Mwah, het punt is dat de API van funda in het Nederlands is. En het object dus &apos;MakelaarId&apos; heet, een &apos;makelaarMap&apos; is daar dan nog wel te verdedigen.",
            "ownReply": true
        },
        {
            "author": "Thursday 26 April 2012 13:52",
            "date": "",
            "contentHtml": "De reden dat we dat bij funda doen is dat we vinden dat je je code liefst in het Engels moet doen, maar echte domein termen die in je organisatie op een heel specifieke manier worden gebruikt beter niet kunt gaan vertalen. Je krijgt dan code met namen zoals GetMakelaarContracts() en CalculateWoonoppervlakte(). Dat is inderdaad lelijk, maar voorkomt verwarring. In onze organisatie betekenen Makelaar en Woonoppervlakte iets heel specifiekt en dat raak je kwijt in GetEstateAgentContracts() en CalculateTotalLivingSurface(). Vind ik.",
            "ownReply": false
        },
        {
            "author": "BeRtjh",
            "date": "Thursday 26 April 2012 14:31",
            "contentHtml": "This reminds me of my own Funda crawler, which seems a lot simpler. <br>\r\nI used Mechanize (<a href=\"http://mechanize.rubyforge.org/\" rel=\"external\" title=\"http://mechanize.rubyforge.org/\">http://mechanize.rubyforge.org/</a>) and Ruby on Rails and created a rake-file (<a href=\"http://guides.rubyonrails.org/command_line.html#rake\" rel=\"external\" title=\"http://guides.rubyonrails.org/command_line.html#rake\">http://guides.rubyonrails.org/command_line.html#rake</a>) for this:<br>\r\n<br>\r\ndesc &quot;Get houses from Funda&quot;<br>\r\ntask :funda =&gt; :environment do<br>\r\n  require &apos;mechanize&apos;<br>\r\n  agent = Mechanize.new<br>\r\n  i = 1;<br>\r\n  agent.get(&quot;http://www.funda.nl/koop/heel-nederland/p#{i}/&quot;)<br>\r\n  begin<br>\r\n    agent.page.search(&quot;.nvm&quot;).each do |node|<br>\r\n      street = node.search(&quot;.item&quot;).map(&amp;:text).map(&amp;:strip).first<br>\r\n      info = node.search(&quot;.specs&quot;).map(&amp;:text).map(&amp;:strip).first<br>\r\n      price = node.search(&quot;.nvm-extern&quot;).map(&amp;:text).map(&amp;:strip).first<br>\r\n      broker = node.search(&quot;.rel a&quot;).map(&amp;:text).map(&amp;:strip).first<br>\r\n      House.create! do |house|<br>\r\n        house.street = street<br>\r\n        house.broker = broker<br>\r\n        house.price = price<br>\r\n        house.info = info<br>\r\n      end<br>\r\n    end<br>\r\n    i = i.next<br>\r\n    next_page = agent.page.link_with(:href =&gt; &quot;/koop/heel-nederland/p#{i}/&quot;)<br>\r\n  end while (next_page.click unless next_page.nil?)<br>\r\nend<br>\r\n<br>\r\nDon&apos;t know if this still works, tho.<p class=\"edit\">[Comment edited on Thursday 26 April 2012 14:33]</p>",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "Thursday 26 April 2012 16:00",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/7818/rate-limited-website-scraping-with-node-punt-js-and-async.html#r_107422\">BeRtjh wrote on Thursday 26 April 2012 @ 14:31:</a><br>\r\nThis reminds me of my own Funda crawler, which seems a lot simpler. <br>\r\nI used Mechanize (<a href=\"http://mechanize.rubyforge.org/\" rel=\"external\" title=\"http://mechanize.rubyforge.org/\">http://mechanize.rubyforge.org/</a>) and Ruby on Rails and created a rake-file (<a href=\"http://guides.rubyonrails.org/command_line.html#rake\" rel=\"external\" title=\"http://guides.rubyonrails.org/command_line.html#rake\">http://guides.rubyonrails.org/command_line.html#rake</a>) for this:</div></blockquote>Yeah, it&apos;s probably not the easiest way to do this, but the point of adding rate limiting made it interesting for me personally.<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/7818/rate-limited-website-scraping-with-node-punt-js-and-async.html#r_107420\">Teun wrote on Thursday 26 April 2012 @ 13:52:</a><br>\r\nDe reden dat we dat bij funda doen is dat we vinden dat je je code liefst in het Engels moet doen...</div></blockquote>Hi Teun  <img src=\"http://tweakimg.net/g/s/biggrin.gif\" width=\"15\" height=\"15\" alt=\":D\">",
            "ownReply": true
        },
        {
            "author": "Monday 03 September 2012 12:06",
            "date": "",
            "contentHtml": "Ik kwam de opdracht ook tegen op internet en vond het wel een mooie showcase voor een REST client die ik ontwikkel. De source kun je vinden op github: <a href=\"https://github.com/albertjan/houses\" rel=\"external\" title=\"https://github.com/albertjan/houses\">https://github.com/albertjan/houses</a> en de voor de REST client hier: <a href=\"https://github.com/albertjan/DynamicRestClient\" rel=\"external\" title=\"https://github.com/albertjan/DynamicRestClient\">https://github.com/albertjan/DynamicRestClient</a>",
            "ownReply": false
        },
        {
            "author": "Thursday 13 December 2012 13:44",
            "date": "",
            "contentHtml": "How do you access the Funda webservice exactly? is this still possible without a paid subscription?<br>\r\n<br>\r\nI searched myself a while ago because i wanted to automatic keep track of some objects i am interested in.",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "Thursday 13 December 2012 14:08",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/7818/rate-limited-website-scraping-with-node-punt-js-and-async.html#r_117786\">Daniel de Witte wrote on Thursday 13 December 2012 @ 13:44:</a><br>\r\nHow do you access the Funda webservice exactly? is this still possible without a paid subscription?<br>\r\n<br>\r\nI searched myself a while ago because i wanted to automatic keep track of some objects i am interested in.</div></blockquote>There is an API key available but it&apos;s only intended to be used for the pre-job interview programming example, other parts of the API aren&apos;t public (at least this was a year ago when I left funda).",
            "ownReply": true
        }
    ]
}