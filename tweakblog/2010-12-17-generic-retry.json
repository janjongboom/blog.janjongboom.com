{
    "title": "Generic retry",
    "language": "nl",
    "link": "http://glamour.tweakblogs.net/blog/5764/generic-retry.html",
    "date": "2010-12-17T09:57:00.000Z",
    "category": "Backend",
    "views": 2263,
    "articleHtml": "Wanneer je calls naar externe sources doet (webservices, database, etc.) kan het voorkomen dat je hier een retry-mechanisme voor nodig hebt. In plaats van deze logica telkens opnieuw schrijven, zou het mooi zijn om dit generiek op te lossen!<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">try</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;doe&#xA0;Dao.GetDataset()&#xA0;maximaal&#xA0;3&#xA0;keer&#xA0;met&#xA0;200&#xA0;ms.&#xA0;pauze&#xA0;ertussen</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;en&#xA0;gooi&#xA0;een&#xA0;exception&#xA0;als&#xA0;het&#xA0;na&#xA0;3&#xA0;keer&#xA0;nog&#xA0;niet&#xA0;gelukt&#xA0;is.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">var</span>&#xA0;<span class=\"code_ident\">dataSet</span>&#xA0;=&#xA0;<span class=\"code_ident\">Actions</span>.<span class=\"code_method\">Retry</span>(&#xA0;()=&gt;&#xA0;<span class=\"code_ident\">Dao</span>.<span class=\"code_method\">GetDataset</span>(),&#xA0;<span class=\"code_number\">3</span>,&#xA0;<span class=\"code_number\">200</span>,&#xA0;<span class=\"code_keyword\">true</span>);\n<br>}&#xA0;<span class=\"code_keyword\">catch</span>&#xA0;(<span class=\"code_ident\">Exception</span>&#xA0;<span class=\"code_ident\">ex</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;3&#xA0;keer&#xA0;geprobeerd,&#xA0;3&#xA0;keer&#xA0;gefaald&#xA0;:-o</span>\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\n<b>Implementatie</b><br>\r\nFairly simple eigenlijk (en een mooie reden om weer eens een goto te gebruiken!):<br><a name=\"more\"></a><br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_keyword\">class</span>&#xA0;<span class=\"code_ident\">Actions</span>\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;del:&#xA0;een&#xA0;delegate&#xA0;die&#xA0;iets&#xA0;teruggeeft</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;throwExceptions:&#xA0;als&#xA0;true,&#xA0;dan&#xA0;worden&#xA0;er&#xA0;exceptions&#xA0;gegooid;&#xA0;als&#xA0;false&#xA0;dan&#xA0;wordt&#xA0;default(T)&#xA0;teruggegeven&#xA0;(NULL&#xA0;voor&#xA0;strings).</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_ident\">T</span>&#xA0;<span class=\"code_ident\">Retry</span>&lt;<span class=\"code_ident\">T</span>&gt;(<span class=\"code_ident\">RetryDelegate</span>&lt;<span class=\"code_ident\">T</span>&gt;&#xA0;<span class=\"code_ident\">del</span>,&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">numberOfRetries</span>,&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">msPause</span>,&#xA0;<span class=\"code_keyword\">bool</span>&#xA0;<span class=\"code_ident\">throwExceptions</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">counter</span>&#xA0;=&#xA0;<span class=\"code_number\">0</span>;\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">BeginLabel</span>:\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">try</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">counter</span>++;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">del</span>.<span class=\"code_method\">Invoke</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">catch</span>&#xA0;(<span class=\"code_ident\">Exception</span>&#xA0;<span class=\"code_ident\">ex</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">counter</span>&#xA0;&gt;&#xA0;<span class=\"code_ident\">numberOfRetries</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>&#xA0;(<span class=\"code_ident\">throwExceptions</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">throw</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_keyword\">default</span>(<span class=\"code_ident\">T</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Thread</span>.<span class=\"code_method\">Sleep</span>(<span class=\"code_ident\">msPause</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">goto</span>&#xA0;<span class=\"code_ident\">BeginLabel</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\nEn de &apos;void&apos; versie van deze functie, wanneer je geen resultaat terug wil hebben:<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_keyword\">bool</span>&#xA0;<span class=\"code_method\">Retry</span>(<span class=\"code_ident\">RetryDelegate</span>&#xA0;<span class=\"code_ident\">del</span>,&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">numberOfRetries</span>,&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">msPause</span>,&#xA0;<span class=\"code_keyword\">bool</span>&#xA0;<span class=\"code_ident\">throwExceptions</span>)&#xA0;&#xA0;\n<br>{&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_method\">Retry</span>(&#xA0;()=&gt;&#xA0;{&#xA0;<span class=\"code_ident\">del</span>.<span class=\"code_method\">Invoke</span>();&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_keyword\">true</span>;&#xA0;},&#xA0;<span class=\"code_ident\">numerOfRetries</span>,&#xA0;<span class=\"code_ident\">msPause</span>,&#xA0;<span class=\"code_ident\">throwExceptions</span>);&#xA0;\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\nUiteraard zelf nog ruimte voor logging etc. in de implementatie!",
    "nextLink": "http://glamour.tweakblogs.net/blog/5759/single-byte-string-in-c.html",
    "comments": [
        {
            "author": "RoadRunner84",
            "date": "vrijdag 17 december 2010 11:10",
            "contentHtml": "Die void versie (die stiekem een bool is), kan je die niet vanuit je template maken, nu lijkt het hele idee van je template een beetje vaag.<br>\r\nSowieso wordt toch niet afgedwongen dat je iets doet met je return value? Als een type een cast operator heeft naar bool (bijv. die van int is this != 0) hoef je toch geen losse return true erbij te stoppen?",
            "ownReply": false
        },
        {
            "author": "Rhapsody",
            "date": "vrijdag 17 december 2010 11:13",
            "contentHtml": "Waarom een GOTO gebruiken???",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "vrijdag 17 december 2010 11:14",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5764/generic-retry.html#r_77347\">RoadRunner84 schreef op vrijdag 17 december 2010 @ 11:10:</a><br>\r\nDie void versie (die stiekem een bool is), kan je die niet vanuit je template maken, nu lijkt het hele idee van je template een beetje vaag.<br>\r\nSowieso wordt toch niet afgedwongen dat je iets doet met je return value? Als een type een cast operator heeft naar bool (bijv. die van int is this != 0) hoef je toch geen losse return true erbij te stoppen?</div></blockquote>Ja, niet gezien toen ik dit postte. De void versie zou ook qua implementatie:<br>\r\n<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_keyword\">bool</span>&#xA0;<span class=\"code_method\">Retry</span>(<span class=\"code_ident\">RetryDelegate</span>&#xA0;<span class=\"code_ident\">del</span>,&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">numberOfRetries</span>,&#xA0;<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">msPause</span>,&#xA0;<span class=\"code_keyword\">bool</span>&#xA0;<span class=\"code_ident\">throwExceptions</span>)&#xA0;\n<br>{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_method\">Retry</span>(&#xA0;()=&gt;&#xA0;{&#xA0;<span class=\"code_ident\">del</span>.<span class=\"code_method\">Invoke</span>();&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_keyword\">true</span>;&#xA0;},&#xA0;<span class=\"code_ident\">numerOfRetries</span>,&#xA0;<span class=\"code_ident\">msPause</span>,&#xA0;<span class=\"code_ident\">throwExceptions</span>);\n<br>}</code></div></td></tr></table><br>\r\n<br>\r\nkunnen zijn. Zal hem eens aanpassen.<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5764/generic-retry.html#r_77348\">Rhapsody schreef op vrijdag 17 december 2010 @ 11:13:</a><br>\r\nWaarom een GOTO gebruiken???</div></blockquote>Ik vind een GOTO hier netter dan een <br>code:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n</pre></td><td class=\"phphighlightcode\"><div><pre>while(true)</pre></div></td></tr></table> eerlijk gezegd. Goto&apos;s zijn ook niet helemaal evil, als je ze maar goed gebruikt (net als alles)<p class=\"edit\">[Reactie gewijzigd op vrijdag 17 december 2010 11:15]</p>",
            "ownReply": true
        },
        {
            "author": "RoadRunner84",
            "date": "vrijdag 17 december 2010 11:20",
            "contentHtml": "goto&apos;s zijn net zo evil als tables als design element <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\"> In dit geval moet een goto gebruikt worden, omdat een while niet over een element grens heen kan gaan. (de while{ zou buiten de try-catch staan, terwijl bijbehorende } binnen de try-catch staat).<br>\r\n<br>\r\nIk weet dat GCC dit soms wel toestaat, maar het is geen nette C/C++/C# code. Adam Dunkel&apos;s PT library maakt hier gebruik van, maar om nou te zeggen dat je daar blij van wordt... (het is oke omdat het volledig gehide is, imho).",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "vrijdag 17 december 2010 11:26",
            "contentHtml": "Sowieso is het hele<br>\r\n<br>code:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n</pre></td><td class=\"phphighlightcode\"><div><pre>while(true) break;</pre></div></td></tr></table><br>\r\npattern gewoon syntactic sugar om maar te verbloemen dat je hetzelfde doet als een GOTO. De compiler vertaald het zelfs naar zo&apos;n beetje dezelfde MSIL.",
            "ownReply": true
        },
        {
            "author": "RedHornet",
            "date": "vrijdag 17 december 2010 11:28",
            "contentHtml": "In plaats van een vieze GOTO had hier natuulrijk gewoon een recursieve functie gebruikt moeten worden die zelf bijhoudt of de maximale aantal tries behaalt zijn <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\">. Dat zou de netste manier zijn geweest en dus geen while, for, foreach, goto of whatever <img src=\"http://tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":P\">",
            "ownReply": false
        },
        {
            "author": "RoadRunner84",
            "date": "vrijdag 17 december 2010 11:38",
            "contentHtml": "Sterker nog: in assembler bestaat geen while, for of wat dan ook. Alleen meer conditional jump en unconditional jump <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"> Dus de charmante vertaal slagen:<br>\r\n<br>code:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"phphighlightcode\"><div><pre>for(int i=0; i &lt; n; i++){\r\n  ...\r\n}\r\n\r\ni = 0;\r\nwhile(i &lt; n){\r\n  ...\r\n  i++;\r\n}\r\n\r\ni = 0;\r\nlbl_while:\r\nif (i &lt; n) goto lbl_while_end;\r\n...\r\ni++;\r\ngoto lbl_while;\r\nlbl_while_end:</pre></div></td></tr></table><br>\r\n<br>\r\nDrie keer hetzelfde <img src=\"http://tweakimg.net/g/s/biggrin.gif\" width=\"15\" height=\"15\" alt=\":D\"><br>\r\n<br>\r\nDit recursief oplossen zou ik niet doen, al kan het wel. Iedere &quot;retry&quot; zal de stack ophogen met je context. Kan bij 100 retries (bij netwerken niet onredelijk) behoorlijk in het geheugen lopen...<br>\r\n<br>\r\n[edit]<br>\r\nAls we dan toch bezig zijn <img src=\"http://tweakimg.net/g/s/smile.gif\" width=\"15\" height=\"15\" alt=\":)\"><br>\r\n<br>code:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"phphighlightcode\"><div><pre>i = 0;\r\nlbl_while:\r\nif (!(i &lt; n)) goto lbl_while_proceed;\r\ngoto lbl_while_end;\r\nlbl_while_proceed;\r\n...\r\ni++;\r\ngoto lbl_while;\r\nlbl_while_end:\r\n\r\n1: mov R12, #0\r\n2: mov R13, R12\r\n3: sub R13, $n\r\n4: jl @6\r\n5: jmp @9\r\n6: ...\r\n7: add R12, #1\r\n8: jmp @2\r\n9:</pre></div></td></tr></table><p class=\"edit\">[Reactie gewijzigd op vrijdag 17 december 2010 11:44]</p>",
            "ownReply": false
        },
        {
            "author": "RobIII",
            "date": "vrijdag 17 december 2010 11:51",
            "contentHtml": "Ik vind &apos;t nogal lomp om er een thread.sleep in te gooien; dan liever een (optionele) waitdelegate. Ook heel die default(T) zou ik achterwege laten en per definitie een exception gooien; dan kan de caller nog altijd bepalen wat &apos;ie ermee wil doen.",
            "ownReply": false
        },
        {
            "author": "RedHornet",
            "date": "vrijdag 17 december 2010 12:01",
            "contentHtml": "@RoadRunner: Als je geheugen oploopt dat je er problemen mee krijgt ligt je probleem ergens anders <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\">",
            "ownReply": false
        },
        {
            "author": "Gerco",
            "date": "vrijdag 17 december 2010 12:47",
            "contentHtml": "Een (wellicht) nuttige toevoeging die ik in mijn eigen (smerige) RetryHelper gebruik (java) is om verschillende soorten failures te hebben. Een aanroep ziet er dan ook ongeveer zo uit:<br>\r\n<br>\r\n<br>Java:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br></code></td><td class=\"phphighlightcode\"><div><code>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">Message</span>&#xA0;<span class=\"code_method\">processMessage</span>(<span class=\"code_keyword\">final</span>&#xA0;<span class=\"code_ident\">Message</span>&#xA0;<span class=\"code_ident\">message</span>)&#xA0;<span class=\"code_keyword\">throws</span>&#xA0;<span class=\"code_ident\">PermanentFailureException</span>,&#xA0;<span class=\"code_ident\">OutOfRetriesException</span>,&#xA0;<span class=\"code_ident\">FatalErrorException</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">RetryHelper</span>.<span class=\"code_method\">call</span>(\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;The&#xA0;operation&#xA0;being&#xA0;attempted&#xA0;(process&#xA0;the&#xA0;message)</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_ident\">Callable</span>&lt;<span class=\"code_ident\">Message</span>&gt;()&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_ident\">Message</span>&#xA0;<span class=\"code_method\">call</span>()&#xA0;<span class=\"code_keyword\">throws</span>&#xA0;<span class=\"code_ident\">Exception</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;Doe&#xA0;iets&#xA0;met&#xA0;de&#xA0;input&#xA0;Message&#xA0;en&#xA0;return&#xA0;een&#xA0;output&#xA0;Message</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;},&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;After&#xA0;the&#xA0;first&#xA0;attempt,&#xA0;this&#xA0;code&#xA0;will&#xA0;be&#xA0;run&#xA0;to&#xA0;try&#xA0;and&#xA0;repair&#xA0;the&#xA0;problem.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">Runnable</span>()&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">void</span>&#xA0;<span class=\"code_method\">run</span>()&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;Doe&#xA0;iets&#xA0;om&#xA0;het&#xA0;probleem&#xA0;te&#xA0;verhelpen,&#xA0;iets&#xA0;te&#xA0;resetten,&#xA0;whatever.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;},\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_method\">getMaxRetries</span>(),&#xA0;<span class=\"code_method\">getDelay</span>()\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}</code></div></td></tr></table><br>\r\n<br>\r\nGooit een OutOfRetriesException wanneer de retries op zijn, bij een RetryableFailureException zal de RetryHelper opnieuw proberen en bij een PermanentFailureException probeert hij niet opnieuw. De FatalErrorException is een subclass van PermanentFailureException en zorgt er in dit geval voor dat het programma stopt.<br>\r\n<br>\r\nDe core van de RetryHelper zelf ziet er zo uit:<br>\r\n<br>Java:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></code></td><td class=\"phphighlightcode\"><div><code>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">public</span>&#xA0;&lt;<span class=\"code_ident\">V</span>&gt;&#xA0;<span class=\"code_ident\">V</span>&#xA0;<span class=\"code_method\">call</span>(<span class=\"code_keyword\">final</span>&#xA0;<span class=\"code_ident\">Callable</span>&lt;<span class=\"code_ident\">V</span>&gt;&#xA0;<span class=\"code_ident\">operation</span>,&#xA0;<span class=\"code_ident\">Runnable</span>&#xA0;<span class=\"code_ident\">repairOperation</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">for</span>(<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">attempt</span>&#xA0;=&#xA0;<span class=\"code_number\">0</span>;&#xA0;<span class=\"code_ident\">attempt</span>&#xA0;&lt;=&#xA0;<span class=\"code_method\">getMaxRetries</span>();&#xA0;<span class=\"code_ident\">attempt</span>++)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">try</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;After&#xA0;the&#xA0;first&#xA0;attempt,&#xA0;try&#xA0;to&#xA0;call&#xA0;the&#xA0;repair&#xA0;function&#xA0;before</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;actually&#xA0;retrying&#xA0;the&#xA0;operation.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>(<span class=\"code_ident\">attempt</span>&gt;<span class=\"code_number\">0</span>&#xA0;&amp;&amp;&#xA0;<span class=\"code_ident\">repairOperation</span>&#xA0;!=&#xA0;<span class=\"code_keyword\">null</span>)\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">repairOperation</span>.<span class=\"code_method\">run</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">operation</span>.<span class=\"code_method\">call</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;<span class=\"code_keyword\">catch</span>&#xA0;(<span class=\"code_ident\">RetryableFailureException</span>&#xA0;<span class=\"code_ident\">e</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>(<span class=\"code_ident\">attempt</span>&#xA0;==&#xA0;<span class=\"code_method\">getMaxRetries</span>())\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">throw</span>&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">OutOfRetriesException</span>(<span class=\"code_ident\">e</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">logger</span>.<span class=\"code_method\">log</span>(<span class=\"code_ident\">Level</span>.<span class=\"code_ident\">WARNING</span>,&#xA0;<span class=\"code_ident\">String</span>.<span class=\"code_method\">format</span>(\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_string\">&quot;%s&#xA0;failed.&#xA0;Retrying&#xA0;in&#xA0;%d&#xA0;milliseconds&#xA0;(attempt&#xA0;%d&#xA0;of&#xA0;%d).&quot;</span>,\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">operation</span>,&#xA0;<span class=\"code_method\">getDelay</span>(),&#xA0;<span class=\"code_ident\">attempt</span><span class=\"code_number\">+1</span>,&#xA0;<span class=\"code_method\">getMaxRetries</span>()),&#xA0;<span class=\"code_ident\">e</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">ThreadUtil</span>.<span class=\"code_method\">sleep</span>(<span class=\"code_method\">getDelay</span>());\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;<span class=\"code_keyword\">catch</span>&#xA0;(<span class=\"code_ident\">ProcessingFailedException</span>&#xA0;<span class=\"code_ident\">e</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">throw</span>&#xA0;<span class=\"code_ident\">e</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;<span class=\"code_keyword\">catch</span>&#xA0;(<span class=\"code_ident\">Exception</span>&#xA0;<span class=\"code_ident\">e</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;If&#xA0;any&#xA0;other&#xA0;kind&#xA0;of&#xA0;Exception&#xA0;occurs,&#xA0;rethrow&#xA0;as&#xA0;a&#xA0;fatal&#xA0;error&#xA0;because</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_comment\">//&#xA0;whatever&#xA0;it&#xA0;is,&#xA0;it&#xA0;wasn&apos;t&#xA0;properly&#xA0;handled.</span>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">throw</span>&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">FatalErrorException</span>(<span class=\"code_ident\">e</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">throw</span>&#xA0;<span class=\"code_keyword\">new</span>&#xA0;<span class=\"code_method\">FatalErrorException</span>(<span class=\"code_string\">&quot;Exited&#xA0;retry&#xA0;loop&#xA0;without&#xA0;throwing&#xA0;an&#xA0;Exception.&#xA0;This&#xA0;is&#xA0;a&#xA0;bug.&quot;</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}</code></div></td></tr></table><br>\r\n<br>\r\nHelaas is java syntax wat onhandiger om delegates in uit te drukken. Wij arme Javanen moeten het zonder dat soort handige suiker doen.<p class=\"edit\">[Reactie gewijzigd op vrijdag 17 december 2010 12:52]</p>",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "vrijdag 17 december 2010 12:48",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5764/generic-retry.html#r_77369\">RobIII schreef op vrijdag 17 december 2010 @ 11:51:</a><br>\r\nIk vind &apos;t nogal lomp om er een thread.sleep in te gooien; dan liever een (optionele) waitdelegate. Ook heel die default(T) zou ik achterwege laten en per definitie een exception gooien; dan kan de caller nog altijd bepalen wat &apos;ie ermee wil doen.</div></blockquote>Een WaitDelegate vind ik hier een wat minder idee, aangezien je WaitDelegate zelden (nooit?) anders zal zijn dan <br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br></code></td><td class=\"phphighlightcode\"><div><code>()=&gt;<span class=\"code_ident\">Thread</span>.<span class=\"code_method\">Sleep</span>(<span class=\"code_ident\">Config</span>.<span class=\"code_ident\">EenTimeoutWaarde</span>)</code></div></td></tr></table>. Dan kan je dat net zo goed afdwingen in je function contract. Overigens is de call nu ook al optioneel door gewoon &apos;0&apos; in te vullen.<br>\r\n<br>\r\nEn je wil wel volledige vrijheid wat je met je tijd tussen de retries doet, maar dan niet de keuze om wel of niet exceptions te gooien. Je kan in principe gewoon laten throwen door een overload te maken die standaard &apos;true&apos; meegeeft, dan maken je teammembers een bewuste keuze om de exception in te laten slikken (sowieso zou er gelogd moeten worden als er geretried wordt).<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5764/generic-retry.html#r_77364\">RedHornet schreef op vrijdag 17 december 2010 @ 11:28:</a><br>\r\nIn plaats van een vieze GOTO had hier natuulrijk gewoon een recursieve functie gebruikt moeten worden die zelf bijhoudt of de maximale aantal tries behaalt zijn <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\">. Dat zou de netste manier zijn geweest en dus geen while, for, foreach, goto of whatever <img src=\"http://tweakimg.net/g/s/puh2.gif\" width=\"15\" height=\"15\" alt=\":P\"></div></blockquote><span style=\"text-decoration:line-through\">Alleen je stacktrace raakt zo vervuild!</span> Wat @RoadRunner zegt dus  <img src=\"http://tweakimg.net/g/s/yummie.gif\" width=\"15\" height=\"15\" alt=\":9\">",
            "ownReply": true
        },
        {
            "author": "terje7601",
            "date": "vrijdag 17 december 2010 13:00",
            "contentHtml": "Ik zie niet waarom je hier een goto zou verkiezen boven een for-lus. Zelf zou ik het nog anders implementeren, maar hier een equivalent voorbeeld met for. De for-try-return in regels 4-6 maakt m.i. snel duidelijk wat de methode doet.<br>\r\n<br>\r\n<br>C#:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></td><td class=\"phphighlightcode\"><div><code><span class=\"code_keyword\">public</span>&#xA0;<span class=\"code_keyword\">static</span>&#xA0;<span class=\"code_ident\">T</span>&#xA0;<span class=\"code_ident\">Retry</span>&lt;<span class=\"code_ident\">T</span>&gt;(...)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Exception</span>&#xA0;<span class=\"code_ident\">lastCause</span>&#xA0;=&#xA0;<span class=\"code_keyword\">null</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">for</span>(<span class=\"code_keyword\">int</span>&#xA0;<span class=\"code_ident\">i</span>=<span class=\"code_number\">0</span>;&#xA0;<span class=\"code_ident\">i</span>&lt;=<span class=\"code_ident\">nbRetries</span>;&#xA0;<span class=\"code_ident\">i</span>++)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">try</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_ident\">del</span>.<span class=\"code_method\">Invoke</span>();\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;<span class=\"code_keyword\">catch</span>(<span class=\"code_ident\">Exception</span>&#xA0;<span class=\"code_ident\">ex</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">lastCause</span>&#xA0;=&#xA0;<span class=\"code_ident\">ex</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_ident\">Thread</span>.<span class=\"code_method\">Sleep</span>(<span class=\"code_ident\">msPause</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>&#xA0;&#xA0;&#xA0;&#xA0;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">if</span>(<span class=\"code_ident\">throwExceptions</span>)&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">throw</span>&#xA0;<span class=\"code_ident\">lastCause</span>;\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;<span class=\"code_keyword\">else</span>&#xA0;{\n<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"code_keyword\">return</span>&#xA0;<span class=\"code_keyword\">default</span>(<span class=\"code_ident\">T</span>);\n<br>&#xA0;&#xA0;&#xA0;&#xA0;}\n<br>}</code></div></td></tr></table><p class=\"edit\">[Reactie gewijzigd op vrijdag 17 december 2010 13:19]</p>",
            "ownReply": false
        },
        {
            "author": "RedHornet",
            "date": "vrijdag 17 december 2010 13:04",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5764/generic-retry.html#r_77378\">creator1988 schreef op vrijdag 17 december 2010 @ 12:48:</a><br>\r\n<span style=\"text-decoration:line-through\">Alleen je stacktrace raakt zo vervuild!</span> Wat @RoadRunner zegt dus  <img src=\"http://tweakimg.net/g/s/yummie.gif\" width=\"15\" height=\"15\" alt=\":9\"></div></blockquote>Je kunt je stacktrace niet vervuilen. Dat is onmogelijk. Dezelfde methode staat er dan misschien 3x boven elkaar in, maar dat klopt ook gewoon bij een retry functie waar alle 3 de retries uitgevoerd zijn! Dat is dus zelfs eigenlijk een veel duidelijkere stacktrace dan bij de GOTO <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\">.",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "vrijdag 17 december 2010 13:31",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5764/generic-retry.html#r_77380\">RedHornet schreef op vrijdag 17 december 2010 @ 13:04:</a><br>\r\n[...]<br>\r\n<br>\r\n<br>\r\nJe kunt je stacktrace niet vervuilen. Dat is onmogelijk. Dezelfde methode staat er dan misschien 3x boven elkaar in, maar dat klopt ook gewoon bij een retry functie waar alle 3 de retries uitgevoerd zijn! Dat is dus zelfs eigenlijk een veel duidelijkere stacktrace dan bij de GOTO <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\">.</div></blockquote>Nee, want je hebt dan elke keer in je stacktrace: Retry -&gt; Functie -&gt; Retry -&gt; Functie -&gt; Retry ..., terwijl het nu Retry -&gt; Functie -&gt; Functie -&gt; Functie -&gt; Functie is.",
            "ownReply": true
        },
        {
            "author": "RedHornet",
            "date": "vrijdag 17 december 2010 13:37",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5764/generic-retry.html#r_77382\">creator1988 schreef op vrijdag 17 december 2010 @ 13:31:</a><br>\r\n[...]<br>\r\n<br>\r\nNee, want je hebt dan elke keer in je stacktrace: Retry -&gt; Functie -&gt; Retry -&gt; Functie -&gt; Retry ..., terwijl het nu Retry -&gt; Functie -&gt; Functie -&gt; Functie -&gt; Functie is.</div></blockquote>Je stacktrace zal nu tonen: Retry. Een GOTO komt namelijk niet in je stacktrace terecht. Met een recursive functie zou hij geven: Retry -&gt; Retry -&gt; Retry. En als je subfuncties bouwt dan is het logisch dat hij die toont, dat is namelijk het doel van de stacktrace. Dus het lijkt erop dat jij de stacktrace anders wil gebruiken dan wat hij behoort te doen.",
            "ownReply": false
        },
        {
            "author": "creator1988",
            "date": "vrijdag 17 december 2010 13:42",
            "contentHtml": "<blockquote><div class=\"quote\"><a href=\"http://glamour.tweakblogs.net/blog/5764/generic-retry.html#r_77383\">RedHornet schreef op vrijdag 17 december 2010 @ 13:37:</a><br>\r\n[...]<br>\r\n<br>\r\n<br>\r\nJe stacktrace zal nu tonen: Retry. Een GOTO komt namelijk niet in je stacktrace terecht. Met een recursive functie zou hij geven: Retry -&gt; Retry -&gt; Retry. En als je subfuncties bouwt dan is het logisch dat hij die toont, dat is namelijk het doel van de stacktrace. Dus het lijkt erop dat jij de stacktrace anders wil gebruiken dan wat hij behoort te doen.</div></blockquote>Met een recursieve retry is elke retry-poging een extra frame op je stack:<br>\r\n<br>stack:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n4\n5\n6\n</pre></td><td class=\"phphighlightcode\"><div><pre>Retry\r\nInner\r\nRetry\r\nInner\r\nRetry\r\nInner</pre></div></td></tr></table><br>\r\n<br>\r\nTerwijl met een GOTO<br>\r\n<br>stack:<br><table class=\"phphighlight\"><tr><td class=\"phphighlightline\"><pre>1\n2\n3\n4\n</pre></td><td class=\"phphighlightcode\"><div><pre>Retry\r\nInner\r\nInner\r\nInner</pre></div></td></tr></table><br>\r\n<br>\r\nLijkt me toch logisch? Met een recursieve functie gooi je je stack veel voller.",
            "ownReply": true
        },
        {
            "author": "RedHornet",
            "date": "vrijdag 17 december 2010 13:47",
            "contentHtml": "In de eerste zie je dus exact dat er 3 retries zijn geweest, in de tweede niet <img src=\"http://tweakimg.net/g/s/wink.gif\" width=\"15\" height=\"15\" alt=\";)\">. Over de grote van je stacktrace hoef je je sowieso niet druk te maken. Doe je dat wel fan raad ik je aan om vooral niet naar SharePoint, MS CRM en alle andere grote applicaties te kijken. Die stacktraces zijn nogal eens enorm. Daarbij komt het dat de stacktrace geen geheugen slurper is en je hem eigenlijk alleen tijdens debuggen nodig hebt. Alleen het benaderen van de StackFrames ed. in je code is erg time consuming en daar dien je op te letten. Voor de rest boeit het niet.<br>\r\n<br>\r\nEigenlijk is dit dus een onzinnige discussie zo: Beide stacktraces laten exact zien wat je nodig hebt om de problemen op te lossen voor beide specifieke code voorbeelden. Beide voorbeelden doen uitstekend hun werk en het verschil in geheugengebruik en tijd is vrijwel 0 en dus verwaarloosbaar in de praktijk. Leuk voor statistiekenliefhebbers, maar als je je daar druk om moet maken in je dagelijks werk, dan zul je nog veel gaan stressen...",
            "ownReply": false
        },
        {
            "author": "ReenL",
            "date": "maandag 27 december 2010 16:03",
            "contentHtml": "Ik was ook voorstander van een loopje geweest en altijd een exception gooien. Maar dat is mieren-n*****, goed idee, maar ik neem aan dat je dit niet in een web-request gebruikt?<br>\r\n<br>\r\n@terje7601:<br>\r\nAls de laaste poging is geweest doe je alsnog een sleep.",
            "ownReply": false
        }
    ]
}